
Peris_P1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e34  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e0  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  080061cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  7 .bss          00000420  20000074  20000074  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000494  20000494  00020074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e42d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000254f  00000000  00000000  0002e4d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000011f8  00000000  00000000  00030a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001090  00000000  00000000  00031c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000066c1  00000000  00000000  00032ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000059b6  00000000  00000000  00039369  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003ed1f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004f4c  00000000  00000000  0003ed9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00043ce8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004fcc 	.word	0x08004fcc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08004fcc 	.word	0x08004fcc

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f092 0f00 	teq	r2, #0
 80004da:	bf14      	ite	ne
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e720      	b.n	8000334 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aedc 	beq.w	80002e2 <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6c1      	b.n	80002e2 <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2iz>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d215      	bcs.n	8000aca <__aeabi_d2iz+0x36>
 8000a9e:	d511      	bpl.n	8000ac4 <__aeabi_d2iz+0x30>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d912      	bls.n	8000ad0 <__aeabi_d2iz+0x3c>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d105      	bne.n	8000adc <__aeabi_d2iz+0x48>
 8000ad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2uiz>:
 8000ae4:	004a      	lsls	r2, r1, #1
 8000ae6:	d211      	bcs.n	8000b0c <__aeabi_d2uiz+0x28>
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d211      	bcs.n	8000b12 <__aeabi_d2uiz+0x2e>
 8000aee:	d50d      	bpl.n	8000b0c <__aeabi_d2uiz+0x28>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d40e      	bmi.n	8000b18 <__aeabi_d2uiz+0x34>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_d2uiz+0x3a>
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73bb      	strb	r3, [r7, #14]
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	78db      	ldrb	r3, [r3, #3]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d039      	beq.n	8000c54 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <NVIC_Init+0xbc>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	43db      	mvns	r3, r3
 8000be6:	0a1b      	lsrs	r3, r3, #8
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	f1c3 0304 	rsb	r3, r3, #4
 8000bf6:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000bf8:	7b7a      	ldrb	r2, [r7, #13]
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	fa42 f303 	asr.w	r3, r2, r3
 8000c00:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	785b      	ldrb	r3, [r3, #1]
 8000c06:	461a      	mov	r2, r3
 8000c08:	7bbb      	ldrb	r3, [r7, #14]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	789a      	ldrb	r2, [r3, #2]
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	4013      	ands	r3, r2
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	011b      	lsls	r3, r3, #4
 8000c24:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <NVIC_Init+0xc0>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	7bfa      	ldrb	r2, [r7, #15]
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c34:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <NVIC_Init+0xc0>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	f003 031f 	and.w	r3, r3, #31
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c4e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000c52:	e00f      	b.n	8000c74 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c54:	490b      	ldr	r1, [pc, #44]	; (8000c84 <NVIC_Init+0xc0>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	f003 031f 	and.w	r3, r3, #31
 8000c68:	2201      	movs	r2, #1
 8000c6a:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c6c:	f100 0320 	add.w	r3, r0, #32
 8000c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000ca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000caa:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	791b      	ldrb	r3, [r3, #4]
 8000cb0:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <ADC_Init+0xa8>)
 8000cce:	4013      	ands	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000cda:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000ce0:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	795b      	ldrb	r3, [r3, #5]
 8000ce6:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000d02:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	7d1b      	ldrb	r3, [r3, #20]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000d12:	7afb      	ldrb	r3, [r7, #11]
 8000d14:	051b      	lsls	r3, r3, #20
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	c0fff7fd 	.word	0xc0fff7fd

08000d34 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <ADC_CommonInit+0x48>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <ADC_CommonInit+0x4c>)
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000d56:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000d5c:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000d62:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <ADC_CommonInit+0x48>)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	6053      	str	r3, [r2, #4]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	40012300 	.word	0x40012300
 8000d80:	fffc30e0 	.word	0xfffc30e0

08000d84 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d006      	beq.n	8000da4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f043 0201 	orr.w	r2, r3, #1
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000da2:	e005      	b.n	8000db0 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f023 0201 	bic.w	r2, r3, #1
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	609a      	str	r2, [r3, #8]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4603      	mov	r3, r0
 8000dcc:	70fb      	strb	r3, [r7, #3]
 8000dce:	460b      	mov	r3, r1
 8000dd0:	70bb      	strb	r3, [r7, #2]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	2b09      	cmp	r3, #9
 8000de2:	d923      	bls.n	8000e2c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000dea:	78fb      	ldrb	r3, [r7, #3]
 8000dec:	f1a3 020a 	sub.w	r2, r3, #10
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	2207      	movs	r2, #7
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	4013      	ands	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000e08:	7879      	ldrb	r1, [r7, #1]
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	f1a3 020a 	sub.w	r2, r3, #10
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	e01e      	b.n	8000e6a <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000e32:	78fa      	ldrb	r2, [r7, #3]
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	2207      	movs	r2, #7
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000e4c:	7879      	ldrb	r1, [r7, #1]
 8000e4e:	78fa      	ldrb	r2, [r7, #3]
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000e6a:	78bb      	ldrb	r3, [r7, #2]
 8000e6c:	2b06      	cmp	r3, #6
 8000e6e:	d821      	bhi.n	8000eb4 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e74:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000e76:	78bb      	ldrb	r3, [r7, #2]
 8000e78:	1e5a      	subs	r2, r3, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	221f      	movs	r2, #31
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000e92:	78f9      	ldrb	r1, [r7, #3]
 8000e94:	78bb      	ldrb	r3, [r7, #2]
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000eb2:	e047      	b.n	8000f44 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8000eb4:	78bb      	ldrb	r3, [r7, #2]
 8000eb6:	2b0c      	cmp	r3, #12
 8000eb8:	d821      	bhi.n	8000efe <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000ec0:	78bb      	ldrb	r3, [r7, #2]
 8000ec2:	1fda      	subs	r2, r3, #7
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4413      	add	r3, r2
 8000eca:	221f      	movs	r2, #31
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000edc:	78f9      	ldrb	r1, [r7, #3]
 8000ede:	78bb      	ldrb	r3, [r7, #2]
 8000ee0:	1fda      	subs	r2, r3, #7
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000efc:	e022      	b.n	8000f44 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f02:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000f04:	78bb      	ldrb	r3, [r7, #2]
 8000f06:	f1a3 020d 	sub.w	r2, r3, #13
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	221f      	movs	r2, #31
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000f22:	78f9      	ldrb	r1, [r7, #3]
 8000f24:	78bb      	ldrb	r3, [r7, #2]
 8000f26:	f1a3 020d 	sub.w	r2, r3, #13
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	609a      	str	r2, [r3, #8]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d006      	beq.n	8000f90 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8000f8e:	e005      	b.n	8000f9c <ADC_DMACmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8000fc6:	e005      	b.n	8000fd4 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <DAC_SetChannel1Data+0x34>)
 8000ff2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	3308      	adds	r3, #8
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	461a      	mov	r2, r3
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	6013      	str	r3, [r2, #0]
}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40007400 	.word	0x40007400

08001018 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <DMA_Init+0xac>)
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001042:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800104e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800105a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001066:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f023 0307 	bic.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	4313      	orrs	r3, r2
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	4313      	orrs	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	691a      	ldr	r2, [r3, #16]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60da      	str	r2, [r3, #12]
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	f01c803f 	.word	0xf01c803f

080010c8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f043 0201 	orr.w	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80010e6:	e005      	b.n	80010f4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 0201 	bic.w	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a15      	ldr	r2, [pc, #84]	; (800116c <DMA_GetFlagStatus+0x6c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d802      	bhi.n	8001120 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <DMA_GetFlagStatus+0x70>)
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	e001      	b.n	8001124 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <DMA_GetFlagStatus+0x74>)
 8001122:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	e002      	b.n	800113c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001142:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001146:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8001152:	2301      	movs	r3, #1
 8001154:	75fb      	strb	r3, [r7, #23]
 8001156:	e001      	b.n	800115c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800115c:	7dfb      	ldrb	r3, [r7, #23]
}
 800115e:	4618      	mov	r0, r3
 8001160:	371c      	adds	r7, #28
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	4002640f 	.word	0x4002640f
 8001170:	40026000 	.word	0x40026000
 8001174:	40026400 	.word	0x40026400

08001178 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <DMA_ClearFlag+0x50>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d802      	bhi.n	8001190 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <DMA_ClearFlag+0x54>)
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	e001      	b.n	8001194 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <DMA_ClearFlag+0x58>)
 8001192:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80011a4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80011ac:	e006      	b.n	80011bc <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80011b4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	6093      	str	r3, [r2, #8]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	4002640f 	.word	0x4002640f
 80011cc:	40026000 	.word	0x40026000
 80011d0:	40026400 	.word	0x40026400

080011d4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	4613      	mov	r3, r2
 80011e0:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00f      	beq.n	800120c <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	615a      	str	r2, [r3, #20]
 80011fe:	e005      	b.n	800120c <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	2b80      	cmp	r3, #128	; 0x80
 8001210:	d014      	beq.n	800123c <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f003 031e 	and.w	r3, r3, #30
 8001222:	431a      	orrs	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8001228:	e008      	b.n	800123c <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	f003 031e 	and.w	r3, r3, #30
 8001234:	43db      	mvns	r3, r3
 8001236:	401a      	ands	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	601a      	str	r2, [r3, #0]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a22      	ldr	r2, [pc, #136]	; (80012ec <DMA_GetITStatus+0xa4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d802      	bhi.n	800126c <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <DMA_GetITStatus+0xa8>)
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	e001      	b.n	8001270 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <DMA_GetITStatus+0xac>)
 800126e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001276:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00a      	beq.n	8001294 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	0adb      	lsrs	r3, r3, #11
 8001282:	f003 031e 	and.w	r3, r3, #30
 8001286:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4013      	ands	r3, r2
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	e004      	b.n	800129e <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129c:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e002      	b.n	80012b6 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80012bc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80012c0:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <DMA_GetITStatus+0x90>
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 80012d2:	2301      	movs	r3, #1
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e001      	b.n	80012dc <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	371c      	adds	r7, #28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	4002640f 	.word	0x4002640f
 80012f0:	40026000 	.word	0x40026000
 80012f4:	40026400 	.word	0x40026400

080012f8 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a10      	ldr	r2, [pc, #64]	; (8001348 <DMA_ClearITPendingBit+0x50>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d802      	bhi.n	8001310 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <DMA_ClearITPendingBit+0x54>)
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	e001      	b.n	8001314 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <DMA_ClearITPendingBit+0x58>)
 8001312:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001324:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 800132c:	e006      	b.n	800133c <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001334:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	6093      	str	r3, [r2, #8]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	4002640f 	.word	0x4002640f
 800134c:	40026000 	.word	0x40026000
 8001350:	40026400 	.word	0x40026400

08001354 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001360:	4b34      	ldr	r3, [pc, #208]	; (8001434 <EXTI_Init+0xe0>)
 8001362:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	799b      	ldrb	r3, [r3, #6]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d04f      	beq.n	800140c <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800136c:	4931      	ldr	r1, [pc, #196]	; (8001434 <EXTI_Init+0xe0>)
 800136e:	4b31      	ldr	r3, [pc, #196]	; (8001434 <EXTI_Init+0xe0>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	43db      	mvns	r3, r3
 8001378:	4013      	ands	r3, r2
 800137a:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800137c:	492d      	ldr	r1, [pc, #180]	; (8001434 <EXTI_Init+0xe0>)
 800137e:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <EXTI_Init+0xe0>)
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	43db      	mvns	r3, r3
 8001388:	4013      	ands	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	461a      	mov	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	6811      	ldr	r1, [r2, #0]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80013a6:	4923      	ldr	r1, [pc, #140]	; (8001434 <EXTI_Init+0xe0>)
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <EXTI_Init+0xe0>)
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	4013      	ands	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80013b6:	491f      	ldr	r1, [pc, #124]	; (8001434 <EXTI_Init+0xe0>)
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <EXTI_Init+0xe0>)
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	4013      	ands	r3, r2
 80013c4:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	795b      	ldrb	r3, [r3, #5]
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d10e      	bne.n	80013ec <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80013ce:	4919      	ldr	r1, [pc, #100]	; (8001434 <EXTI_Init+0xe0>)
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <EXTI_Init+0xe0>)
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4313      	orrs	r3, r2
 80013da:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80013dc:	4915      	ldr	r1, [pc, #84]	; (8001434 <EXTI_Init+0xe0>)
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <EXTI_Init+0xe0>)
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80013ea:	e01d      	b.n	8001428 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <EXTI_Init+0xe0>)
 80013ee:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	795b      	ldrb	r3, [r3, #5]
 80013f4:	461a      	mov	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4413      	add	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	6811      	ldr	r1, [r2, #0]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	601a      	str	r2, [r3, #0]
}
 800140a:	e00d      	b.n	8001428 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	791b      	ldrb	r3, [r3, #4]
 8001410:	461a      	mov	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4413      	add	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	6811      	ldr	r1, [r2, #0]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	43d2      	mvns	r2, r2
 8001424:	400a      	ands	r2, r1
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	40013c00 	.word	0x40013c00

08001438 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <EXTI_GetITStatus+0x30>)
 8001446:	695a      	ldr	r2, [r3, #20]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4013      	ands	r3, r2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e001      	b.n	800145a <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800145a:	7bfb      	ldrb	r3, [r7, #15]
  
}
 800145c:	4618      	mov	r0, r3
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	40013c00 	.word	0x40013c00

0800146c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <EXTI_ClearITPendingBit+0x1c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6153      	str	r3, [r2, #20]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40013c00 	.word	0x40013c00

0800148c <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* temporary registers */
  uint32_t tmpr1 = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
  uint32_t tmpr3 = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr4 = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685a      	ldr	r2, [r3, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80014ac:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 80014b2:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 80014b8:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_CASLatency |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 80014be:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
             FMC_SDRAMInitStruct->FMC_CASLatency |
 80014c4:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 80014ca:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80014d0:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80014d6:	4313      	orrs	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <FMC_SDRAMInit+0x64>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 80014e2:	4940      	ldr	r1, [pc, #256]	; (80015e4 <FMC_SDRAMInit+0x158>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80014ee:	e011      	b.n	8001514 <FMC_SDRAMInit+0x88>
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69da      	ldr	r2, [r3, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80014f8:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80014fe:	4313      	orrs	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 8001502:	4a38      	ldr	r2, [pc, #224]	; (80015e4 <FMC_SDRAMInit+0x158>)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6013      	str	r3, [r2, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8001508:	4936      	ldr	r1, [pc, #216]	; (80015e4 <FMC_SDRAMInit+0x158>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d130      	bne.n	800157e <FMC_SDRAMInit+0xf2>
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	011b      	lsls	r3, r3, #4
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800152e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	3b01      	subs	r3, #1
 8001538:	021b      	lsls	r3, r3, #8
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800153a:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	3b01      	subs	r3, #1
 8001544:	031b      	lsls	r3, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8001546:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	3b01      	subs	r3, #1
 8001550:	041b      	lsls	r3, r3, #16
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8001552:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	3b01      	subs	r3, #1
 800155c:	051b      	lsls	r3, r3, #20
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 800155e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	3b01      	subs	r3, #1
 8001568:	061b      	lsls	r3, r3, #24
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800156e:	491d      	ldr	r1, [pc, #116]	; (80015e4 <FMC_SDRAMInit+0x158>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	3302      	adds	r3, #2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  
}
 800157c:	e02c      	b.n	80015d8 <FMC_SDRAMInit+0x14c>
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	3b01      	subs	r3, #1
 800158e:	011b      	lsls	r3, r3, #4
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8001590:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	3b01      	subs	r3, #1
 800159a:	021b      	lsls	r3, r3, #8
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800159c:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	041b      	lsls	r3, r3, #16
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	031a      	lsls	r2, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	3b01      	subs	r3, #1
 80015be:	051b      	lsls	r3, r3, #20
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <FMC_SDRAMInit+0x158>)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	6093      	str	r3, [r2, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 80015ca:	4906      	ldr	r1, [pc, #24]	; (80015e4 <FMC_SDRAMInit+0x158>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3302      	adds	r3, #2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	a0000140 	.word	0xa0000140

080015e8 <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0x0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681a      	ldr	r2, [r3, #0]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 80015fc:	431a      	orrs	r2, r3
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	3b01      	subs	r3, #1
 8001604:	015b      	lsls	r3, r3, #5
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 8001606:	431a      	orrs	r2, r3
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	025b      	lsls	r3, r3, #9
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800160e:	4313      	orrs	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  
  FMC_Bank5_6->SDCMR = tmpr;
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <FMC_SDRAMCmdConfig+0x3c>)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6113      	str	r3, [r2, #16]

}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	a0000140 	.word	0xa0000140

08001628 <FMC_SetRefreshCount>:
  * @brief  defines the SDRAM Memory Refresh rate.
  * @param  FMC_Count: specifies the Refresh timer count.       
  * @retval None
  */
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 8001630:	4906      	ldr	r1, [pc, #24]	; (800164c <FMC_SetRefreshCount+0x24>)
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <FMC_SetRefreshCount+0x24>)
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4313      	orrs	r3, r2
 800163c:	614b      	str	r3, [r1, #20]
   
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	a0000140 	.word	0xa0000140

08001650 <FMC_SDRAMWriteProtectionConfig>:
  * @param  NewState: new state of the write protection flag.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_SDRAMWriteProtectionConfig(uint32_t SDRAM_Bank, FunctionalState NewState)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
  
  if (NewState != DISABLE)
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00a      	beq.n	8001678 <FMC_SDRAMWriteProtectionConfig+0x28>
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <FMC_SDRAMWriteProtectionConfig+0x4c>)
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <FMC_SDRAMWriteProtectionConfig+0x4c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  else
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
  } 
  
}
 8001676:	e00a      	b.n	800168e <FMC_SDRAMWriteProtectionConfig+0x3e>
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
 8001678:	4908      	ldr	r1, [pc, #32]	; (800169c <FMC_SDRAMWriteProtectionConfig+0x4c>)
 800167a:	4a08      	ldr	r2, [pc, #32]	; (800169c <FMC_SDRAMWriteProtectionConfig+0x4c>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001682:	f647 53ff 	movw	r3, #32255	; 0x7dff
 8001686:	4013      	ands	r3, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	a0000140 	.word	0xa0000140

080016a0 <FMC_GetFlagStatus>:
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.
  *            @arg FMC_FLAG_Busy: Busy status Flag.     
  * @retval The new state of FMC_FLAG (SET or RESET).
  */
FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b10      	cmp	r3, #16
 80016b6:	d103      	bne.n	80016c0 <FMC_GetFlagStatus+0x20>
  {
    tmpsr = FMC_Bank2->SR2;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <FMC_GetFlagStatus+0x6c>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	e012      	b.n	80016e6 <FMC_GetFlagStatus+0x46>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c6:	d103      	bne.n	80016d0 <FMC_GetFlagStatus+0x30>
  {
    tmpsr = FMC_Bank3->SR3;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <FMC_GetFlagStatus+0x70>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	e00a      	b.n	80016e6 <FMC_GetFlagStatus+0x46>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d6:	d103      	bne.n	80016e0 <FMC_GetFlagStatus+0x40>
  {
    tmpsr = FMC_Bank4->SR4;
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <FMC_GetFlagStatus+0x74>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	e002      	b.n	80016e6 <FMC_GetFlagStatus+0x46>
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <FMC_GetFlagStatus+0x78>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	60bb      	str	r3, [r7, #8]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	401a      	ands	r2, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d002      	beq.n	80016f8 <FMC_GetFlagStatus+0x58>
  {
    bitstatus = RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	e001      	b.n	80016fc <FMC_GetFlagStatus+0x5c>
  }
  else
  {
    bitstatus = SET;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	a0000060 	.word	0xa0000060
 8001710:	a0000080 	.word	0xa0000080
 8001714:	a00000a0 	.word	0xa00000a0
 8001718:	a0000140 	.word	0xa0000140

0800171c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	e076      	b.n	8001826 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001738:	2201      	movs	r2, #1
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d165      	bne.n	8001820 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2103      	movs	r1, #3
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	401a      	ands	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	791b      	ldrb	r3, [r3, #4]
 8001772:	4619      	mov	r1, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	791b      	ldrb	r3, [r3, #4]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d003      	beq.n	8001792 <GPIO_Init+0x76>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	791b      	ldrb	r3, [r3, #4]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d12e      	bne.n	80017f0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2103      	movs	r1, #3
 800179c:	fa01 f303 	lsl.w	r3, r1, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	401a      	ands	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	795b      	ldrb	r3, [r3, #5]
 80017b0:	4619      	mov	r1, r3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4619      	mov	r1, r3
 80017ca:	2301      	movs	r3, #1
 80017cc:	408b      	lsls	r3, r1
 80017ce:	43db      	mvns	r3, r3
 80017d0:	401a      	ands	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	7992      	ldrb	r2, [r2, #6]
 80017de:	4611      	mov	r1, r2
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	b292      	uxth	r2, r2
 80017e4:	fa01 f202 	lsl.w	r2, r1, r2
 80017e8:	b292      	uxth	r2, r2
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2103      	movs	r1, #3
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	401a      	ands	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	79db      	ldrb	r3, [r3, #7]
 8001810:	4619      	mov	r1, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3301      	adds	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d985      	bls.n	8001738 <GPIO_Init+0x1c>
    }
  }
}
 800182c:	bf00      	nop
 800182e:	371c      	adds	r7, #28
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001844:	2300      	movs	r3, #0
 8001846:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	887b      	ldrh	r3, [r7, #2]
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
 8001858:	e001      	b.n	800185e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	831a      	strh	r2, [r3, #24]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	887a      	ldrh	r2, [r7, #2]
 800189a:	835a      	strh	r2, [r3, #26]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
 80018b4:	4613      	mov	r3, r2
 80018b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80018b8:	787b      	ldrb	r3, [r7, #1]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	887a      	ldrh	r2, [r7, #2]
 80018c2:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80018c4:	e002      	b.n	80018cc <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	887a      	ldrh	r2, [r7, #2]
 80018ca:	835a      	strh	r2, [r3, #26]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	405a      	eors	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	615a      	str	r2, [r3, #20]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
 8001908:	4613      	mov	r3, r2
 800190a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001914:	787a      	ldrb	r2, [r7, #1]
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001924:	887b      	ldrh	r3, [r7, #2]
 8001926:	08db      	lsrs	r3, r3, #3
 8001928:	b29b      	uxth	r3, r3
 800192a:	4618      	mov	r0, r3
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	08db      	lsrs	r3, r3, #3
 8001930:	b29b      	uxth	r3, r3
 8001932:	461a      	mov	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800193c:	887b      	ldrh	r3, [r7, #2]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	210f      	movs	r1, #15
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	ea02 0103 	and.w	r1, r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f100 0208 	add.w	r2, r0, #8
 8001956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800195a:	887b      	ldrh	r3, [r7, #2]
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	b29b      	uxth	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001970:	887b      	ldrh	r3, [r7, #2]
 8001972:	08db      	lsrs	r3, r3, #3
 8001974:	b29b      	uxth	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 80019b0:	e007      	b.n	80019c2 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019bc:	b29a      	uxth	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	801a      	strh	r2, [r3, #0]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b087      	sub	sp, #28
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	0f1b      	lsrs	r3, r3, #28
 80019ec:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80019f4:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3314      	adds	r3, #20
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	e005      	b.n	8001a10 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3318      	adds	r3, #24
 8001a0e:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	75fb      	strb	r3, [r7, #23]
 8001a20:	e001      	b.n	8001a26 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LTDC_Init>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t horizontalsync = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t accumulatedHBP = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
  uint32_t accumulatedactiveW = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  uint32_t totalwidth = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
  uint32_t backgreen = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
  uint32_t backred = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001a54:	4940      	ldr	r1, [pc, #256]	; (8001b58 <LTDC_Init+0x124>)
 8001a56:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <LTDC_Init+0x124>)
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	4b40      	ldr	r3, [pc, #256]	; (8001b5c <LTDC_Init+0x128>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	041b      	lsls	r3, r3, #16
 8001a66:	61fb      	str	r3, [r7, #28]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 8001a68:	483b      	ldr	r0, [pc, #236]	; (8001b58 <LTDC_Init+0x124>)
 8001a6a:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <LTDC_Init+0x124>)
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6959      	ldr	r1, [r3, #20]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	430b      	orrs	r3, r1
 8001a76:	4313      	orrs	r3, r2
 8001a78:	6083      	str	r3, [r0, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001a7a:	4937      	ldr	r1, [pc, #220]	; (8001b58 <LTDC_Init+0x124>)
 8001a7c:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <LTDC_Init+0x124>)
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <LTDC_Init+0x128>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	60cb      	str	r3, [r1, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	041b      	lsls	r3, r3, #16
 8001a8c:	61bb      	str	r3, [r7, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 8001a8e:	4832      	ldr	r0, [pc, #200]	; (8001b58 <LTDC_Init+0x124>)
 8001a90:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <LTDC_Init+0x124>)
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69d9      	ldr	r1, [r3, #28]
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60c3      	str	r3, [r0, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001aa0:	492d      	ldr	r1, [pc, #180]	; (8001b58 <LTDC_Init+0x124>)
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <LTDC_Init+0x124>)
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <LTDC_Init+0x128>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	610b      	str	r3, [r1, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	041b      	lsls	r3, r3, #16
 8001ab2:	617b      	str	r3, [r7, #20]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 8001ab4:	4828      	ldr	r0, [pc, #160]	; (8001b58 <LTDC_Init+0x124>)
 8001ab6:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <LTDC_Init+0x124>)
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	6103      	str	r3, [r0, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001ac6:	4924      	ldr	r1, [pc, #144]	; (8001b58 <LTDC_Init+0x124>)
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <LTDC_Init+0x124>)
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <LTDC_Init+0x128>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	614b      	str	r3, [r1, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	041b      	lsls	r3, r3, #16
 8001ad8:	613b      	str	r3, [r7, #16]
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 8001ada:	481f      	ldr	r0, [pc, #124]	; (8001b58 <LTDC_Init+0x124>)
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <LTDC_Init+0x124>)
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	430b      	orrs	r3, r1
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	6143      	str	r3, [r0, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 8001aec:	491a      	ldr	r1, [pc, #104]	; (8001b58 <LTDC_Init+0x124>)
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <LTDC_Init+0x124>)
 8001af0:	699a      	ldr	r2, [r3, #24]
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <LTDC_Init+0x12c>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	618b      	str	r3, [r1, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8001af8:	4817      	ldr	r0, [pc, #92]	; (8001b58 <LTDC_Init+0x124>)
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <LTDC_Init+0x124>)
 8001afc:	699a      	ldr	r2, [r3, #24]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6819      	ldr	r1, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4319      	orrs	r1, r3
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8001b0c:	4319      	orrs	r1, r3
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	430b      	orrs	r3, r1
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8001b14:	4313      	orrs	r3, r2
 8001b16:	6183      	str	r3, [r0, #24]

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	60fb      	str	r3, [r7, #12]
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	041b      	lsls	r3, r3, #16
 8001b26:	60bb      	str	r3, [r7, #8]

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001b28:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <LTDC_Init+0x124>)
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <LTDC_Init+0x124>)
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001b32:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 8001b34:	4808      	ldr	r0, [pc, #32]	; (8001b58 <LTDC_Init+0x124>)
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <LTDC_Init+0x124>)
 8001b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3a:	68b9      	ldr	r1, [r7, #8]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4319      	orrs	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b44:	430b      	orrs	r3, r1
 8001b46:	4313      	orrs	r3, r2
 8001b48:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8001b4a:	bf00      	nop
 8001b4c:	3724      	adds	r7, #36	; 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40016800 	.word	0x40016800
 8001b5c:	f000f800 	.word	0xf000f800
 8001b60:	0ffe888f 	.word	0x0ffe888f

08001b64 <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <LTDC_Cmd+0x1e>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 8001b74:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <LTDC_Cmd+0x38>)
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <LTDC_Cmd+0x38>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6193      	str	r3, [r2, #24]
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
  }
}
 8001b80:	e005      	b.n	8001b8e <LTDC_Cmd+0x2a>
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 8001b82:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <LTDC_Cmd+0x38>)
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <LTDC_Cmd+0x38>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6193      	str	r3, [r2, #24]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40016800 	.word	0x40016800

08001ba0 <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d006      	beq.n	8001bbe <LTDC_DitherCmd+0x1e>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 8001bb0:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <LTDC_DitherCmd+0x38>)
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <LTDC_DitherCmd+0x38>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bba:	6193      	str	r3, [r2, #24]
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
  }
}
 8001bbc:	e005      	b.n	8001bca <LTDC_DitherCmd+0x2a>
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 8001bbe:	4a06      	ldr	r2, [pc, #24]	; (8001bd8 <LTDC_DitherCmd+0x38>)
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <LTDC_DitherCmd+0x38>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc8:	6193      	str	r3, [r2, #24]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40016800 	.word	0x40016800

08001bdc <LTDC_ReloadConfig>:
  *     @arg LTDC_VBReload: Immediate reload.  
  * @retval None
  */

void LTDC_ReloadConfig(uint32_t LTDC_Reload)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 8001be4:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <LTDC_ReloadConfig+0x1c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40016800 	.word	0x40016800

08001bfc <LTDC_LayerInit>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]

  uint32_t whsppos = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
  uint32_t wvsppos = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  uint32_t dcgreen = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  uint32_t dcred = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  uint32_t dcalpha = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
  uint32_t cfbp = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	041b      	lsls	r3, r3, #16
 8001c24:	61fb      	str	r3, [r7, #28]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	605a      	str	r2, [r3, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	041b      	lsls	r3, r3, #16
 8001c44:	61bb      	str	r3, [r7, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	609a      	str	r2, [r3, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	609a      	str	r2, [r3, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f023 0207 	bic.w	r2, r3, #7
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	611a      	str	r2, [r3, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	611a      	str	r2, [r3, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	617b      	str	r3, [r7, #20]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	041b      	lsls	r3, r3, #16
 8001c80:	613b      	str	r3, [r7, #16]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	061b      	lsls	r3, r3, #24
 8001c88:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	431a      	orrs	r2, r3
                        dcred | dcalpha);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	431a      	orrs	r2, r3
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	619a      	str	r2, [r3, #24]

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	615a      	str	r2, [r3, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	615a      	str	r2, [r3, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cc4:	f023 0307 	bic.w	r3, r3, #7
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	61d3      	str	r3, [r2, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	61da      	str	r2, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	60bb      	str	r3, [r7, #8]
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d14:	f023 0307 	bic.w	r3, r3, #7
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30

}
 8001d24:	bf00      	nop
 8001d26:	3724      	adds	r7, #36	; 0x24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LTDC_LayerCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <LTDC_LayerCmd+0x20>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
  }
}
 8001d4e:	e005      	b.n	8001d5c <LTDC_LayerCmd+0x2c>
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 0201 	bic.w	r2, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	601a      	str	r2, [r3, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LTDC_LayerPixelFormat>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         pixel format reconfiguration.
  */

void LTDC_LayerPixelFormat(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t PixelFormat)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]

  uint8_t temp;
  uint32_t tempreg;
  
  tempreg = LTDC_Layerx->PFCR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	60bb      	str	r3, [r7, #8]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d102      	bne.n	8001d84 <LTDC_LayerPixelFormat+0x1c>
  {
    temp = 4;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	73fb      	strb	r3, [r7, #15]
 8001d82:	e016      	b.n	8001db2 <LTDC_LayerPixelFormat+0x4a>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d102      	bne.n	8001d90 <LTDC_LayerPixelFormat+0x28>
  {
    temp = 3;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	e010      	b.n	8001db2 <LTDC_LayerPixelFormat+0x4a>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d008      	beq.n	8001da8 <LTDC_LayerPixelFormat+0x40>
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d005      	beq.n	8001da8 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d002      	beq.n	8001da8 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b07      	cmp	r3, #7
 8001da6:	d102      	bne.n	8001dae <LTDC_LayerPixelFormat+0x46>
          (tempreg == LTDC_Pixelformat_AL88))  
  {
    temp = 2;  
 8001da8:	2302      	movs	r3, #2
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e001      	b.n	8001db2 <LTDC_LayerPixelFormat+0x4a>
  }
  else
  {
    temp = 1;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
  }
  
  tempreg = (LTDC_Layerx->CFBLR >> 16);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	0c1b      	lsrs	r3, r3, #16
 8001db8:	60bb      	str	r3, [r7, #8]
  tempreg = (tempreg / temp); 
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	60bb      	str	r3, [r7, #8]
  
  if (PixelFormat == LTDC_Pixelformat_ARGB8888)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <LTDC_LayerPixelFormat+0x68>
  {
    temp = 4;
 8001dca:	2304      	movs	r3, #4
 8001dcc:	73fb      	strb	r3, [r7, #15]
 8001dce:	e016      	b.n	8001dfe <LTDC_LayerPixelFormat+0x96>
  }
  else if (PixelFormat == LTDC_Pixelformat_RGB888)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d102      	bne.n	8001ddc <LTDC_LayerPixelFormat+0x74>
  {
    temp = 3;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	e010      	b.n	8001dfe <LTDC_LayerPixelFormat+0x96>
  }
  else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d008      	beq.n	8001df4 <LTDC_LayerPixelFormat+0x8c>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d005      	beq.n	8001df4 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_RGB565)    || \
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d002      	beq.n	8001df4 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_ARGB1555)  || \
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b07      	cmp	r3, #7
 8001df2:	d102      	bne.n	8001dfa <LTDC_LayerPixelFormat+0x92>
          (PixelFormat == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8001df4:	2302      	movs	r3, #2
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e001      	b.n	8001dfe <LTDC_LayerPixelFormat+0x96>
  }
  else
  {
    temp = 1;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((tempreg * temp) << 16) | ((tempreg * temp) + 3);  
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	041a      	lsls	r2, r3, #16
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	fb01 f303 	mul.w	r3, r1, r3
 8001e10:	3303      	adds	r3, #3
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->PFCR = PixelFormat;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	611a      	str	r2, [r3, #16]
    
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8001e38:	4908      	ldr	r1, [pc, #32]	; (8001e5c <RCC_PLLSAIConfig+0x30>)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	019a      	lsls	r2, r3, #6
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	061b      	lsls	r3, r3, #24
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	071b      	lsls	r3, r3, #28
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800

08001e60 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <RCC_PLLSAICmd+0x1c>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	6013      	str	r3, [r2, #0]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	42470070 	.word	0x42470070

08001e80 <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <RCC_LTDCCLKDivConfig+0x38>)
 8001e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8001ea4:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <RCC_LTDCCLKDivConfig+0x38>)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	40023800 	.word	0x40023800

08001ebc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d006      	beq.n	8001edc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001ece:	490a      	ldr	r1, [pc, #40]	; (8001ef8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001eda:	e006      	b.n	8001eea <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001edc:	4906      	ldr	r1, [pc, #24]	; (8001ef8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800

08001efc <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001f0e:	490a      	ldr	r1, [pc, #40]	; (8001f38 <RCC_AHB3PeriphClockCmd+0x3c>)
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <RCC_AHB3PeriphClockCmd+0x3c>)
 8001f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	638b      	str	r3, [r1, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
 8001f1a:	e006      	b.n	8001f2a <RCC_AHB3PeriphClockCmd+0x2e>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001f1c:	4906      	ldr	r1, [pc, #24]	; (8001f38 <RCC_AHB3PeriphClockCmd+0x3c>)
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <RCC_AHB3PeriphClockCmd+0x3c>)
 8001f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	4013      	ands	r3, r2
 8001f28:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800

08001f3c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001f4e:	490a      	ldr	r1, [pc, #40]	; (8001f78 <RCC_APB1PeriphClockCmd+0x3c>)
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <RCC_APB1PeriphClockCmd+0x3c>)
 8001f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001f5a:	e006      	b.n	8001f6a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001f5c:	4906      	ldr	r1, [pc, #24]	; (8001f78 <RCC_APB1PeriphClockCmd+0x3c>)
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <RCC_APB1PeriphClockCmd+0x3c>)
 8001f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4013      	ands	r3, r2
 8001f68:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800

08001f7c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001f8e:	490a      	ldr	r1, [pc, #40]	; (8001fb8 <RCC_APB2PeriphClockCmd+0x3c>)
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <RCC_APB2PeriphClockCmd+0x3c>)
 8001f92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001f9a:	e006      	b.n	8001faa <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001f9c:	4906      	ldr	r1, [pc, #24]	; (8001fb8 <RCC_APB2PeriphClockCmd+0x3c>)
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <RCC_APB2PeriphClockCmd+0x3c>)
 8001fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	644b      	str	r3, [r1, #68]	; 0x44
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800

08001fbc <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001fce:	490a      	ldr	r1, [pc, #40]	; (8001ff8 <RCC_APB1PeriphResetCmd+0x3c>)
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <RCC_APB1PeriphResetCmd+0x3c>)
 8001fd2:	6a1a      	ldr	r2, [r3, #32]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001fda:	e006      	b.n	8001fea <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001fdc:	4906      	ldr	r1, [pc, #24]	; (8001ff8 <RCC_APB1PeriphResetCmd+0x3c>)
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <RCC_APB1PeriphResetCmd+0x3c>)
 8001fe0:	6a1a      	ldr	r2, [r3, #32]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	620b      	str	r3, [r1, #32]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800

08001ffc <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d006      	beq.n	800201c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800200e:	490a      	ldr	r1, [pc, #40]	; (8002038 <RCC_APB2PeriphResetCmd+0x3c>)
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <RCC_APB2PeriphResetCmd+0x3c>)
 8002012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4313      	orrs	r3, r2
 8002018:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 800201a:	e006      	b.n	800202a <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800201c:	4906      	ldr	r1, [pc, #24]	; (8002038 <RCC_APB2PeriphResetCmd+0x3c>)
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <RCC_APB2PeriphResetCmd+0x3c>)
 8002020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	43db      	mvns	r3, r3
 8002026:	4013      	ands	r3, r2
 8002028:	624b      	str	r3, [r1, #36]	; 0x24
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800

0800203c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	095b      	lsrs	r3, r3, #5
 8002056:	b2db      	uxtb	r3, r3
 8002058:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d103      	bne.n	8002068 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <RCC_GetFlagStatus+0x70>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	e009      	b.n	800207c <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d103      	bne.n	8002076 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <RCC_GetFlagStatus+0x70>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e002      	b.n	800207c <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8002076:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <RCC_GetFlagStatus+0x70>)
 8002078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8002094:	2301      	movs	r3, #1
 8002096:	74fb      	strb	r3, [r7, #19]
 8002098:	e001      	b.n	800209e <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 800209a:	2300      	movs	r3, #0
 800209c:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800209e:	7cfb      	ldrb	r3, [r7, #19]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40023800 	.word	0x40023800

080020b0 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a2e      	ldr	r2, [pc, #184]	; (8002174 <SPI_I2S_DeInit+0xc4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d10a      	bne.n	80020d6 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80020c0:	2101      	movs	r1, #1
 80020c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020c6:	f7ff ff99 	bl	8001ffc <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80020ca:	2100      	movs	r1, #0
 80020cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020d0:	f7ff ff94 	bl	8001ffc <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 80020d4:	e049      	b.n	800216a <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a27      	ldr	r2, [pc, #156]	; (8002178 <SPI_I2S_DeInit+0xc8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d10a      	bne.n	80020f4 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80020de:	2101      	movs	r1, #1
 80020e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020e4:	f7ff ff6a 	bl	8001fbc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80020e8:	2100      	movs	r1, #0
 80020ea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020ee:	f7ff ff65 	bl	8001fbc <RCC_APB1PeriphResetCmd>
}
 80020f2:	e03a      	b.n	800216a <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI3)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a21      	ldr	r2, [pc, #132]	; (800217c <SPI_I2S_DeInit+0xcc>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d10a      	bne.n	8002112 <SPI_I2S_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80020fc:	2101      	movs	r1, #1
 80020fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002102:	f7ff ff5b 	bl	8001fbc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8002106:	2100      	movs	r1, #0
 8002108:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800210c:	f7ff ff56 	bl	8001fbc <RCC_APB1PeriphResetCmd>
}
 8002110:	e02b      	b.n	800216a <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI4)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a1a      	ldr	r2, [pc, #104]	; (8002180 <SPI_I2S_DeInit+0xd0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d10a      	bne.n	8002130 <SPI_I2S_DeInit+0x80>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 800211a:	2101      	movs	r1, #1
 800211c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002120:	f7ff ff6c 	bl	8001ffc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8002124:	2100      	movs	r1, #0
 8002126:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800212a:	f7ff ff67 	bl	8001ffc <RCC_APB2PeriphResetCmd>
}
 800212e:	e01c      	b.n	800216a <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI5)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a14      	ldr	r2, [pc, #80]	; (8002184 <SPI_I2S_DeInit+0xd4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d10a      	bne.n	800214e <SPI_I2S_DeInit+0x9e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8002138:	2101      	movs	r1, #1
 800213a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800213e:	f7ff ff5d 	bl	8001ffc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8002142:	2100      	movs	r1, #0
 8002144:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002148:	f7ff ff58 	bl	8001ffc <RCC_APB2PeriphResetCmd>
}
 800214c:	e00d      	b.n	800216a <SPI_I2S_DeInit+0xba>
    if (SPIx == SPI6)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <SPI_I2S_DeInit+0xd8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d109      	bne.n	800216a <SPI_I2S_DeInit+0xba>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8002156:	2101      	movs	r1, #1
 8002158:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800215c:	f7ff ff4e 	bl	8001ffc <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8002160:	2100      	movs	r1, #0
 8002162:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002166:	f7ff ff49 	bl	8001ffc <RCC_APB2PeriphResetCmd>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40013000 	.word	0x40013000
 8002178:	40003800 	.word	0x40003800
 800217c:	40003c00 	.word	0x40003c00
 8002180:	40013400 	.word	0x40013400
 8002184:	40015000 	.word	0x40015000
 8002188:	40015400 	.word	0x40015400

0800218c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80021a0:	89fb      	ldrh	r3, [r7, #14]
 80021a2:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80021a6:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	881a      	ldrh	r2, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	885b      	ldrh	r3, [r3, #2]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80021c8:	4313      	orrs	r3, r2
 80021ca:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80021d8:	4313      	orrs	r3, r2
 80021da:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80021e0:	4313      	orrs	r3, r2
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	89fb      	ldrh	r3, [r7, #14]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	89fa      	ldrh	r2, [r7, #14]
 80021ee:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	8b9b      	ldrh	r3, [r3, #28]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	8a1a      	ldrh	r2, [r3, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	821a      	strh	r2, [r3, #16]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002230:	b29a      	uxth	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8002236:	e007      	b.n	8002248 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002242:	b29a      	uxth	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	801a      	strh	r2, [r3, #0]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	887a      	ldrh	r2, [r7, #2]
 8002264:	819a      	strh	r2, [r3, #12]
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002272:	b480      	push	{r7}
 8002274:	b085      	sub	sp, #20
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	891b      	ldrh	r3, [r3, #8]
 8002286:	b29a      	uxth	r2, r3
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	4013      	ands	r3, r2
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
 8002296:	e001      	b.n	800229c <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800229c:	7bfb      	ldrb	r3, [r7, #15]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80022ac:	b490      	push	{r4, r7}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	460a      	mov	r2, r1
 80022b6:	71fb      	strb	r3, [r7, #7]
 80022b8:	4613      	mov	r3, r2
 80022ba:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80022c0:	79bb      	ldrb	r3, [r7, #6]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	220f      	movs	r2, #15
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80022d0:	4916      	ldr	r1, [pc, #88]	; (800232c <SYSCFG_EXTILineConfig+0x80>)
 80022d2:	79bb      	ldrb	r3, [r7, #6]
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	4618      	mov	r0, r3
 80022da:	4a14      	ldr	r2, [pc, #80]	; (800232c <SYSCFG_EXTILineConfig+0x80>)
 80022dc:	79bb      	ldrb	r3, [r7, #6]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	3302      	adds	r3, #2
 80022e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	401a      	ands	r2, r3
 80022ee:	1c83      	adds	r3, r0, #2
 80022f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80022f4:	480d      	ldr	r0, [pc, #52]	; (800232c <SYSCFG_EXTILineConfig+0x80>)
 80022f6:	79bb      	ldrb	r3, [r7, #6]
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461c      	mov	r4, r3
 80022fe:	4a0b      	ldr	r2, [pc, #44]	; (800232c <SYSCFG_EXTILineConfig+0x80>)
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3302      	adds	r3, #2
 8002308:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800230c:	79f9      	ldrb	r1, [r7, #7]
 800230e:	79bb      	ldrb	r3, [r7, #6]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	431a      	orrs	r2, r3
 800231c:	1ca3      	adds	r3, r4, #2
 800231e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bc90      	pop	{r4, r7}
 800232a:	4770      	bx	lr
 800232c:	40013800 	.word	0x40013800

08002330 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a29      	ldr	r2, [pc, #164]	; (80023ec <TIM_TimeBaseInit+0xbc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d013      	beq.n	8002374 <TIM_TimeBaseInit+0x44>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a28      	ldr	r2, [pc, #160]	; (80023f0 <TIM_TimeBaseInit+0xc0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00f      	beq.n	8002374 <TIM_TimeBaseInit+0x44>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235a:	d00b      	beq.n	8002374 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a25      	ldr	r2, [pc, #148]	; (80023f4 <TIM_TimeBaseInit+0xc4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d007      	beq.n	8002374 <TIM_TimeBaseInit+0x44>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a24      	ldr	r2, [pc, #144]	; (80023f8 <TIM_TimeBaseInit+0xc8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d003      	beq.n	8002374 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a23      	ldr	r2, [pc, #140]	; (80023fc <TIM_TimeBaseInit+0xcc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d108      	bne.n	8002386 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002374:	89fb      	ldrh	r3, [r7, #14]
 8002376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	885a      	ldrh	r2, [r3, #2]
 8002380:	89fb      	ldrh	r3, [r7, #14]
 8002382:	4313      	orrs	r3, r2
 8002384:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <TIM_TimeBaseInit+0xd0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00c      	beq.n	80023a8 <TIM_TimeBaseInit+0x78>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <TIM_TimeBaseInit+0xd4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d008      	beq.n	80023a8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002396:	89fb      	ldrh	r3, [r7, #14]
 8002398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800239c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	891a      	ldrh	r2, [r3, #8]
 80023a2:	89fb      	ldrh	r3, [r7, #14]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	89fa      	ldrh	r2, [r7, #14]
 80023ac:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	881a      	ldrh	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <TIM_TimeBaseInit+0xbc>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d003      	beq.n	80023ce <TIM_TimeBaseInit+0x9e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <TIM_TimeBaseInit+0xc0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d104      	bne.n	80023d8 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	7a9b      	ldrb	r3, [r3, #10]
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	829a      	strh	r2, [r3, #20]
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40010400 	.word	0x40010400
 80023f4:	40000400 	.word	0x40000400
 80023f8:	40000800 	.word	0x40000800
 80023fc:	40000c00 	.word	0x40000c00
 8002400:	40001000 	.word	0x40001000
 8002404:	40001400 	.word	0x40001400

08002408 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8002442:	e007      	b.n	8002454 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b29b      	uxth	r3, r3
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	801a      	strh	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
 800246c:	4613      	mov	r3, r2
 800246e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002470:	787b      	ldrb	r3, [r7, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	899b      	ldrh	r3, [r3, #12]
 800247a:	b29a      	uxth	r2, r3
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	4313      	orrs	r3, r2
 8002480:	b29a      	uxth	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8002486:	e009      	b.n	800249c <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	899b      	ldrh	r3, [r3, #12]
 800248c:	b29a      	uxth	r2, r3
 800248e:	887b      	ldrh	r3, [r7, #2]
 8002490:	43db      	mvns	r3, r3
 8002492:	b29b      	uxth	r3, r3
 8002494:	4013      	ands	r3, r2
 8002496:	b29a      	uxth	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	819a      	strh	r2, [r3, #12]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	81bb      	strh	r3, [r7, #12]
 80024bc:	2300      	movs	r3, #0
 80024be:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	8a1b      	ldrh	r3, [r3, #16]
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	887b      	ldrh	r3, [r7, #2]
 80024c8:	4013      	ands	r3, r2
 80024ca:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	899b      	ldrh	r3, [r3, #12]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	4013      	ands	r3, r2
 80024d6:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80024d8:	89bb      	ldrh	r3, [r7, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <TIM_GetITStatus+0x42>
 80024de:	897b      	ldrh	r3, [r7, #10]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	e001      	b.n	80024ee <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002508:	887b      	ldrh	r3, [r7, #2]
 800250a:	43db      	mvns	r3, r3
 800250c:	b29a      	uxth	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	821a      	strh	r2, [r3, #16]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	4a10      	ldr	r2, [pc, #64]	; (8002570 <STM_EVAL_LEDInit+0x50>)
 800252e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002532:	2101      	movs	r1, #1
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fcc1 	bl	8001ebc <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <STM_EVAL_LEDInit+0x54>)
 800253e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002542:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002544:	2301      	movs	r3, #1
 8002546:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002548:	2300      	movs	r3, #0
 800254a:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002550:	2302      	movs	r3, #2
 8002552:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	4a08      	ldr	r2, [pc, #32]	; (8002578 <STM_EVAL_LEDInit+0x58>)
 8002558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255c:	f107 0208 	add.w	r2, r7, #8
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff f8da 	bl	800171c <GPIO_Init>
}
 8002568:	bf00      	nop
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	080061bc 	.word	0x080061bc
 8002574:	080061b8 	.word	0x080061b8
 8002578:	20000008 	.word	0x20000008

0800257c <STM_EVAL_LEDOff>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <STM_EVAL_LEDOff+0x28>)
 800258a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258e:	79fa      	ldrb	r2, [r7, #7]
 8002590:	4905      	ldr	r1, [pc, #20]	; (80025a8 <STM_EVAL_LEDOff+0x2c>)
 8002592:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002596:	835a      	strh	r2, [r3, #26]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	20000008 	.word	0x20000008
 80025a8:	080061b8 	.word	0x080061b8

080025ac <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <STM_EVAL_LEDToggle+0x34>)
 80025ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025be:	79fa      	ldrb	r2, [r7, #7]
 80025c0:	4907      	ldr	r1, [pc, #28]	; (80025e0 <STM_EVAL_LEDToggle+0x34>)
 80025c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80025c6:	6952      	ldr	r2, [r2, #20]
 80025c8:	79f9      	ldrb	r1, [r7, #7]
 80025ca:	4806      	ldr	r0, [pc, #24]	; (80025e4 <STM_EVAL_LEDToggle+0x38>)
 80025cc:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 80025d0:	404a      	eors	r2, r1
 80025d2:	615a      	str	r2, [r3, #20]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	20000008 	.word	0x20000008
 80025e4:	080061b8 	.word	0x080061b8

080025e8 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF) != RESET)
 80025ec:	4916      	ldr	r1, [pc, #88]	; (8002648 <DMA1_Stream4_IRQHandler+0x60>)
 80025ee:	4817      	ldr	r0, [pc, #92]	; (800264c <DMA1_Stream4_IRQHandler+0x64>)
 80025f0:	f7fe fd86 	bl	8001100 <DMA_GetFlagStatus>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d024      	beq.n	8002644 <DMA1_Stream4_IRQHandler+0x5c>
  {  
    /* Disable the DMA Tx Stream and Clear TC flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 80025fa:	2100      	movs	r1, #0
 80025fc:	4813      	ldr	r0, [pc, #76]	; (800264c <DMA1_Stream4_IRQHandler+0x64>)
 80025fe:	f7fe fd63 	bl	80010c8 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);
 8002602:	4911      	ldr	r1, [pc, #68]	; (8002648 <DMA1_Stream4_IRQHandler+0x60>)
 8002604:	4811      	ldr	r0, [pc, #68]	; (800264c <DMA1_Stream4_IRQHandler+0x64>)
 8002606:	f7fe fdb7 	bl	8001178 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <DMA1_Stream4_IRQHandler+0x68>)
 800260c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8002610:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8002612:	e008      	b.n	8002626 <DMA1_Stream4_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <DMA1_Stream4_IRQHandler+0x68>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	1e5a      	subs	r2, r3, #1
 800261a:	490d      	ldr	r1, [pc, #52]	; (8002650 <DMA1_Stream4_IRQHandler+0x68>)
 800261c:	600a      	str	r2, [r1, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <DMA1_Stream4_IRQHandler+0x3e>
 8002622:	f001 fc35 	bl	8003e90 <sEE_TIMEOUT_UserCallback>
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8002626:	490b      	ldr	r1, [pc, #44]	; (8002654 <DMA1_Stream4_IRQHandler+0x6c>)
 8002628:	480b      	ldr	r0, [pc, #44]	; (8002658 <DMA1_Stream4_IRQHandler+0x70>)
 800262a:	f7ff f9d0 	bl	80019ce <I2C_GetFlagStatus>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ef      	beq.n	8002614 <DMA1_Stream4_IRQHandler+0x2c>
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 8002634:	2101      	movs	r1, #1
 8002636:	4808      	ldr	r0, [pc, #32]	; (8002658 <DMA1_Stream4_IRQHandler+0x70>)
 8002638:	f7ff f9a9 	bl	800198e <I2C_GenerateSTOP>
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 800263c:	4b07      	ldr	r3, [pc, #28]	; (800265c <DMA1_Stream4_IRQHandler+0x74>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
  }
}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000020 	.word	0x20000020
 800264c:	40026070 	.word	0x40026070
 8002650:	20000010 	.word	0x20000010
 8002654:	10000004 	.word	0x10000004
 8002658:	40005c00 	.word	0x40005c00
 800265c:	200000dc 	.word	0x200000dc

08002660 <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 8002664:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8002668:	480c      	ldr	r0, [pc, #48]	; (800269c <DMA1_Stream2_IRQHandler+0x3c>)
 800266a:	f7fe fd49 	bl	8001100 <DMA_GetFlagStatus>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d010      	beq.n	8002696 <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 8002674:	2101      	movs	r1, #1
 8002676:	480a      	ldr	r0, [pc, #40]	; (80026a0 <DMA1_Stream2_IRQHandler+0x40>)
 8002678:	f7ff f989 	bl	800198e <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 800267c:	2100      	movs	r1, #0
 800267e:	4807      	ldr	r0, [pc, #28]	; (800269c <DMA1_Stream2_IRQHandler+0x3c>)
 8002680:	f7fe fd22 	bl	80010c8 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 8002684:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8002688:	4804      	ldr	r0, [pc, #16]	; (800269c <DMA1_Stream2_IRQHandler+0x3c>)
 800268a:	f7fe fd75 	bl	8001178 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <DMA1_Stream2_IRQHandler+0x44>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2200      	movs	r2, #0
 8002694:	801a      	strh	r2, [r3, #0]
  }
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40026040 	.word	0x40026040
 80026a0:	40005c00 	.word	0x40005c00
 80026a4:	200000e4 	.word	0x200000e4

080026a8 <LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_Init(void)
{ 
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b092      	sub	sp, #72	; 0x48
 80026ac:	af00      	add	r7, sp, #0
  LTDC_InitTypeDef       LTDC_InitStruct;
  GPIO_InitTypeDef       GPIO_InitStructure;
  
  /* Enable clock for NCS port */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80026ae:	2101      	movs	r1, #1
 80026b0:	2008      	movs	r0, #8
 80026b2:	f7ff fc03 	bl	8001ebc <RCC_AHB1PeriphClockCmd>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80026b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80026bc:	2302      	movs	r3, #2
 80026be:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80026c0:	2301      	movs	r3, #1
 80026c2:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80026c4:	2300      	movs	r3, #0
 80026c6:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	4619      	mov	r1, r3
 80026d0:	482d      	ldr	r0, [pc, #180]	; (8002788 <LCD_Init+0xe0>)
 80026d2:	f7ff f823 	bl	800171c <GPIO_Init>
  
  /* Configure the LCD Control pins ------------------------------------------*/
  LCD_CtrlLinesConfig();
 80026d6:	f000 fa79 	bl	8002bcc <LCD_CtrlLinesConfig>
  LCD_ChipSelect(DISABLE);
 80026da:	2000      	movs	r0, #0
 80026dc:	f000 f8b2 	bl	8002844 <LCD_ChipSelect>
  LCD_ChipSelect(ENABLE);
 80026e0:	2001      	movs	r0, #1
 80026e2:	f000 f8af 	bl	8002844 <LCD_ChipSelect>
  
  /* Configure the LCD_SPI interface -----------------------------------------*/
  LCD_SPIConfig(); 
 80026e6:	f000 faa5 	bl	8002c34 <LCD_SPIConfig>
  
  /* Power on the LCD --------------------------------------------------------*/
  LCD_PowerOn();
 80026ea:	f000 f927 	bl	800293c <LCD_PowerOn>
  
  /* Enable the LTDC Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 80026ee:	2101      	movs	r1, #1
 80026f0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80026f4:	f7ff fc42 	bl	8001f7c <RCC_APB2PeriphClockCmd>
  
  /* Enable the DMA2D Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 80026f8:	2101      	movs	r1, #1
 80026fa:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80026fe:	f7ff fbdd 	bl	8001ebc <RCC_AHB1PeriphClockCmd>
  
  /* Configure the LCD Control pins */
  LCD_AF_GPIOConfig();  
 8002702:	f000 fafb 	bl	8002cfc <LCD_AF_GPIOConfig>
  
  /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
  SDRAM_Init();
 8002706:	f000 fbca 	bl	8002e9e <SDRAM_Init>
  
  /* LTDC Configuration *********************************************************/  
  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
  /* Initialize the vertical synchronization polarity as active low */  
  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
  /* Initialize the data enable polarity as active low */
  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  /* Initialize the pixel clock polarity as input pixel clock */ 
  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 8002716:	2300      	movs	r3, #0
 8002718:	61bb      	str	r3, [r7, #24]
  
  /* Configure R,G,B component values for LCD background color */                   
  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 800271a:	2300      	movs	r3, #0
 800271c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 800271e:	2300      	movs	r3, #0
 8002720:	643b      	str	r3, [r7, #64]	; 0x40
  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;  
 8002722:	2300      	movs	r3, #0
 8002724:	647b      	str	r3, [r7, #68]	; 0x44
  /* Enable Pixel Clock */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 48/8 = 6 Mhz */
  RCC_PLLSAIConfig(192, 7, 4);
 8002726:	2204      	movs	r2, #4
 8002728:	2107      	movs	r1, #7
 800272a:	20c0      	movs	r0, #192	; 0xc0
 800272c:	f7ff fb7e 	bl	8001e2c <RCC_PLLSAIConfig>
  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 8002730:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002734:	f7ff fba4 	bl	8001e80 <RCC_LTDCCLKDivConfig>
  
  /* Enable PLLSAI Clock */
  RCC_PLLSAICmd(ENABLE);
 8002738:	2001      	movs	r0, #1
 800273a:	f7ff fb91 	bl	8001e60 <RCC_PLLSAICmd>
  /* Wait for PLLSAI activation */
  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 800273e:	bf00      	nop
 8002740:	203d      	movs	r0, #61	; 0x3d
 8002742:	f7ff fc7b 	bl	800203c <RCC_GetFlagStatus>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f9      	beq.n	8002740 <LCD_Init+0x98>
  {
  }
  
  /* Timing configuration */  
  /* Configure horizontal synchronization width */     
  LTDC_InitStruct.LTDC_HorizontalSync = 9;
 800274c:	2309      	movs	r3, #9
 800274e:	61fb      	str	r3, [r7, #28]
  /* Configure vertical synchronization height */
  LTDC_InitStruct.LTDC_VerticalSync = 1;
 8002750:	2301      	movs	r3, #1
 8002752:	623b      	str	r3, [r7, #32]
  /* Configure accumulated horizontal back porch */
  LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 8002754:	231d      	movs	r3, #29
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure accumulated vertical back porch */
  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 8002758:	2303      	movs	r3, #3
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure accumulated active width */  
  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 800275c:	f240 130d 	movw	r3, #269	; 0x10d
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure accumulated active height */
  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 8002762:	f240 1343 	movw	r3, #323	; 0x143
 8002766:	633b      	str	r3, [r7, #48]	; 0x30
  /* Configure total width */
  LTDC_InitStruct.LTDC_TotalWidth = 279; 
 8002768:	f240 1317 	movw	r3, #279	; 0x117
 800276c:	637b      	str	r3, [r7, #52]	; 0x34
  /* Configure total height */
  LTDC_InitStruct.LTDC_TotalHeigh = 327;
 800276e:	f240 1347 	movw	r3, #327	; 0x147
 8002772:	63bb      	str	r3, [r7, #56]	; 0x38
  
  LTDC_Init(&LTDC_InitStruct);
 8002774:	f107 030c 	add.w	r3, r7, #12
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff f95b 	bl	8001a34 <LTDC_Init>
}  
 800277e:	bf00      	nop
 8002780:	3748      	adds	r7, #72	; 0x48
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40020c00 	.word	0x40020c00

0800278c <LCD_LayerInit>:
  * @brief  Initializes the LCD Layers.
  * @param  None
  * @retval None
  */
void LCD_LayerInit(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b090      	sub	sp, #64	; 0x40
 8002790:	af00      	add	r7, sp, #0
  /* In this case all the active display area is used to display a picture then :
  Horizontal start = horizontal synchronization + Horizontal back porch = 30 
  Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
  Vertical start   = vertical synchronization + vertical back porch     = 4
  Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */      
  LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 8002792:	231e      	movs	r3, #30
 8002794:	603b      	str	r3, [r7, #0]
  LTDC_Layer_InitStruct.LTDC_HorizontalStop = (LCD_PIXEL_WIDTH + 30 - 1); 
 8002796:	f240 130d 	movw	r3, #269	; 0x10d
 800279a:	607b      	str	r3, [r7, #4]
  LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 800279c:	2304      	movs	r3, #4
 800279e:	60bb      	str	r3, [r7, #8]
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (LCD_PIXEL_HEIGHT + 4 - 1);
 80027a0:	f240 1343 	movw	r3, #323	; 0x143
 80027a4:	60fb      	str	r3, [r7, #12]
  
  /* Pixel Format configuration*/
  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 80027a6:	2302      	movs	r3, #2
 80027a8:	613b      	str	r3, [r7, #16]
  /* Alpha constant (255 totally opaque) */
  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 80027aa:	23ff      	movs	r3, #255	; 0xff
 80027ac:	617b      	str	r3, [r7, #20]
  /* Default Color configuration (configure A,R,G,B component values) */          
  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 80027be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;
 80027c4:	2305      	movs	r3, #5
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the length of one line of pixels in bytes + 3 then :
  Line Lenth = Active high width x number of bytes per pixel + 3 
  Active high width         = LCD_PIXEL_WIDTH 
  number of bytes per pixel = 2    (pixel_format : RGB565) 
  */
  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((LCD_PIXEL_WIDTH * 2) + 3);
 80027c8:	f240 13e3 	movw	r3, #483	; 0x1e3
 80027cc:	637b      	str	r3, [r7, #52]	; 0x34
  /* the pitch is the increment from the start of one line of pixels to the 
  start of the next line in bytes, then :
  Pitch = Active high width x number of bytes per pixel */ 
  LTDC_Layer_InitStruct.LTDC_CFBPitch = (LCD_PIXEL_WIDTH * 2);
 80027ce:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80027d2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Configure the number of lines */  
  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = LCD_PIXEL_HEIGHT;
 80027d4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80027d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM */    
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER;
 80027da:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80027de:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize LTDC layer 1 */
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 80027e0:	463b      	mov	r3, r7
 80027e2:	4619      	mov	r1, r3
 80027e4:	4813      	ldr	r0, [pc, #76]	; (8002834 <LCD_LayerInit+0xa8>)
 80027e6:	f7ff fa09 	bl	8001bfc <LTDC_LayerInit>
  
  /* Configure Layer2 */
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */     
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 80027ea:	4b13      	ldr	r3, [pc, #76]	; (8002838 <LCD_LayerInit+0xac>)
 80027ec:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;    
 80027ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 80027f4:	2307      	movs	r3, #7
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize LTDC layer 2 */
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 80027f8:	463b      	mov	r3, r7
 80027fa:	4619      	mov	r1, r3
 80027fc:	480f      	ldr	r0, [pc, #60]	; (800283c <LCD_LayerInit+0xb0>)
 80027fe:	f7ff f9fd 	bl	8001bfc <LTDC_LayerInit>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 8002802:	2001      	movs	r0, #1
 8002804:	f7ff f9ea 	bl	8001bdc <LTDC_ReloadConfig>
  
  /* Enable foreground & background Layers */
  LTDC_LayerCmd(LTDC_Layer1, ENABLE); 
 8002808:	2101      	movs	r1, #1
 800280a:	480a      	ldr	r0, [pc, #40]	; (8002834 <LCD_LayerInit+0xa8>)
 800280c:	f7ff fa90 	bl	8001d30 <LTDC_LayerCmd>
  LTDC_LayerCmd(LTDC_Layer2, ENABLE);
 8002810:	2101      	movs	r1, #1
 8002812:	480a      	ldr	r0, [pc, #40]	; (800283c <LCD_LayerInit+0xb0>)
 8002814:	f7ff fa8c 	bl	8001d30 <LTDC_LayerCmd>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 8002818:	2001      	movs	r0, #1
 800281a:	f7ff f9df 	bl	8001bdc <LTDC_ReloadConfig>
  
  /* Set default font */    
  LCD_SetFont(&LCD_DEFAULT_FONT); 
 800281e:	4808      	ldr	r0, [pc, #32]	; (8002840 <LCD_LayerInit+0xb4>)
 8002820:	f000 f828 	bl	8002874 <LCD_SetFont>
  
  /* dithering activation */
  LTDC_DitherCmd(ENABLE);
 8002824:	2001      	movs	r0, #1
 8002826:	f7ff f9bb 	bl	8001ba0 <LTDC_DitherCmd>
}
 800282a:	bf00      	nop
 800282c:	3740      	adds	r7, #64	; 0x40
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40016884 	.word	0x40016884
 8002838:	d0050000 	.word	0xd0050000
 800283c:	40016904 	.word	0x40016904
 8002840:	20000000 	.word	0x20000000

08002844 <LCD_ChipSelect>:
  * @brief  Enable or Disable the LCD through CS pin
  * @param  NewState CS pin state
  * @retval None
  */
void LCD_ChipSelect(FunctionalState NewState)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
  if (NewState == DISABLE)
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d104      	bne.n	800285e <LCD_ChipSelect+0x1a>
  {
    GPIO_ResetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin low: LCD disabled */
 8002854:	2104      	movs	r1, #4
 8002856:	4806      	ldr	r0, [pc, #24]	; (8002870 <LCD_ChipSelect+0x2c>)
 8002858:	f7ff f817 	bl	800188a <GPIO_ResetBits>
  }
  else
  {
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
  }
}
 800285c:	e003      	b.n	8002866 <LCD_ChipSelect+0x22>
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
 800285e:	2104      	movs	r1, #4
 8002860:	4803      	ldr	r0, [pc, #12]	; (8002870 <LCD_ChipSelect+0x2c>)
 8002862:	f7ff f803 	bl	800186c <GPIO_SetBits>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40020800 	.word	0x40020800

08002874 <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <LCD_SetFont+0x1c>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6013      	str	r3, [r2, #0]
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000090 	.word	0x20000090

08002894 <LCD_WriteCommand>:
  * @brief  Writes command to select the LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void LCD_WriteCommand(uint8_t LCD_Reg)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
    /* Reset WRX to send command */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_RESET);
 800289e:	2200      	movs	r2, #0
 80028a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028a4:	480e      	ldr	r0, [pc, #56]	; (80028e0 <LCD_WriteCommand+0x4c>)
 80028a6:	f000 f9b3 	bl	8002c10 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_ChipSelect(DISABLE);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7ff ffca 	bl	8002844 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4619      	mov	r1, r3
 80028b6:	480b      	ldr	r0, [pc, #44]	; (80028e4 <LCD_WriteCommand+0x50>)
 80028b8:	f7ff fccc 	bl	8002254 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 80028bc:	bf00      	nop
 80028be:	2180      	movs	r1, #128	; 0x80
 80028c0:	4808      	ldr	r0, [pc, #32]	; (80028e4 <LCD_WriteCommand+0x50>)
 80028c2:	f7ff fcd6 	bl	8002272 <SPI_I2S_GetFlagStatus>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f8      	bne.n	80028be <LCD_WriteCommand+0x2a>
  delay(10);
 80028cc:	200a      	movs	r0, #10
 80028ce:	f000 fad1 	bl	8002e74 <delay>
  LCD_ChipSelect(ENABLE);
 80028d2:	2001      	movs	r0, #1
 80028d4:	f7ff ffb6 	bl	8002844 <LCD_ChipSelect>
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	40015000 	.word	0x40015000

080028e8 <LCD_WriteData>:
  *         This function must be used after LCD_WriteCommand() function
  * @param  value: data to write to the selected register.
  * @retval None
  */
void LCD_WriteData(uint8_t value)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
    /* Set WRX to send data */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_SET);
 80028f2:	2201      	movs	r2, #1
 80028f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028f8:	480e      	ldr	r0, [pc, #56]	; (8002934 <LCD_WriteData+0x4c>)
 80028fa:	f000 f989 	bl	8002c10 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_ChipSelect(DISABLE);
 80028fe:	2000      	movs	r0, #0
 8002900:	f7ff ffa0 	bl	8002844 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, value);
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	b29b      	uxth	r3, r3
 8002908:	4619      	mov	r1, r3
 800290a:	480b      	ldr	r0, [pc, #44]	; (8002938 <LCD_WriteData+0x50>)
 800290c:	f7ff fca2 	bl	8002254 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8002910:	bf00      	nop
 8002912:	2180      	movs	r1, #128	; 0x80
 8002914:	4808      	ldr	r0, [pc, #32]	; (8002938 <LCD_WriteData+0x50>)
 8002916:	f7ff fcac 	bl	8002272 <SPI_I2S_GetFlagStatus>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f8      	bne.n	8002912 <LCD_WriteData+0x2a>
  delay(10);
 8002920:	200a      	movs	r0, #10
 8002922:	f000 faa7 	bl	8002e74 <delay>
  LCD_ChipSelect(ENABLE);
 8002926:	2001      	movs	r0, #1
 8002928:	f7ff ff8c 	bl	8002844 <LCD_ChipSelect>
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40020c00 	.word	0x40020c00
 8002938:	40015000 	.word	0x40015000

0800293c <LCD_PowerOn>:

void LCD_PowerOn(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  LCD_WriteCommand(0xCA);
 8002940:	20ca      	movs	r0, #202	; 0xca
 8002942:	f7ff ffa7 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 8002946:	20c3      	movs	r0, #195	; 0xc3
 8002948:	f7ff ffce 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x08);
 800294c:	2008      	movs	r0, #8
 800294e:	f7ff ffcb 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x50);
 8002952:	2050      	movs	r0, #80	; 0x50
 8002954:	f7ff ffc8 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 8002958:	20cf      	movs	r0, #207	; 0xcf
 800295a:	f7ff ff9b 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 800295e:	2000      	movs	r0, #0
 8002960:	f7ff ffc2 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0xC1);
 8002964:	20c1      	movs	r0, #193	; 0xc1
 8002966:	f7ff ffbf 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x30);
 800296a:	2030      	movs	r0, #48	; 0x30
 800296c:	f7ff ffbc 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 8002970:	20ed      	movs	r0, #237	; 0xed
 8002972:	f7ff ff8f 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x64);
 8002976:	2064      	movs	r0, #100	; 0x64
 8002978:	f7ff ffb6 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x03);
 800297c:	2003      	movs	r0, #3
 800297e:	f7ff ffb3 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x12);
 8002982:	2012      	movs	r0, #18
 8002984:	f7ff ffb0 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x81);
 8002988:	2081      	movs	r0, #129	; 0x81
 800298a:	f7ff ffad 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 800298e:	20e8      	movs	r0, #232	; 0xe8
 8002990:	f7ff ff80 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x85);
 8002994:	2085      	movs	r0, #133	; 0x85
 8002996:	f7ff ffa7 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x00);
 800299a:	2000      	movs	r0, #0
 800299c:	f7ff ffa4 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x78);
 80029a0:	2078      	movs	r0, #120	; 0x78
 80029a2:	f7ff ffa1 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 80029a6:	20cb      	movs	r0, #203	; 0xcb
 80029a8:	f7ff ff74 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x39);
 80029ac:	2039      	movs	r0, #57	; 0x39
 80029ae:	f7ff ff9b 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x2C);
 80029b2:	202c      	movs	r0, #44	; 0x2c
 80029b4:	f7ff ff98 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x00);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7ff ff95 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x34);
 80029be:	2034      	movs	r0, #52	; 0x34
 80029c0:	f7ff ff92 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x02);
 80029c4:	2002      	movs	r0, #2
 80029c6:	f7ff ff8f 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 80029ca:	20f7      	movs	r0, #247	; 0xf7
 80029cc:	f7ff ff62 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x20);
 80029d0:	2020      	movs	r0, #32
 80029d2:	f7ff ff89 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 80029d6:	20ea      	movs	r0, #234	; 0xea
 80029d8:	f7ff ff5c 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80029dc:	2000      	movs	r0, #0
 80029de:	f7ff ff83 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x00);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7ff ff80 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 80029e8:	20b1      	movs	r0, #177	; 0xb1
 80029ea:	f7ff ff53 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f7ff ff7a 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x1B);
 80029f4:	201b      	movs	r0, #27
 80029f6:	f7ff ff77 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 80029fa:	20b6      	movs	r0, #182	; 0xb6
 80029fc:	f7ff ff4a 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8002a00:	200a      	movs	r0, #10
 8002a02:	f7ff ff71 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0xA2);
 8002a06:	20a2      	movs	r0, #162	; 0xa2
 8002a08:	f7ff ff6e 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 8002a0c:	20c0      	movs	r0, #192	; 0xc0
 8002a0e:	f7ff ff41 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 8002a12:	2010      	movs	r0, #16
 8002a14:	f7ff ff68 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 8002a18:	20c1      	movs	r0, #193	; 0xc1
 8002a1a:	f7ff ff3b 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 8002a1e:	2010      	movs	r0, #16
 8002a20:	f7ff ff62 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 8002a24:	20c5      	movs	r0, #197	; 0xc5
 8002a26:	f7ff ff35 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x45);
 8002a2a:	2045      	movs	r0, #69	; 0x45
 8002a2c:	f7ff ff5c 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x15);
 8002a30:	2015      	movs	r0, #21
 8002a32:	f7ff ff59 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 8002a36:	20c7      	movs	r0, #199	; 0xc7
 8002a38:	f7ff ff2c 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x90);
 8002a3c:	2090      	movs	r0, #144	; 0x90
 8002a3e:	f7ff ff53 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 8002a42:	2036      	movs	r0, #54	; 0x36
 8002a44:	f7ff ff26 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 8002a48:	20c8      	movs	r0, #200	; 0xc8
 8002a4a:	f7ff ff4d 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 8002a4e:	20f2      	movs	r0, #242	; 0xf2
 8002a50:	f7ff ff20 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7ff ff47 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 8002a5a:	20b0      	movs	r0, #176	; 0xb0
 8002a5c:	f7ff ff1a 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 8002a60:	20c2      	movs	r0, #194	; 0xc2
 8002a62:	f7ff ff41 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 8002a66:	20b6      	movs	r0, #182	; 0xb6
 8002a68:	f7ff ff14 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8002a6c:	200a      	movs	r0, #10
 8002a6e:	f7ff ff3b 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0xA7);
 8002a72:	20a7      	movs	r0, #167	; 0xa7
 8002a74:	f7ff ff38 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x27);
 8002a78:	2027      	movs	r0, #39	; 0x27
 8002a7a:	f7ff ff35 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x04);
 8002a7e:	2004      	movs	r0, #4
 8002a80:	f7ff ff32 	bl	80028e8 <LCD_WriteData>

  /* colomn address set */
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 8002a84:	202a      	movs	r0, #42	; 0x2a
 8002a86:	f7ff ff05 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7ff ff2c 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x00);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7ff ff29 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x00);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7ff ff26 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0xEF);
 8002a9c:	20ef      	movs	r0, #239	; 0xef
 8002a9e:	f7ff ff23 	bl	80028e8 <LCD_WriteData>
  /* Page Address Set */
  LCD_WriteCommand(LCD_PAGE_ADDR);
 8002aa2:	202b      	movs	r0, #43	; 0x2b
 8002aa4:	f7ff fef6 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7ff ff1d 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x00);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7ff ff1a 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x01);
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	f7ff ff17 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x3F);
 8002aba:	203f      	movs	r0, #63	; 0x3f
 8002abc:	f7ff ff14 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 8002ac0:	20f6      	movs	r0, #246	; 0xf6
 8002ac2:	f7ff fee7 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f7ff ff0e 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x00);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7ff ff0b 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x06);
 8002ad2:	2006      	movs	r0, #6
 8002ad4:	f7ff ff08 	bl	80028e8 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_GRAM);
 8002ad8:	202c      	movs	r0, #44	; 0x2c
 8002ada:	f7ff fedb 	bl	8002894 <LCD_WriteCommand>
  delay(200);
 8002ade:	20c8      	movs	r0, #200	; 0xc8
 8002ae0:	f000 f9c8 	bl	8002e74 <delay>
  
  LCD_WriteCommand(LCD_GAMMA);
 8002ae4:	2026      	movs	r0, #38	; 0x26
 8002ae6:	f7ff fed5 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8002aea:	2001      	movs	r0, #1
 8002aec:	f7ff fefc 	bl	80028e8 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_PGAMMA);
 8002af0:	20e0      	movs	r0, #224	; 0xe0
 8002af2:	f7ff fecf 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 8002af6:	200f      	movs	r0, #15
 8002af8:	f7ff fef6 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x29);
 8002afc:	2029      	movs	r0, #41	; 0x29
 8002afe:	f7ff fef3 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x24);
 8002b02:	2024      	movs	r0, #36	; 0x24
 8002b04:	f7ff fef0 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8002b08:	200c      	movs	r0, #12
 8002b0a:	f7ff feed 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x0E);
 8002b0e:	200e      	movs	r0, #14
 8002b10:	f7ff feea 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x09);
 8002b14:	2009      	movs	r0, #9
 8002b16:	f7ff fee7 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x4E);
 8002b1a:	204e      	movs	r0, #78	; 0x4e
 8002b1c:	f7ff fee4 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x78);
 8002b20:	2078      	movs	r0, #120	; 0x78
 8002b22:	f7ff fee1 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x3C);
 8002b26:	203c      	movs	r0, #60	; 0x3c
 8002b28:	f7ff fede 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x09);
 8002b2c:	2009      	movs	r0, #9
 8002b2e:	f7ff fedb 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x13);
 8002b32:	2013      	movs	r0, #19
 8002b34:	f7ff fed8 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x05);
 8002b38:	2005      	movs	r0, #5
 8002b3a:	f7ff fed5 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x17);
 8002b3e:	2017      	movs	r0, #23
 8002b40:	f7ff fed2 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x11);
 8002b44:	2011      	movs	r0, #17
 8002b46:	f7ff fecf 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x00);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7ff fecc 	bl	80028e8 <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 8002b50:	20e1      	movs	r0, #225	; 0xe1
 8002b52:	f7ff fe9f 	bl	8002894 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7ff fec6 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x16);
 8002b5c:	2016      	movs	r0, #22
 8002b5e:	f7ff fec3 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8002b62:	201b      	movs	r0, #27
 8002b64:	f7ff fec0 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x04);
 8002b68:	2004      	movs	r0, #4
 8002b6a:	f7ff febd 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x11);
 8002b6e:	2011      	movs	r0, #17
 8002b70:	f7ff feba 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x07);
 8002b74:	2007      	movs	r0, #7
 8002b76:	f7ff feb7 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x31);
 8002b7a:	2031      	movs	r0, #49	; 0x31
 8002b7c:	f7ff feb4 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x33);
 8002b80:	2033      	movs	r0, #51	; 0x33
 8002b82:	f7ff feb1 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x42);
 8002b86:	2042      	movs	r0, #66	; 0x42
 8002b88:	f7ff feae 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x05);
 8002b8c:	2005      	movs	r0, #5
 8002b8e:	f7ff feab 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8002b92:	200c      	movs	r0, #12
 8002b94:	f7ff fea8 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x0A);
 8002b98:	200a      	movs	r0, #10
 8002b9a:	f7ff fea5 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x28);
 8002b9e:	2028      	movs	r0, #40	; 0x28
 8002ba0:	f7ff fea2 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x2F);
 8002ba4:	202f      	movs	r0, #47	; 0x2f
 8002ba6:	f7ff fe9f 	bl	80028e8 <LCD_WriteData>
  LCD_WriteData(0x0F);
 8002baa:	200f      	movs	r0, #15
 8002bac:	f7ff fe9c 	bl	80028e8 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_SLEEP_OUT);
 8002bb0:	2011      	movs	r0, #17
 8002bb2:	f7ff fe6f 	bl	8002894 <LCD_WriteCommand>
  delay(200);
 8002bb6:	20c8      	movs	r0, #200	; 0xc8
 8002bb8:	f000 f95c 	bl	8002e74 <delay>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 8002bbc:	2029      	movs	r0, #41	; 0x29
 8002bbe:	f7ff fe69 	bl	8002894 <LCD_WriteCommand>
  /* GRAM start writing */
  LCD_WriteCommand(LCD_GRAM);
 8002bc2:	202c      	movs	r0, #44	; 0x2c
 8002bc4:	f7ff fe66 	bl	8002894 <LCD_WriteCommand>
 }
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <LCD_CtrlLinesConfig>:
  *         when VDDIO is lower than required LCD supply.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd(LCD_NCS_GPIO_CLK, ENABLE);
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	2004      	movs	r0, #4
 8002bd6:	f7ff f971 	bl	8001ebc <RCC_AHB1PeriphClockCmd>

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 8002bda:	2304      	movs	r3, #4
 8002bdc:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002bde:	2302      	movs	r3, #2
 8002be0:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002be2:	2301      	movs	r3, #1
 8002be4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002be6:	2300      	movs	r3, #0
 8002be8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002bee:	463b      	mov	r3, r7
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4806      	ldr	r0, [pc, #24]	; (8002c0c <LCD_CtrlLinesConfig+0x40>)
 8002bf4:	f7fe fd92 	bl	800171c <GPIO_Init>

  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	2104      	movs	r1, #4
 8002bfc:	4803      	ldr	r0, [pc, #12]	; (8002c0c <LCD_CtrlLinesConfig+0x40>)
 8002bfe:	f000 f807 	bl	8002c10 <LCD_CtrlLinesWrite>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40020800 	.word	0x40020800

08002c10 <LCD_CtrlLinesWrite>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, uint16_t CtrlPins, BitAction BitVal)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	707b      	strb	r3, [r7, #1]
  /* Set or Reset the control line */
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 8002c20:	787a      	ldrb	r2, [r7, #1]
 8002c22:	887b      	ldrh	r3, [r7, #2]
 8002c24:	4619      	mov	r1, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe fe3e 	bl	80018a8 <GPIO_WriteBit>
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <LCD_SPIConfig>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable LCD_SPI_SCK_GPIO_CLK, LCD_SPI_MISO_GPIO_CLK and LCD_SPI_MOSI_GPIO_CLK clock */
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	2020      	movs	r0, #32
 8002c3e:	f7ff f93d 	bl	8001ebc <RCC_AHB1PeriphClockCmd>

  /* Enable LCD_SPI and SYSCFG clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE);
 8002c42:	2101      	movs	r1, #1
 8002c44:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002c48:	f7ff f998 	bl	8001f7c <RCC_APB2PeriphClockCmd>
  
  /* Configure LCD_SPI SCK pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002c50:	2302      	movs	r3, #2
 8002c52:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002c54:	2302      	movs	r3, #2
 8002c56:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	4619      	mov	r1, r3
 8002c64:	4823      	ldr	r0, [pc, #140]	; (8002cf4 <LCD_SPIConfig+0xc0>)
 8002c66:	f7fe fd59 	bl	800171c <GPIO_Init>

  /* Configure LCD_SPI MISO pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8002c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c6e:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	4619      	mov	r1, r3
 8002c74:	481f      	ldr	r0, [pc, #124]	; (8002cf4 <LCD_SPIConfig+0xc0>)
 8002c76:	f7fe fd51 	bl	800171c <GPIO_Init>

  /* Configure LCD_SPI MOSI pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8002c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c7e:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	4619      	mov	r1, r3
 8002c84:	481b      	ldr	r0, [pc, #108]	; (8002cf4 <LCD_SPIConfig+0xc0>)
 8002c86:	f7fe fd49 	bl	800171c <GPIO_Init>

  /* Connect SPI SCK */
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 8002c8a:	2205      	movs	r2, #5
 8002c8c:	2107      	movs	r1, #7
 8002c8e:	4819      	ldr	r0, [pc, #100]	; (8002cf4 <LCD_SPIConfig+0xc0>)
 8002c90:	f7fe fe34 	bl	80018fc <GPIO_PinAFConfig>

  /* Connect SPI MISO */
  GPIO_PinAFConfig(LCD_SPI_MISO_GPIO_PORT, LCD_SPI_MISO_SOURCE, LCD_SPI_MISO_AF);
 8002c94:	2205      	movs	r2, #5
 8002c96:	2108      	movs	r1, #8
 8002c98:	4816      	ldr	r0, [pc, #88]	; (8002cf4 <LCD_SPIConfig+0xc0>)
 8002c9a:	f7fe fe2f 	bl	80018fc <GPIO_PinAFConfig>

  /* Connect SPI MOSI */
  GPIO_PinAFConfig(LCD_SPI_MOSI_GPIO_PORT, LCD_SPI_MOSI_SOURCE, LCD_SPI_MOSI_AF);
 8002c9e:	2205      	movs	r2, #5
 8002ca0:	2109      	movs	r1, #9
 8002ca2:	4814      	ldr	r0, [pc, #80]	; (8002cf4 <LCD_SPIConfig+0xc0>)
 8002ca4:	f7fe fe2a 	bl	80018fc <GPIO_PinAFConfig>
  
  SPI_I2S_DeInit(LCD_SPI);
 8002ca8:	4813      	ldr	r0, [pc, #76]	; (8002cf8 <LCD_SPIConfig+0xc4>)
 8002caa:	f7ff fa01 	bl	80020b0 <SPI_I2S_DeInit>
  
  /* SPI Config */
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex; //SPI_Direction_1Line_Tx;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8002cb2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002cb6:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	82bb      	strh	r3, [r7, #20]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8002cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cc8:	82fb      	strh	r3, [r7, #22]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; 
 8002cca:	2308      	movs	r3, #8
 8002ccc:	833b      	strh	r3, [r7, #24]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	837b      	strh	r3, [r7, #26]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8002cd2:	2307      	movs	r3, #7
 8002cd4:	83bb      	strh	r3, [r7, #28]
  SPI_Init(LCD_SPI, &SPI_InitStructure);
 8002cd6:	f107 030c 	add.w	r3, r7, #12
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4806      	ldr	r0, [pc, #24]	; (8002cf8 <LCD_SPIConfig+0xc4>)
 8002cde:	f7ff fa55 	bl	800218c <SPI_Init>

  /* SPI enable */
  SPI_Cmd(LCD_SPI, ENABLE);
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	4804      	ldr	r0, [pc, #16]	; (8002cf8 <LCD_SPIConfig+0xc4>)
 8002ce6:	f7ff fa95 	bl	8002214 <SPI_Cmd>
}
 8002cea:	bf00      	nop
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40021400 	.word	0x40021400
 8002cf8:	40015000 	.word	0x40015000

08002cfc <LCD_AF_GPIOConfig>:
  * @brief GPIO config for LTDC.
  * @retval
  *  None
  */
static void LCD_AF_GPIOConfig(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable GPIOI, GPIOJ, GPIOG, GPIOF, GPIOH AHB Clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 8002d02:	2101      	movs	r1, #1
 8002d04:	206f      	movs	r0, #111	; 0x6f
 8002d06:	f7ff f8d9 	bl	8001ebc <RCC_AHB1PeriphClockCmd>
           -----------------------------------------------------

*/

 /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 8002d0a:	220e      	movs	r2, #14
 8002d0c:	2103      	movs	r1, #3
 8002d0e:	4853      	ldr	r0, [pc, #332]	; (8002e5c <LCD_AF_GPIOConfig+0x160>)
 8002d10:	f7fe fdf4 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 8002d14:	220e      	movs	r2, #14
 8002d16:	2104      	movs	r1, #4
 8002d18:	4850      	ldr	r0, [pc, #320]	; (8002e5c <LCD_AF_GPIOConfig+0x160>)
 8002d1a:	f7fe fdef 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 8002d1e:	220e      	movs	r2, #14
 8002d20:	2106      	movs	r1, #6
 8002d22:	484e      	ldr	r0, [pc, #312]	; (8002e5c <LCD_AF_GPIOConfig+0x160>)
 8002d24:	f7fe fdea 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 8002d28:	220e      	movs	r2, #14
 8002d2a:	210b      	movs	r1, #11
 8002d2c:	484b      	ldr	r0, [pc, #300]	; (8002e5c <LCD_AF_GPIOConfig+0x160>)
 8002d2e:	f7fe fde5 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 8002d32:	220e      	movs	r2, #14
 8002d34:	210c      	movs	r1, #12
 8002d36:	4849      	ldr	r0, [pc, #292]	; (8002e5c <LCD_AF_GPIOConfig+0x160>)
 8002d38:	f7fe fde0 	bl	80018fc <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8002d3c:	f641 0358 	movw	r3, #6232	; 0x1858
 8002d40:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
                             
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8002d42:	2302      	movs	r3, #2
 8002d44:	717b      	strb	r3, [r7, #5]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8002d46:	2302      	movs	r3, #2
 8002d48:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d52:	463b      	mov	r3, r7
 8002d54:	4619      	mov	r1, r3
 8002d56:	4841      	ldr	r0, [pc, #260]	; (8002e5c <LCD_AF_GPIOConfig+0x160>)
 8002d58:	f7fe fce0 	bl	800171c <GPIO_Init>
  
 /* GPIOB configuration */  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, 0x09);
 8002d5c:	2209      	movs	r2, #9
 8002d5e:	2100      	movs	r1, #0
 8002d60:	483f      	ldr	r0, [pc, #252]	; (8002e60 <LCD_AF_GPIOConfig+0x164>)
 8002d62:	f7fe fdcb 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, 0x09);
 8002d66:	2209      	movs	r2, #9
 8002d68:	2101      	movs	r1, #1
 8002d6a:	483d      	ldr	r0, [pc, #244]	; (8002e60 <LCD_AF_GPIOConfig+0x164>)
 8002d6c:	f7fe fdc6 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 8002d70:	220e      	movs	r2, #14
 8002d72:	2108      	movs	r1, #8
 8002d74:	483a      	ldr	r0, [pc, #232]	; (8002e60 <LCD_AF_GPIOConfig+0x164>)
 8002d76:	f7fe fdc1 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 8002d7a:	220e      	movs	r2, #14
 8002d7c:	2109      	movs	r1, #9
 8002d7e:	4838      	ldr	r0, [pc, #224]	; (8002e60 <LCD_AF_GPIOConfig+0x164>)
 8002d80:	f7fe fdbc 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 8002d84:	220e      	movs	r2, #14
 8002d86:	210a      	movs	r1, #10
 8002d88:	4835      	ldr	r0, [pc, #212]	; (8002e60 <LCD_AF_GPIOConfig+0x164>)
 8002d8a:	f7fe fdb7 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 8002d8e:	220e      	movs	r2, #14
 8002d90:	210b      	movs	r1, #11
 8002d92:	4833      	ldr	r0, [pc, #204]	; (8002e60 <LCD_AF_GPIOConfig+0x164>)
 8002d94:	f7fe fdb2 	bl	80018fc <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 8002d98:	f640 7303 	movw	r3, #3843	; 0xf03
 8002d9c:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9e:	463b      	mov	r3, r7
 8002da0:	4619      	mov	r1, r3
 8002da2:	482f      	ldr	r0, [pc, #188]	; (8002e60 <LCD_AF_GPIOConfig+0x164>)
 8002da4:	f7fe fcba 	bl	800171c <GPIO_Init>

 /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 8002da8:	220e      	movs	r2, #14
 8002daa:	2106      	movs	r1, #6
 8002dac:	482d      	ldr	r0, [pc, #180]	; (8002e64 <LCD_AF_GPIOConfig+0x168>)
 8002dae:	f7fe fda5 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 8002db2:	220e      	movs	r2, #14
 8002db4:	2107      	movs	r1, #7
 8002db6:	482b      	ldr	r0, [pc, #172]	; (8002e64 <LCD_AF_GPIOConfig+0x168>)
 8002db8:	f7fe fda0 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
 8002dbc:	220e      	movs	r2, #14
 8002dbe:	210a      	movs	r1, #10
 8002dc0:	4828      	ldr	r0, [pc, #160]	; (8002e64 <LCD_AF_GPIOConfig+0x168>)
 8002dc2:	f7fe fd9b 	bl	80018fc <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10;
 8002dc6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002dca:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dcc:	463b      	mov	r3, r7
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4824      	ldr	r0, [pc, #144]	; (8002e64 <LCD_AF_GPIOConfig+0x168>)
 8002dd2:	f7fe fca3 	bl	800171c <GPIO_Init>

 /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 8002dd6:	220e      	movs	r2, #14
 8002dd8:	2103      	movs	r1, #3
 8002dda:	4823      	ldr	r0, [pc, #140]	; (8002e68 <LCD_AF_GPIOConfig+0x16c>)
 8002ddc:	f7fe fd8e 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 8002de0:	220e      	movs	r2, #14
 8002de2:	2106      	movs	r1, #6
 8002de4:	4820      	ldr	r0, [pc, #128]	; (8002e68 <LCD_AF_GPIOConfig+0x16c>)
 8002de6:	f7fe fd89 	bl	80018fc <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 8002dea:	2348      	movs	r3, #72	; 0x48
 8002dec:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dee:	463b      	mov	r3, r7
 8002df0:	4619      	mov	r1, r3
 8002df2:	481d      	ldr	r0, [pc, #116]	; (8002e68 <LCD_AF_GPIOConfig+0x16c>)
 8002df4:	f7fe fc92 	bl	800171c <GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 8002df8:	220e      	movs	r2, #14
 8002dfa:	210a      	movs	r1, #10
 8002dfc:	481b      	ldr	r0, [pc, #108]	; (8002e6c <LCD_AF_GPIOConfig+0x170>)
 8002dfe:	f7fe fd7d 	bl	80018fc <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8002e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e06:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOF, &GPIO_InitStruct);     
 8002e08:	463b      	mov	r3, r7
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4817      	ldr	r0, [pc, #92]	; (8002e6c <LCD_AF_GPIOConfig+0x170>)
 8002e0e:	f7fe fc85 	bl	800171c <GPIO_Init>

 /* GPIOG configuration */  
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 8002e12:	220e      	movs	r2, #14
 8002e14:	2106      	movs	r1, #6
 8002e16:	4816      	ldr	r0, [pc, #88]	; (8002e70 <LCD_AF_GPIOConfig+0x174>)
 8002e18:	f7fe fd70 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 8002e1c:	220e      	movs	r2, #14
 8002e1e:	2107      	movs	r1, #7
 8002e20:	4813      	ldr	r0, [pc, #76]	; (8002e70 <LCD_AF_GPIOConfig+0x174>)
 8002e22:	f7fe fd6b 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, 0x09);
 8002e26:	2209      	movs	r2, #9
 8002e28:	210a      	movs	r1, #10
 8002e2a:	4811      	ldr	r0, [pc, #68]	; (8002e70 <LCD_AF_GPIOConfig+0x174>)
 8002e2c:	f7fe fd66 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 8002e30:	220e      	movs	r2, #14
 8002e32:	210b      	movs	r1, #11
 8002e34:	480e      	ldr	r0, [pc, #56]	; (8002e70 <LCD_AF_GPIOConfig+0x174>)
 8002e36:	f7fe fd61 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, 0x09);
 8002e3a:	2209      	movs	r2, #9
 8002e3c:	210c      	movs	r1, #12
 8002e3e:	480c      	ldr	r0, [pc, #48]	; (8002e70 <LCD_AF_GPIOConfig+0x174>)
 8002e40:	f7fe fd5c 	bl	80018fc <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 8002e44:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 8002e48:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
  
  GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e4a:	463b      	mov	r3, r7
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4808      	ldr	r0, [pc, #32]	; (8002e70 <LCD_AF_GPIOConfig+0x174>)
 8002e50:	f7fe fc64 	bl	800171c <GPIO_Init>
 
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40020000 	.word	0x40020000
 8002e60:	40020400 	.word	0x40020400
 8002e64:	40020800 	.word	0x40020800
 8002e68:	40020c00 	.word	0x40020c00
 8002e6c:	40021400 	.word	0x40021400
 8002e70:	40021800 	.word	0x40021800

08002e74 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
  for(index = nCount; index != 0; index--)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	e002      	b.n	8002e8c <delay+0x18>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f9      	bne.n	8002e86 <delay+0x12>
  {
  }
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <SDRAM_Init>:
  *         on the SDRAM.
  * @param  None
  * @retval None
  */
void SDRAM_Init(void)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b092      	sub	sp, #72	; 0x48
 8002ea2:	af00      	add	r7, sp, #0
  FMC_SDRAMInitTypeDef  FMC_SDRAMInitStructure;
  FMC_SDRAMTimingInitTypeDef  FMC_SDRAMTimingInitStructure; 
  
  /* GPIO configuration for FMC SDRAM bank */
  SDRAM_GPIOConfig();
 8002ea4:	f000 f836 	bl	8002f14 <SDRAM_GPIOConfig>
  
  /* Enable FMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FMC, ENABLE);
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	2001      	movs	r0, #1
 8002eac:	f7ff f826 	bl	8001efc <RCC_AHB3PeriphClockCmd>
 
/* FMC Configuration ---------------------------------------------------------*/
/* FMC SDRAM Bank configuration */   
  /* Timing configuration for 84 Mhz of SD clock frequency (168Mhz/2) */
  /* TMRD: 2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay = 2;      
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	603b      	str	r3, [r7, #0]
  /* TXSR: min=70ns (6x11.90ns) */
  FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 7;
 8002eb4:	2307      	movs	r3, #7
 8002eb6:	607b      	str	r3, [r7, #4]
  /* TRAS: min=42ns (4x11.90ns) max=120k (ns) */
  FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime = 4;
 8002eb8:	2304      	movs	r3, #4
 8002eba:	60bb      	str	r3, [r7, #8]
  /* TRC:  min=63 (6x11.90ns) */        
  FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay = 7;         
 8002ebc:	2307      	movs	r3, #7
 8002ebe:	60fb      	str	r3, [r7, #12]
  /* TWR:  2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime = 2;      
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	613b      	str	r3, [r7, #16]
  /* TRP:  15ns => 2x11.90ns */
  FMC_SDRAMTimingInitStructure.FMC_RPDelay = 2;                
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	617b      	str	r3, [r7, #20]
  /* TRCD: 15ns => 2x11.90ns */
  FMC_SDRAMTimingInitStructure.FMC_RCDDelay = 2;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	61bb      	str	r3, [r7, #24]

/* FMC SDRAM control configuration */
  FMC_SDRAMInitStructure.FMC_Bank = FMC_Bank2_SDRAM;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
  /* Row addressing: [7:0] */
  FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	623b      	str	r3, [r7, #32]
  /* Column addressing: [11:0] */
  FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_12b;
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
  FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8002ed8:	2310      	movs	r3, #16
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
  FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
 8002edc:	2340      	movs	r3, #64	; 0x40
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  FMC_SDRAMInitStructure.FMC_CASLatency = SDRAM_CAS_LATENCY; 
 8002ee0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
  FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
  FMC_SDRAMInitStructure.FMC_SDClockPeriod = SDCLOCK_PERIOD;  
 8002eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eee:	63bb      	str	r3, [r7, #56]	; 0x38
  FMC_SDRAMInitStructure.FMC_ReadBurst = SDRAM_READBURST;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
 8002ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ef8:	643b      	str	r3, [r7, #64]	; 0x40
  FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
 8002efa:	463b      	mov	r3, r7
 8002efc:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* FMC SDRAM bank initialization */
  FMC_SDRAMInit(&FMC_SDRAMInitStructure); 
 8002efe:	f107 031c 	add.w	r3, r7, #28
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe fac2 	bl	800148c <FMC_SDRAMInit>
  
  /* FMC SDRAM device initialization sequence */
  SDRAM_InitSequence(); 
 8002f08:	f000 f910 	bl	800312c <SDRAM_InitSequence>
  
}
 8002f0c:	bf00      	nop
 8002f0e:	3748      	adds	r7, #72	; 0x48
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <SDRAM_GPIOConfig>:
  * @brief  Configures all SDRAM memory I/Os pins. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_GPIOConfig(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD |
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	207e      	movs	r0, #126	; 0x7e
 8002f1e:	f7fe ffcd 	bl	8001ebc <RCC_AHB1PeriphClockCmd>
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8002f22:	2302      	movs	r3, #2
 8002f24:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002f26:	2302      	movs	r3, #2
 8002f28:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	71fb      	strb	r3, [r7, #7]

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 8002f32:	220c      	movs	r2, #12
 8002f34:	2105      	movs	r1, #5
 8002f36:	4877      	ldr	r0, [pc, #476]	; (8003114 <SDRAM_GPIOConfig+0x200>)
 8002f38:	f7fe fce0 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6 , GPIO_AF_FMC);
 8002f3c:	220c      	movs	r2, #12
 8002f3e:	2106      	movs	r1, #6
 8002f40:	4874      	ldr	r0, [pc, #464]	; (8003114 <SDRAM_GPIOConfig+0x200>)
 8002f42:	f7fe fcdb 	bl	80018fc <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5  | GPIO_Pin_6;      
 8002f46:	2360      	movs	r3, #96	; 0x60
 8002f48:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002f4a:	463b      	mov	r3, r7
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4871      	ldr	r0, [pc, #452]	; (8003114 <SDRAM_GPIOConfig+0x200>)
 8002f50:	f7fe fbe4 	bl	800171c <GPIO_Init>

  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0 , GPIO_AF_FMC);
 8002f54:	220c      	movs	r2, #12
 8002f56:	2100      	movs	r1, #0
 8002f58:	486f      	ldr	r0, [pc, #444]	; (8003118 <SDRAM_GPIOConfig+0x204>)
 8002f5a:	f7fe fccf 	bl	80018fc <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;      
 8002f5e:	2301      	movs	r3, #1
 8002f60:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002f62:	463b      	mov	r3, r7
 8002f64:	4619      	mov	r1, r3
 8002f66:	486c      	ldr	r0, [pc, #432]	; (8003118 <SDRAM_GPIOConfig+0x204>)
 8002f68:	f7fe fbd8 	bl	800171c <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 8002f6c:	220c      	movs	r2, #12
 8002f6e:	2100      	movs	r1, #0
 8002f70:	486a      	ldr	r0, [pc, #424]	; (800311c <SDRAM_GPIOConfig+0x208>)
 8002f72:	f7fe fcc3 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FMC);
 8002f76:	220c      	movs	r2, #12
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4868      	ldr	r0, [pc, #416]	; (800311c <SDRAM_GPIOConfig+0x208>)
 8002f7c:	f7fe fcbe 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FMC);
 8002f80:	220c      	movs	r2, #12
 8002f82:	2108      	movs	r1, #8
 8002f84:	4865      	ldr	r0, [pc, #404]	; (800311c <SDRAM_GPIOConfig+0x208>)
 8002f86:	f7fe fcb9 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FMC);
 8002f8a:	220c      	movs	r2, #12
 8002f8c:	2109      	movs	r1, #9
 8002f8e:	4863      	ldr	r0, [pc, #396]	; (800311c <SDRAM_GPIOConfig+0x208>)
 8002f90:	f7fe fcb4 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FMC);
 8002f94:	220c      	movs	r2, #12
 8002f96:	210a      	movs	r1, #10
 8002f98:	4860      	ldr	r0, [pc, #384]	; (800311c <SDRAM_GPIOConfig+0x208>)
 8002f9a:	f7fe fcaf 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FMC);
 8002f9e:	220c      	movs	r2, #12
 8002fa0:	210e      	movs	r1, #14
 8002fa2:	485e      	ldr	r0, [pc, #376]	; (800311c <SDRAM_GPIOConfig+0x208>)
 8002fa4:	f7fe fcaa 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FMC);
 8002fa8:	220c      	movs	r2, #12
 8002faa:	210f      	movs	r1, #15
 8002fac:	485b      	ldr	r0, [pc, #364]	; (800311c <SDRAM_GPIOConfig+0x208>)
 8002fae:	f7fe fca5 	bl	80018fc <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1  | GPIO_Pin_8 |
 8002fb2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002fb6:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
                                GPIO_Pin_15;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002fb8:	463b      	mov	r3, r7
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4857      	ldr	r0, [pc, #348]	; (800311c <SDRAM_GPIOConfig+0x208>)
 8002fbe:	f7fe fbad 	bl	800171c <GPIO_Init>

  /* GPIOE configuration */
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FMC);
 8002fc2:	220c      	movs	r2, #12
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4856      	ldr	r0, [pc, #344]	; (8003120 <SDRAM_GPIOConfig+0x20c>)
 8002fc8:	f7fe fc98 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FMC);
 8002fcc:	220c      	movs	r2, #12
 8002fce:	2101      	movs	r1, #1
 8002fd0:	4853      	ldr	r0, [pc, #332]	; (8003120 <SDRAM_GPIOConfig+0x20c>)
 8002fd2:	f7fe fc93 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FMC);
 8002fd6:	220c      	movs	r2, #12
 8002fd8:	2107      	movs	r1, #7
 8002fda:	4851      	ldr	r0, [pc, #324]	; (8003120 <SDRAM_GPIOConfig+0x20c>)
 8002fdc:	f7fe fc8e 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FMC);
 8002fe0:	220c      	movs	r2, #12
 8002fe2:	2108      	movs	r1, #8
 8002fe4:	484e      	ldr	r0, [pc, #312]	; (8003120 <SDRAM_GPIOConfig+0x20c>)
 8002fe6:	f7fe fc89 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FMC);
 8002fea:	220c      	movs	r2, #12
 8002fec:	2109      	movs	r1, #9
 8002fee:	484c      	ldr	r0, [pc, #304]	; (8003120 <SDRAM_GPIOConfig+0x20c>)
 8002ff0:	f7fe fc84 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FMC);
 8002ff4:	220c      	movs	r2, #12
 8002ff6:	210a      	movs	r1, #10
 8002ff8:	4849      	ldr	r0, [pc, #292]	; (8003120 <SDRAM_GPIOConfig+0x20c>)
 8002ffa:	f7fe fc7f 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FMC);
 8002ffe:	220c      	movs	r2, #12
 8003000:	210b      	movs	r1, #11
 8003002:	4847      	ldr	r0, [pc, #284]	; (8003120 <SDRAM_GPIOConfig+0x20c>)
 8003004:	f7fe fc7a 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FMC);
 8003008:	220c      	movs	r2, #12
 800300a:	210c      	movs	r1, #12
 800300c:	4844      	ldr	r0, [pc, #272]	; (8003120 <SDRAM_GPIOConfig+0x20c>)
 800300e:	f7fe fc75 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FMC);
 8003012:	220c      	movs	r2, #12
 8003014:	210d      	movs	r1, #13
 8003016:	4842      	ldr	r0, [pc, #264]	; (8003120 <SDRAM_GPIOConfig+0x20c>)
 8003018:	f7fe fc70 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FMC);
 800301c:	220c      	movs	r2, #12
 800301e:	210e      	movs	r1, #14
 8003020:	483f      	ldr	r0, [pc, #252]	; (8003120 <SDRAM_GPIOConfig+0x20c>)
 8003022:	f7fe fc6b 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FMC);
 8003026:	220c      	movs	r2, #12
 8003028:	210f      	movs	r1, #15
 800302a:	483d      	ldr	r0, [pc, #244]	; (8003120 <SDRAM_GPIOConfig+0x20c>)
 800302c:	f7fe fc66 	bl	80018fc <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_7 |
 8003030:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003034:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003036:	463b      	mov	r3, r7
 8003038:	4619      	mov	r1, r3
 800303a:	4839      	ldr	r0, [pc, #228]	; (8003120 <SDRAM_GPIOConfig+0x20c>)
 800303c:	f7fe fb6e 	bl	800171c <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FMC);
 8003040:	220c      	movs	r2, #12
 8003042:	2100      	movs	r1, #0
 8003044:	4837      	ldr	r0, [pc, #220]	; (8003124 <SDRAM_GPIOConfig+0x210>)
 8003046:	f7fe fc59 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FMC);
 800304a:	220c      	movs	r2, #12
 800304c:	2101      	movs	r1, #1
 800304e:	4835      	ldr	r0, [pc, #212]	; (8003124 <SDRAM_GPIOConfig+0x210>)
 8003050:	f7fe fc54 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FMC);
 8003054:	220c      	movs	r2, #12
 8003056:	2102      	movs	r1, #2
 8003058:	4832      	ldr	r0, [pc, #200]	; (8003124 <SDRAM_GPIOConfig+0x210>)
 800305a:	f7fe fc4f 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FMC);
 800305e:	220c      	movs	r2, #12
 8003060:	2103      	movs	r1, #3
 8003062:	4830      	ldr	r0, [pc, #192]	; (8003124 <SDRAM_GPIOConfig+0x210>)
 8003064:	f7fe fc4a 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FMC);
 8003068:	220c      	movs	r2, #12
 800306a:	2104      	movs	r1, #4
 800306c:	482d      	ldr	r0, [pc, #180]	; (8003124 <SDRAM_GPIOConfig+0x210>)
 800306e:	f7fe fc45 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FMC);
 8003072:	220c      	movs	r2, #12
 8003074:	2105      	movs	r1, #5
 8003076:	482b      	ldr	r0, [pc, #172]	; (8003124 <SDRAM_GPIOConfig+0x210>)
 8003078:	f7fe fc40 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource11 , GPIO_AF_FMC);
 800307c:	220c      	movs	r2, #12
 800307e:	210b      	movs	r1, #11
 8003080:	4828      	ldr	r0, [pc, #160]	; (8003124 <SDRAM_GPIOConfig+0x210>)
 8003082:	f7fe fc3b 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FMC);
 8003086:	220c      	movs	r2, #12
 8003088:	210c      	movs	r1, #12
 800308a:	4826      	ldr	r0, [pc, #152]	; (8003124 <SDRAM_GPIOConfig+0x210>)
 800308c:	f7fe fc36 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FMC);
 8003090:	220c      	movs	r2, #12
 8003092:	210d      	movs	r1, #13
 8003094:	4823      	ldr	r0, [pc, #140]	; (8003124 <SDRAM_GPIOConfig+0x210>)
 8003096:	f7fe fc31 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FMC);
 800309a:	220c      	movs	r2, #12
 800309c:	210e      	movs	r1, #14
 800309e:	4821      	ldr	r0, [pc, #132]	; (8003124 <SDRAM_GPIOConfig+0x210>)
 80030a0:	f7fe fc2c 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FMC);
 80030a4:	220c      	movs	r2, #12
 80030a6:	210f      	movs	r1, #15
 80030a8:	481e      	ldr	r0, [pc, #120]	; (8003124 <SDRAM_GPIOConfig+0x210>)
 80030aa:	f7fe fc27 	bl	80018fc <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1 | GPIO_Pin_2 | 
 80030ae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80030b2:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_3  | GPIO_Pin_4 | GPIO_Pin_5 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;      

  GPIO_Init(GPIOF, &GPIO_InitStructure);
 80030b4:	463b      	mov	r3, r7
 80030b6:	4619      	mov	r1, r3
 80030b8:	481a      	ldr	r0, [pc, #104]	; (8003124 <SDRAM_GPIOConfig+0x210>)
 80030ba:	f7fe fb2f 	bl	800171c <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FMC);
 80030be:	220c      	movs	r2, #12
 80030c0:	2100      	movs	r1, #0
 80030c2:	4819      	ldr	r0, [pc, #100]	; (8003128 <SDRAM_GPIOConfig+0x214>)
 80030c4:	f7fe fc1a 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FMC);
 80030c8:	220c      	movs	r2, #12
 80030ca:	2101      	movs	r1, #1
 80030cc:	4816      	ldr	r0, [pc, #88]	; (8003128 <SDRAM_GPIOConfig+0x214>)
 80030ce:	f7fe fc15 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FMC);
 80030d2:	220c      	movs	r2, #12
 80030d4:	2104      	movs	r1, #4
 80030d6:	4814      	ldr	r0, [pc, #80]	; (8003128 <SDRAM_GPIOConfig+0x214>)
 80030d8:	f7fe fc10 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FMC);
 80030dc:	220c      	movs	r2, #12
 80030de:	2105      	movs	r1, #5
 80030e0:	4811      	ldr	r0, [pc, #68]	; (8003128 <SDRAM_GPIOConfig+0x214>)
 80030e2:	f7fe fc0b 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource8 , GPIO_AF_FMC);
 80030e6:	220c      	movs	r2, #12
 80030e8:	2108      	movs	r1, #8
 80030ea:	480f      	ldr	r0, [pc, #60]	; (8003128 <SDRAM_GPIOConfig+0x214>)
 80030ec:	f7fe fc06 	bl	80018fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource15 , GPIO_AF_FMC);
 80030f0:	220c      	movs	r2, #12
 80030f2:	210f      	movs	r1, #15
 80030f4:	480c      	ldr	r0, [pc, #48]	; (8003128 <SDRAM_GPIOConfig+0x214>)
 80030f6:	f7fe fc01 	bl	80018fc <GPIO_PinAFConfig>
  

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 |
 80030fa:	f248 1333 	movw	r3, #33075	; 0x8133
 80030fe:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_15;

  GPIO_Init(GPIOG, &GPIO_InitStructure);    
 8003100:	463b      	mov	r3, r7
 8003102:	4619      	mov	r1, r3
 8003104:	4808      	ldr	r0, [pc, #32]	; (8003128 <SDRAM_GPIOConfig+0x214>)
 8003106:	f7fe fb09 	bl	800171c <GPIO_Init>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40020400 	.word	0x40020400
 8003118:	40020800 	.word	0x40020800
 800311c:	40020c00 	.word	0x40020c00
 8003120:	40021000 	.word	0x40021000
 8003124:	40021400 	.word	0x40021400
 8003128:	40021800 	.word	0x40021800

0800312c <SDRAM_InitSequence>:
  * @brief  Executes the SDRAM memory initialization sequence. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_InitSequence(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
  FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
  uint32_t tmpr = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
  
/* Step 3 --------------------------------------------------------------------*/
  /* Configure a clock configuration enable command */
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_CLK_Enabled;
 8003136:	2301      	movs	r3, #1
 8003138:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 800313a:	2308      	movs	r3, #8
 800313c:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 800313e:	2301      	movs	r3, #1
 8003140:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8003146:	bf00      	nop
 8003148:	2120      	movs	r1, #32
 800314a:	2001      	movs	r0, #1
 800314c:	f7fe faa8 	bl	80016a0 <FMC_GetFlagStatus>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f8      	bne.n	8003148 <SDRAM_InitSequence+0x1c>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);  
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe fa45 	bl	80015e8 <FMC_SDRAMCmdConfig>
  
/* Step 4 --------------------------------------------------------------------*/
  /* Insert 100 ms delay */
  __Delay(10);
 800315e:	200a      	movs	r0, #10
 8003160:	f000 f85c 	bl	800321c <delay>
    
/* Step 5 --------------------------------------------------------------------*/
  /* Configure a PALL (precharge all) command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_PALL;
 8003164:	2302      	movs	r3, #2
 8003166:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8003168:	2308      	movs	r3, #8
 800316a:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 800316c:	2301      	movs	r3, #1
 800316e:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8003174:	bf00      	nop
 8003176:	2120      	movs	r1, #32
 8003178:	2001      	movs	r0, #1
 800317a:	f7fe fa91 	bl	80016a0 <FMC_GetFlagStatus>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f8      	bne.n	8003176 <SDRAM_InitSequence+0x4a>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe fa2e 	bl	80015e8 <FMC_SDRAMCmdConfig>
  
/* Step 6 --------------------------------------------------------------------*/
  /* Configure a Auto-Refresh command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_AutoRefresh;
 800318c:	2303      	movs	r3, #3
 800318e:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8003190:	2308      	movs	r3, #8
 8003192:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 4;
 8003194:	2304      	movs	r3, #4
 8003196:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 800319c:	bf00      	nop
 800319e:	2120      	movs	r1, #32
 80031a0:	2001      	movs	r0, #1
 80031a2:	f7fe fa7d 	bl	80016a0 <FMC_GetFlagStatus>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f8      	bne.n	800319e <SDRAM_InitSequence+0x72>
  {
  }
  /* Send the  first command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 80031ac:	1d3b      	adds	r3, r7, #4
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe fa1a 	bl	80015e8 <FMC_SDRAMCmdConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80031b4:	bf00      	nop
 80031b6:	2120      	movs	r1, #32
 80031b8:	2001      	movs	r0, #1
 80031ba:	f7fe fa71 	bl	80016a0 <FMC_GetFlagStatus>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f8      	bne.n	80031b6 <SDRAM_InitSequence+0x8a>
  {
  }
  /* Send the second command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe fa0e 	bl	80015e8 <FMC_SDRAMCmdConfig>
  
/* Step 7 --------------------------------------------------------------------*/
  /* Program the external memory mode register */
  tmpr = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 80031cc:	f240 2331 	movw	r3, #561	; 0x231
 80031d0:	617b      	str	r3, [r7, #20]
                   SDRAM_MODEREG_CAS_LATENCY_3           |
                   SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  /* Configure a load Mode register command*/ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_LoadMode;
 80031d2:	2304      	movs	r3, #4
 80031d4:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 80031d6:	2308      	movs	r3, #8
 80031d8:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 80031da:	2301      	movs	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = tmpr;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80031e2:	bf00      	nop
 80031e4:	2120      	movs	r1, #32
 80031e6:	2001      	movs	r0, #1
 80031e8:	f7fe fa5a 	bl	80016a0 <FMC_GetFlagStatus>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f8      	bne.n	80031e4 <SDRAM_InitSequence+0xb8>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fe f9f7 	bl	80015e8 <FMC_SDRAMCmdConfig>
/* Step 8 --------------------------------------------------------------------*/

  /* Set the refresh rate counter */
  /* (7.81 us x Freq) - 20 */
  /* Set the device refresh counter */
  FMC_SetRefreshCount(683);
 80031fa:	f240 20ab 	movw	r0, #683	; 0x2ab
 80031fe:	f7fe fa13 	bl	8001628 <FMC_SetRefreshCount>
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8003202:	bf00      	nop
 8003204:	2120      	movs	r1, #32
 8003206:	2001      	movs	r0, #1
 8003208:	f7fe fa4a 	bl	80016a0 <FMC_GetFlagStatus>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f8      	bne.n	8003204 <SDRAM_InitSequence+0xd8>
  {
  }
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a08      	ldr	r2, [pc, #32]	; (800324c <delay+0x30>)
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	e002      	b.n	800323a <delay+0x1e>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3b01      	subs	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f9      	bne.n	8003234 <delay+0x18>
  {
  }
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	000186a0 	.word	0x000186a0

08003250 <main>:
void initTimersPwm();
void initFreeTimer();

/* Private functions */
int main(void)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
  // P1
  initPorts();
 8003256:	f000 fc85 	bl	8003b64 <initPorts>
  initTimer1ms();
 800325a:	f000 fd4b 	bl	8003cf4 <initTimer1ms>
  initTimersPwm();
 800325e:	f000 fda5 	bl	8003dac <initTimersPwm>
  initFreeTimer();
 8003262:	f000 fd7b 	bl	8003d5c <initFreeTimer>

  // P3
  initLCD();
 8003266:	f001 fb9d 	bl	80049a4 <initLCD>

  // P2
  initSamples();
 800326a:	f000 fe15 	bl	8003e98 <initSamples>
  initTimerADC();
 800326e:	f000 ff5b 	bl	8004128 <initTimerADC>

  STM_EVAL_LEDInit(LED3);
 8003272:	2000      	movs	r0, #0
 8003274:	f7ff f954 	bl	8002520 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 8003278:	2001      	movs	r0, #1
 800327a:	f7ff f951 	bl	8002520 <STM_EVAL_LEDInit>
  STM_EVAL_LEDOff(LED3);
 800327e:	2000      	movs	r0, #0
 8003280:	f7ff f97c 	bl	800257c <STM_EVAL_LEDOff>
  STM_EVAL_LEDOff(LED4);
 8003284:	2001      	movs	r0, #1
 8003286:	f7ff f979 	bl	800257c <STM_EVAL_LEDOff>

  /* Infinite loop */
  float  revolutionsR, revolutionsL, corre;
  while (1)
  {
	  if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0) == Bit_SET) buttonHandler();
 800328a:	2101      	movs	r1, #1
 800328c:	488a      	ldr	r0, [pc, #552]	; (80034b8 <main+0x268>)
 800328e:	f7fe fad3 	bl	8001838 <GPIO_ReadInputDataBit>
 8003292:	4603      	mov	r3, r0
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <main+0x4c>
 8003298:	f000 fb6c 	bl	8003974 <buttonHandler>
	  //generate VC
	  calculateRevolutions(&revolutionsR, &revolutionsL, &corre);
 800329c:	1d3a      	adds	r2, r7, #4
 800329e:	f107 0108 	add.w	r1, r7, #8
 80032a2:	f107 030c 	add.w	r3, r7, #12
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f908 	bl	80034bc <calculateRevolutions>
	  if (revolutionsR > 5.55 && revolutionsL > 5.55 && corre > 1.3) {
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd f902 	bl	80004b8 <__aeabi_f2d>
 80032b4:	a370      	add	r3, pc, #448	; (adr r3, 8003478 <main+0x228>)
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	f7fd fbe1 	bl	8000a80 <__aeabi_dcmpgt>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80d1 	beq.w	8003468 <main+0x218>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd f8f5 	bl	80004b8 <__aeabi_f2d>
 80032ce:	a36a      	add	r3, pc, #424	; (adr r3, 8003478 <main+0x228>)
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f7fd fbd4 	bl	8000a80 <__aeabi_dcmpgt>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80c4 	beq.w	8003468 <main+0x218>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd f8e8 	bl	80004b8 <__aeabi_f2d>
 80032e8:	a365      	add	r3, pc, #404	; (adr r3, 8003480 <main+0x230>)
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	f7fd fbc7 	bl	8000a80 <__aeabi_dcmpgt>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80b7 	beq.w	8003468 <main+0x218>
		  if (corre >= 2 && revolutionsR > revolutionsL) {
 80032fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80032fe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330a:	db0e      	blt.n	800332a <main+0xda>
 800330c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003310:	edd7 7a02 	vldr	s15, [r7, #8]
 8003314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331c:	dd05      	ble.n	800332a <main+0xda>
			  // Vc = Vfs
			  DAC_SetChannel1Data(DAC_Align_12b_R, 0xFFF);
 800331e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8003322:	2000      	movs	r0, #0
 8003324:	f7fd fe5c 	bl	8000fe0 <DAC_SetChannel1Data>
 8003328:	e09d      	b.n	8003466 <main+0x216>
		  } else if (corre >= 2 && revolutionsL > revolutionsR) {
 800332a:	edd7 7a01 	vldr	s15, [r7, #4]
 800332e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	db0d      	blt.n	8003358 <main+0x108>
 800333c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003340:	edd7 7a03 	vldr	s15, [r7, #12]
 8003344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334c:	dd04      	ble.n	8003358 <main+0x108>
			  // Vc = 0 V
			  DAC_SetChannel1Data(DAC_Align_12b_R, 0x000);
 800334e:	2100      	movs	r1, #0
 8003350:	2000      	movs	r0, #0
 8003352:	f7fd fe45 	bl	8000fe0 <DAC_SetChannel1Data>
 8003356:	e086      	b.n	8003466 <main+0x216>
		  } else {
			  float x = corre - 0.3;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd f8ac 	bl	80004b8 <__aeabi_f2d>
 8003360:	a349      	add	r3, pc, #292	; (adr r3, 8003488 <main+0x238>)
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	f7fc ff47 	bl	80001f8 <__aeabi_dsub>
 800336a:	4603      	mov	r3, r0
 800336c:	460c      	mov	r4, r1
 800336e:	4618      	mov	r0, r3
 8003370:	4621      	mov	r1, r4
 8003372:	f7fd fbd7 	bl	8000b24 <__aeabi_d2f>
 8003376:	4603      	mov	r3, r0
 8003378:	617b      	str	r3, [r7, #20]
			  int y = (1.65 * x - 0.495) / 0.7;
 800337a:	6978      	ldr	r0, [r7, #20]
 800337c:	f7fd f89c 	bl	80004b8 <__aeabi_f2d>
 8003380:	a343      	add	r3, pc, #268	; (adr r3, 8003490 <main+0x240>)
 8003382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003386:	f7fd f8eb 	bl	8000560 <__aeabi_dmul>
 800338a:	4603      	mov	r3, r0
 800338c:	460c      	mov	r4, r1
 800338e:	4618      	mov	r0, r3
 8003390:	4621      	mov	r1, r4
 8003392:	a341      	add	r3, pc, #260	; (adr r3, 8003498 <main+0x248>)
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	f7fc ff2e 	bl	80001f8 <__aeabi_dsub>
 800339c:	4603      	mov	r3, r0
 800339e:	460c      	mov	r4, r1
 80033a0:	4618      	mov	r0, r3
 80033a2:	4621      	mov	r1, r4
 80033a4:	a33e      	add	r3, pc, #248	; (adr r3, 80034a0 <main+0x250>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f7fd fa03 	bl	80007b4 <__aeabi_ddiv>
 80033ae:	4603      	mov	r3, r0
 80033b0:	460c      	mov	r4, r1
 80033b2:	4618      	mov	r0, r3
 80033b4:	4621      	mov	r1, r4
 80033b6:	f7fd fb6d 	bl	8000a94 <__aeabi_d2iz>
 80033ba:	4603      	mov	r3, r0
 80033bc:	613b      	str	r3, [r7, #16]
			  if (revolutionsR > revolutionsL) {
 80033be:	ed97 7a03 	vldr	s14, [r7, #12]
 80033c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80033c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ce:	dd18      	ble.n	8003402 <main+0x1b2>
				  // Vc = y V
				  DAC_SetChannel1Data(DAC_Align_12b_R, (uint16_t)(y * 0xFFF / 3.3 ));
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4613      	mov	r3, r2
 80033d4:	031b      	lsls	r3, r3, #12
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd f85b 	bl	8000494 <__aeabi_i2d>
 80033de:	a332      	add	r3, pc, #200	; (adr r3, 80034a8 <main+0x258>)
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f7fd f9e6 	bl	80007b4 <__aeabi_ddiv>
 80033e8:	4603      	mov	r3, r0
 80033ea:	460c      	mov	r4, r1
 80033ec:	4618      	mov	r0, r3
 80033ee:	4621      	mov	r1, r4
 80033f0:	f7fd fb78 	bl	8000ae4 <__aeabi_d2uiz>
 80033f4:	4603      	mov	r3, r0
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	4619      	mov	r1, r3
 80033fa:	2000      	movs	r0, #0
 80033fc:	f7fd fdf0 	bl	8000fe0 <DAC_SetChannel1Data>
		  if (corre >= 2 && revolutionsR > revolutionsL) {
 8003400:	e037      	b.n	8003472 <main+0x222>
			  } else {
				  // Vc = (3.3 - y) V
				  DAC_SetChannel1Data(DAC_Align_12b_R, (uint16_t)((3.3 - y) * 0xFFF) / 3.3);
 8003402:	6938      	ldr	r0, [r7, #16]
 8003404:	f7fd f846 	bl	8000494 <__aeabi_i2d>
 8003408:	4603      	mov	r3, r0
 800340a:	460c      	mov	r4, r1
 800340c:	461a      	mov	r2, r3
 800340e:	4623      	mov	r3, r4
 8003410:	a125      	add	r1, pc, #148	; (adr r1, 80034a8 <main+0x258>)
 8003412:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003416:	f7fc feef 	bl	80001f8 <__aeabi_dsub>
 800341a:	4603      	mov	r3, r0
 800341c:	460c      	mov	r4, r1
 800341e:	4618      	mov	r0, r3
 8003420:	4621      	mov	r1, r4
 8003422:	a323      	add	r3, pc, #140	; (adr r3, 80034b0 <main+0x260>)
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f7fd f89a 	bl	8000560 <__aeabi_dmul>
 800342c:	4603      	mov	r3, r0
 800342e:	460c      	mov	r4, r1
 8003430:	4618      	mov	r0, r3
 8003432:	4621      	mov	r1, r4
 8003434:	f7fd fb56 	bl	8000ae4 <__aeabi_d2uiz>
 8003438:	4603      	mov	r3, r0
 800343a:	b29b      	uxth	r3, r3
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd f829 	bl	8000494 <__aeabi_i2d>
 8003442:	a319      	add	r3, pc, #100	; (adr r3, 80034a8 <main+0x258>)
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f7fd f9b4 	bl	80007b4 <__aeabi_ddiv>
 800344c:	4603      	mov	r3, r0
 800344e:	460c      	mov	r4, r1
 8003450:	4618      	mov	r0, r3
 8003452:	4621      	mov	r1, r4
 8003454:	f7fd fb46 	bl	8000ae4 <__aeabi_d2uiz>
 8003458:	4603      	mov	r3, r0
 800345a:	b29b      	uxth	r3, r3
 800345c:	4619      	mov	r1, r3
 800345e:	2000      	movs	r0, #0
 8003460:	f7fd fdbe 	bl	8000fe0 <DAC_SetChannel1Data>
		  if (corre >= 2 && revolutionsR > revolutionsL) {
 8003464:	e005      	b.n	8003472 <main+0x222>
 8003466:	e004      	b.n	8003472 <main+0x222>
			  }
		  }
	  } else {
		  // Vc = (Max_voltage / 2) V
		  DAC_SetChannel1Data(DAC_Align_12b_R, (uint16_t)(0xFFF / 2));
 8003468:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800346c:	2000      	movs	r0, #0
 800346e:	f7fd fdb7 	bl	8000fe0 <DAC_SetChannel1Data>
	  if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0) == Bit_SET) buttonHandler();
 8003472:	e70a      	b.n	800328a <main+0x3a>
 8003474:	f3af 8000 	nop.w
 8003478:	33333333 	.word	0x33333333
 800347c:	40163333 	.word	0x40163333
 8003480:	cccccccd 	.word	0xcccccccd
 8003484:	3ff4cccc 	.word	0x3ff4cccc
 8003488:	33333333 	.word	0x33333333
 800348c:	3fd33333 	.word	0x3fd33333
 8003490:	66666666 	.word	0x66666666
 8003494:	3ffa6666 	.word	0x3ffa6666
 8003498:	7ae147ae 	.word	0x7ae147ae
 800349c:	3fdfae14 	.word	0x3fdfae14
 80034a0:	66666666 	.word	0x66666666
 80034a4:	3fe66666 	.word	0x3fe66666
 80034a8:	66666666 	.word	0x66666666
 80034ac:	400a6666 	.word	0x400a6666
 80034b0:	00000000 	.word	0x00000000
 80034b4:	40affe00 	.word	0x40affe00
 80034b8:	40020000 	.word	0x40020000

080034bc <calculateRevolutions>:
	  }
  }
}

void calculateRevolutions(float *revolutionsR, float *revolutionsL, float *corre) {
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
	if (pwmPeriodR == 1) {
 80034c8:	4b25      	ldr	r3, [pc, #148]	; (8003560 <calculateRevolutions+0xa4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d10b      	bne.n	80034e8 <calculateRevolutions+0x2c>
		*revolutionsR = 1;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80034d6:	601a      	str	r2, [r3, #0]
		*revolutionsL = 1;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80034de:	601a      	str	r2, [r3, #0]
		*corre = 1;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80034e6:	601a      	str	r2, [r3, #0]
	}
	*revolutionsR = 31250 / pwmPeriodR;
 80034e8:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <calculateRevolutions+0xa4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f647 2212 	movw	r2, #31250	; 0x7a12
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	ee07 3a90 	vmov	s15, r3
 80034f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	edc3 7a00 	vstr	s15, [r3]
	*revolutionsL = 31250 / pwmPeriodL;
 8003502:	4b18      	ldr	r3, [pc, #96]	; (8003564 <calculateRevolutions+0xa8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f647 2212 	movw	r2, #31250	; 0x7a12
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	edc3 7a00 	vstr	s15, [r3]

	if (revolutionsR > revolutionsL) *corre = *revolutionsR / *revolutionsL;
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	429a      	cmp	r2, r3
 8003522:	d90b      	bls.n	800353c <calculateRevolutions+0x80>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	edd3 6a00 	vldr	s13, [r3]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	ed93 7a00 	vldr	s14, [r3]
 8003530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	edc3 7a00 	vstr	s15, [r3]
	else *corre = *revolutionsL / *revolutionsR;
}
 800353a:	e00a      	b.n	8003552 <calculateRevolutions+0x96>
	else *corre = *revolutionsL / *revolutionsR;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	edd3 6a00 	vldr	s13, [r3]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	ed93 7a00 	vldr	s14, [r3]
 8003548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	edc3 7a00 	vstr	s15, [r3]
}
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000048 	.word	0x20000048
 8003564:	20000044 	.word	0x20000044

08003568 <DMA2_Stream1_IRQHandler>:

//___________________________________________DMA_HANDLER___________________________________________

void DMA2_Stream1_IRQHandler() {
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA2_Stream1, DMA_IT_TCIF1)) {
 800356e:	4929      	ldr	r1, [pc, #164]	; (8003614 <DMA2_Stream1_IRQHandler+0xac>)
 8003570:	4829      	ldr	r0, [pc, #164]	; (8003618 <DMA2_Stream1_IRQHandler+0xb0>)
 8003572:	f7fd fe69 	bl	8001248 <DMA_GetITStatus>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d046      	beq.n	800360a <DMA2_Stream1_IRQHandler+0xa2>
	    DMA_ClearITPendingBit(DMA2_Stream1, DMA_IT_TCIF1);
 800357c:	4925      	ldr	r1, [pc, #148]	; (8003614 <DMA2_Stream1_IRQHandler+0xac>)
 800357e:	4826      	ldr	r0, [pc, #152]	; (8003618 <DMA2_Stream1_IRQHandler+0xb0>)
 8003580:	f7fd feba 	bl	80012f8 <DMA_ClearITPendingBit>

	    sampleMean[numTransfers] = getMean();
 8003584:	4b25      	ldr	r3, [pc, #148]	; (800361c <DMA2_Stream1_IRQHandler+0xb4>)
 8003586:	681c      	ldr	r4, [r3, #0]
 8003588:	4d25      	ldr	r5, [pc, #148]	; (8003620 <DMA2_Stream1_IRQHandler+0xb8>)
 800358a:	f000 fd63 	bl	8004054 <getMean>
 800358e:	4603      	mov	r3, r0
 8003590:	461a      	mov	r2, r3
 8003592:	f825 2024 	strh.w	r2, [r5, r4, lsl #2]
 8003596:	f3c3 420f 	ubfx	r2, r3, #16, #16
 800359a:	00a3      	lsls	r3, r4, #2
 800359c:	442b      	add	r3, r5
 800359e:	805a      	strh	r2, [r3, #2]
	    //Sample2 test = {values[testPtr], values[testPtr] * - 1};
	    //sampleMean[numTransfers] = test;
	    numTransfers++;
 80035a0:	4b1e      	ldr	r3, [pc, #120]	; (800361c <DMA2_Stream1_IRQHandler+0xb4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	4a1d      	ldr	r2, [pc, #116]	; (800361c <DMA2_Stream1_IRQHandler+0xb4>)
 80035a8:	6013      	str	r3, [r2, #0]

	    if (numTransfers == 10) {
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <DMA2_Stream1_IRQHandler+0xb4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b0a      	cmp	r3, #10
 80035b0:	d111      	bne.n	80035d6 <DMA2_Stream1_IRQHandler+0x6e>
	    	numTransfers = 0;
 80035b2:	4b1a      	ldr	r3, [pc, #104]	; (800361c <DMA2_Stream1_IRQHandler+0xb4>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
			numSamples++;
 80035b8:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <DMA2_Stream1_IRQHandler+0xbc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3301      	adds	r3, #1
 80035be:	4a19      	ldr	r2, [pc, #100]	; (8003624 <DMA2_Stream1_IRQHandler+0xbc>)
 80035c0:	6013      	str	r3, [r2, #0]

	    	displayAccelerations(calculateMean(), numSamples);
 80035c2:	f000 f833 	bl	800362c <calculateMean>
 80035c6:	4603      	mov	r3, r0
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	4b16      	ldr	r3, [pc, #88]	; (8003624 <DMA2_Stream1_IRQHandler+0xbc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f001 fa8f 	bl	8004af4 <displayAccelerations>
	    }

	    if (numSamples % 10 == 0) displayInstantaneous();
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <DMA2_Stream1_IRQHandler+0xbc>)
 80035d8:	6819      	ldr	r1, [r3, #0]
 80035da:	4b13      	ldr	r3, [pc, #76]	; (8003628 <DMA2_Stream1_IRQHandler+0xc0>)
 80035dc:	fb83 2301 	smull	r2, r3, r3, r1
 80035e0:	109a      	asrs	r2, r3, #2
 80035e2:	17cb      	asrs	r3, r1, #31
 80035e4:	1ad2      	subs	r2, r2, r3
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	1aca      	subs	r2, r1, r3
 80035f0:	2a00      	cmp	r2, #0
 80035f2:	d101      	bne.n	80035f8 <DMA2_Stream1_IRQHandler+0x90>
 80035f4:	f001 fb92 	bl	8004d1c <displayInstantaneous>
	    if (numSamples == 200) {
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <DMA2_Stream1_IRQHandler+0xbc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2bc8      	cmp	r3, #200	; 0xc8
 80035fe:	d104      	bne.n	800360a <DMA2_Stream1_IRQHandler+0xa2>
	    	numSamples = 0;
 8003600:	4b08      	ldr	r3, [pc, #32]	; (8003624 <DMA2_Stream1_IRQHandler+0xbc>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
	    	setIsFilled();
 8003606:	f001 fba7 	bl	8004d58 <setIsFilled>
	    }
	}
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bdb0      	pop	{r4, r5, r7, pc}
 8003612:	bf00      	nop
 8003614:	10008800 	.word	0x10008800
 8003618:	40026428 	.word	0x40026428
 800361c:	200000b8 	.word	0x200000b8
 8003620:	20000100 	.word	0x20000100
 8003624:	200000bc 	.word	0x200000bc
 8003628:	66666667 	.word	0x66666667

0800362c <calculateMean>:

Sample2 calculateMean() {
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
	Sample2 newSample = {0,0};
 8003632:	2300      	movs	r3, #0
 8003634:	80bb      	strh	r3, [r7, #4]
 8003636:	2300      	movs	r3, #0
 8003638:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 10; i++) {
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	e01c      	b.n	800367a <calculateMean+0x4e>
		newSample.sensorX += sampleMean[i].sensorX;
 8003640:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003644:	b29a      	uxth	r2, r3
 8003646:	4920      	ldr	r1, [pc, #128]	; (80036c8 <calculateMean+0x9c>)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f931 3023 	ldrsh.w	r3, [r1, r3, lsl #2]
 800364e:	b29b      	uxth	r3, r3
 8003650:	4413      	add	r3, r2
 8003652:	b29b      	uxth	r3, r3
 8003654:	b21b      	sxth	r3, r3
 8003656:	80bb      	strh	r3, [r7, #4]
		newSample.sensorY += sampleMean[i].sensorY;
 8003658:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800365c:	b29a      	uxth	r2, r3
 800365e:	491a      	ldr	r1, [pc, #104]	; (80036c8 <calculateMean+0x9c>)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800366a:	b29b      	uxth	r3, r3
 800366c:	4413      	add	r3, r2
 800366e:	b29b      	uxth	r3, r3
 8003670:	b21b      	sxth	r3, r3
 8003672:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 10; i++) {
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3301      	adds	r3, #1
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b09      	cmp	r3, #9
 800367e:	dddf      	ble.n	8003640 <calculateMean+0x14>
	}

	newSample.sensorX /= 10;
 8003680:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003684:	4a11      	ldr	r2, [pc, #68]	; (80036cc <calculateMean+0xa0>)
 8003686:	fb82 1203 	smull	r1, r2, r2, r3
 800368a:	1092      	asrs	r2, r2, #2
 800368c:	17db      	asrs	r3, r3, #31
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	b21b      	sxth	r3, r3
 8003692:	80bb      	strh	r3, [r7, #4]
	newSample.sensorY /= 10;
 8003694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003698:	4a0c      	ldr	r2, [pc, #48]	; (80036cc <calculateMean+0xa0>)
 800369a:	fb82 1203 	smull	r1, r2, r2, r3
 800369e:	1092      	asrs	r2, r2, #2
 80036a0:	17db      	asrs	r3, r3, #31
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	b21b      	sxth	r3, r3
 80036a6:	80fb      	strh	r3, [r7, #6]

	return newSample;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	2300      	movs	r3, #0
 80036ae:	893a      	ldrh	r2, [r7, #8]
 80036b0:	f362 030f 	bfi	r3, r2, #0, #16
 80036b4:	897a      	ldrh	r2, [r7, #10]
 80036b6:	f362 431f 	bfi	r3, r2, #16, #16
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000100 	.word	0x20000100
 80036cc:	66666667 	.word	0x66666667

080036d0 <TIM2_IRQHandler>:
//___________________________________________TIMER_HANDLER___________________________________________
// Module 3: ISR of the left wheel PWM timer
void TIM2_IRQHandler() {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 80036d4:	2101      	movs	r1, #1
 80036d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80036da:	f7fe fee5 	bl	80024a8 <TIM_GetITStatus>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d015      	beq.n	8003710 <TIM2_IRQHandler+0x40>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80036e4:	2101      	movs	r1, #1
 80036e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80036ea:	f7fe ff07 	bl	80024fc <TIM_ClearITPendingBit>

		if (speed == 0) GPIO_ResetBits(GPIOG, GPIO_Pin_2);
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <TIM2_IRQHandler+0x44>)
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80036f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fc:	d104      	bne.n	8003708 <TIM2_IRQHandler+0x38>
 80036fe:	2104      	movs	r1, #4
 8003700:	4805      	ldr	r0, [pc, #20]	; (8003718 <TIM2_IRQHandler+0x48>)
 8003702:	f7fe f8c2 	bl	800188a <GPIO_ResetBits>
		else GPIO_ToggleBits(GPIOG, GPIO_Pin_2);
	}
}
 8003706:	e003      	b.n	8003710 <TIM2_IRQHandler+0x40>
		else GPIO_ToggleBits(GPIOG, GPIO_Pin_2);
 8003708:	2104      	movs	r1, #4
 800370a:	4803      	ldr	r0, [pc, #12]	; (8003718 <TIM2_IRQHandler+0x48>)
 800370c:	f7fe f8e4 	bl	80018d8 <GPIO_ToggleBits>
}
 8003710:	bf00      	nop
 8003712:	bd80      	pop	{r7, pc}
 8003714:	2000009c 	.word	0x2000009c
 8003718:	40021800 	.word	0x40021800

0800371c <TIM3_IRQHandler>:

// Module 3: ISR of the right wheel PWM timer
void TIM3_IRQHandler() {
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET) {
 8003720:	2101      	movs	r1, #1
 8003722:	480e      	ldr	r0, [pc, #56]	; (800375c <TIM3_IRQHandler+0x40>)
 8003724:	f7fe fec0 	bl	80024a8 <TIM_GetITStatus>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d014      	beq.n	8003758 <TIM3_IRQHandler+0x3c>
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 800372e:	2101      	movs	r1, #1
 8003730:	480a      	ldr	r0, [pc, #40]	; (800375c <TIM3_IRQHandler+0x40>)
 8003732:	f7fe fee3 	bl	80024fc <TIM_ClearITPendingBit>

		if (speed == 0) GPIO_ResetBits(GPIOG, GPIO_Pin_3);
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <TIM3_IRQHandler+0x44>)
 8003738:	edd3 7a00 	vldr	s15, [r3]
 800373c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003744:	d104      	bne.n	8003750 <TIM3_IRQHandler+0x34>
 8003746:	2108      	movs	r1, #8
 8003748:	4806      	ldr	r0, [pc, #24]	; (8003764 <TIM3_IRQHandler+0x48>)
 800374a:	f7fe f89e 	bl	800188a <GPIO_ResetBits>
		else GPIO_ToggleBits(GPIOG, GPIO_Pin_3);
	}
}
 800374e:	e003      	b.n	8003758 <TIM3_IRQHandler+0x3c>
		else GPIO_ToggleBits(GPIOG, GPIO_Pin_3);
 8003750:	2108      	movs	r1, #8
 8003752:	4804      	ldr	r0, [pc, #16]	; (8003764 <TIM3_IRQHandler+0x48>)
 8003754:	f7fe f8c0 	bl	80018d8 <GPIO_ToggleBits>
}
 8003758:	bf00      	nop
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40000400 	.word	0x40000400
 8003760:	2000009c 	.word	0x2000009c
 8003764:	40021800 	.word	0x40021800

08003768 <TIM4_IRQHandler>:

// Module 1: ISR of the 1ms timer
void TIM4_IRQHandler() {
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
    if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET) {
 800376c:	2101      	movs	r1, #1
 800376e:	4828      	ldr	r0, [pc, #160]	; (8003810 <TIM4_IRQHandler+0xa8>)
 8003770:	f7fe fe9a 	bl	80024a8 <TIM_GetITStatus>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d047      	beq.n	800380a <TIM4_IRQHandler+0xa2>
        TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 800377a:	2101      	movs	r1, #1
 800377c:	4824      	ldr	r0, [pc, #144]	; (8003810 <TIM4_IRQHandler+0xa8>)
 800377e:	f7fe febd 	bl	80024fc <TIM_ClearITPendingBit>
        counterMs++; // counts how many ms have passed
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <TIM4_IRQHandler+0xac>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3301      	adds	r3, #1
 8003788:	4a22      	ldr	r2, [pc, #136]	; (8003814 <TIM4_IRQHandler+0xac>)
 800378a:	6013      	str	r3, [r2, #0]
        lastChange++; // last time since rising edge if pwm
 800378c:	4b22      	ldr	r3, [pc, #136]	; (8003818 <TIM4_IRQHandler+0xb0>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3301      	adds	r3, #1
 8003792:	4a21      	ldr	r2, [pc, #132]	; (8003818 <TIM4_IRQHandler+0xb0>)
 8003794:	6013      	str	r3, [r2, #0]
        setStartSamples();
 8003796:	f000 fd43 	bl	8004220 <setStartSamples>

        if (counterMs == 45) {
 800379a:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <TIM4_IRQHandler+0xac>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b2d      	cmp	r3, #45	; 0x2d
 80037a0:	d11c      	bne.n	80037dc <TIM4_IRQHandler+0x74>
        	if (inc == 0) {
 80037a2:	4b1e      	ldr	r3, [pc, #120]	; (800381c <TIM4_IRQHandler+0xb4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10c      	bne.n	80037c4 <TIM4_IRQHandler+0x5c>
				testPtr++;
 80037aa:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <TIM4_IRQHandler+0xb8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3301      	adds	r3, #1
 80037b0:	4a1b      	ldr	r2, [pc, #108]	; (8003820 <TIM4_IRQHandler+0xb8>)
 80037b2:	6013      	str	r3, [r2, #0]
				if (testPtr == 8) inc = 1;
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <TIM4_IRQHandler+0xb8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d10f      	bne.n	80037dc <TIM4_IRQHandler+0x74>
 80037bc:	4b17      	ldr	r3, [pc, #92]	; (800381c <TIM4_IRQHandler+0xb4>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e00b      	b.n	80037dc <TIM4_IRQHandler+0x74>
			} else {
				testPtr--;
 80037c4:	4b16      	ldr	r3, [pc, #88]	; (8003820 <TIM4_IRQHandler+0xb8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	4a15      	ldr	r2, [pc, #84]	; (8003820 <TIM4_IRQHandler+0xb8>)
 80037cc:	6013      	str	r3, [r2, #0]
				if (testPtr == 0) inc = 0;
 80037ce:	4b14      	ldr	r3, [pc, #80]	; (8003820 <TIM4_IRQHandler+0xb8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <TIM4_IRQHandler+0x74>
 80037d6:	4b11      	ldr	r3, [pc, #68]	; (800381c <TIM4_IRQHandler+0xb4>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
			}
        }
        // When 200 ms have passed it toggles the LED.
        if (counterMs == 200) {
 80037dc:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <TIM4_IRQHandler+0xac>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2bc8      	cmp	r3, #200	; 0xc8
 80037e2:	d105      	bne.n	80037f0 <TIM4_IRQHandler+0x88>
        	counterMs = 0;
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <TIM4_IRQHandler+0xac>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
        	STM_EVAL_LEDToggle(LED3);
 80037ea:	2000      	movs	r0, #0
 80037ec:	f7fe fede 	bl	80025ac <STM_EVAL_LEDToggle>
        }

        if (lastChange == 40) {
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <TIM4_IRQHandler+0xb0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b28      	cmp	r3, #40	; 0x28
 80037f6:	d108      	bne.n	800380a <TIM4_IRQHandler+0xa2>
        	lastChange = 0;
 80037f8:	4b07      	ldr	r3, [pc, #28]	; (8003818 <TIM4_IRQHandler+0xb0>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
        	pwmPeriodL = 1;
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <TIM4_IRQHandler+0xbc>)
 8003800:	2201      	movs	r2, #1
 8003802:	601a      	str	r2, [r3, #0]
        	pwmPeriodR = 1;
 8003804:	4b08      	ldr	r3, [pc, #32]	; (8003828 <TIM4_IRQHandler+0xc0>)
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]
        }
    }
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40000800 	.word	0x40000800
 8003814:	20000094 	.word	0x20000094
 8003818:	20000098 	.word	0x20000098
 800381c:	200000c0 	.word	0x200000c0
 8003820:	200000c4 	.word	0x200000c4
 8003824:	20000044 	.word	0x20000044
 8003828:	20000048 	.word	0x20000048

0800382c <getSpeed>:

// Module 3: function to get the speed for both right and left wheel.
void getSpeed(int* speed_right, int* speed_left) {
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
	if (status_high < 2) {
 8003836:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <getSpeed+0x7c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b01      	cmp	r3, #1
 800383c:	dc17      	bgt.n	800386e <getSpeed+0x42>
		*speed_right = speed;
 800383e:	4b1b      	ldr	r3, [pc, #108]	; (80038ac <getSpeed+0x80>)
 8003840:	edd3 7a00 	vldr	s15, [r3]
 8003844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003848:	ee17 2a90 	vmov	r2, s15
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	601a      	str	r2, [r3, #0]
		*speed_left =  speed / correlation;
 8003850:	4b16      	ldr	r3, [pc, #88]	; (80038ac <getSpeed+0x80>)
 8003852:	edd3 6a00 	vldr	s13, [r3]
 8003856:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <getSpeed+0x84>)
 8003858:	ed93 7a00 	vldr	s14, [r3]
 800385c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003864:	ee17 2a90 	vmov	r2, s15
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	601a      	str	r2, [r3, #0]
	} else {
		*speed_left = speed;
		*speed_right = speed / correlation;
	}
}
 800386c:	e016      	b.n	800389c <getSpeed+0x70>
		*speed_left = speed;
 800386e:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <getSpeed+0x80>)
 8003870:	edd3 7a00 	vldr	s15, [r3]
 8003874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003878:	ee17 2a90 	vmov	r2, s15
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	601a      	str	r2, [r3, #0]
		*speed_right = speed / correlation;
 8003880:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <getSpeed+0x80>)
 8003882:	edd3 6a00 	vldr	s13, [r3]
 8003886:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <getSpeed+0x84>)
 8003888:	ed93 7a00 	vldr	s14, [r3]
 800388c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003894:	ee17 2a90 	vmov	r2, s15
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	601a      	str	r2, [r3, #0]
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	200000ac 	.word	0x200000ac
 80038ac:	2000009c 	.word	0x2000009c
 80038b0:	2000002c 	.word	0x2000002c

080038b4 <getPeriod>:

// Module 3: Function to get the period of each sensor PWM
uint32_t getPeriod(int wheel) {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	// When speed is 0 it sets a default value.
	if (speed == 0) return (uint32_t) 10000;
 80038bc:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <getPeriod+0x44>)
 80038be:	edd3 7a00 	vldr	s15, [r3]
 80038c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ca:	d102      	bne.n	80038d2 <getPeriod+0x1e>
 80038cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80038d0:	e00d      	b.n	80038ee <getPeriod+0x3a>

	int speed_right, speed_left;
	getSpeed(&speed_right, &speed_left);
 80038d2:	f107 0208 	add.w	r2, r7, #8
 80038d6:	f107 030c 	add.w	r3, r7, #12
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff ffa5 	bl	800382c <getSpeed>

	// when wheel is 1 it returns the period for the right wheel, otherwise for the left
	if (wheel == 1) return (uint32_t)speed_right;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <getPeriod+0x38>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	e000      	b.n	80038ee <getPeriod+0x3a>

	return (uint32_t)speed_left;
 80038ec:	68bb      	ldr	r3, [r7, #8]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	2000009c 	.word	0x2000009c

080038fc <updatePeriod>:

// Module 3: function to update the period of each sensor when the speed or correlation changes
void updatePeriod() {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
	timer_left.TIM_Period = getPeriod(0);
 8003900:	2000      	movs	r0, #0
 8003902:	f7ff ffd7 	bl	80038b4 <getPeriod>
 8003906:	4602      	mov	r2, r0
 8003908:	4b17      	ldr	r3, [pc, #92]	; (8003968 <updatePeriod+0x6c>)
 800390a:	605a      	str	r2, [r3, #4]
	TIM_TimeBaseInit(TIM2, &timer_left);
 800390c:	4916      	ldr	r1, [pc, #88]	; (8003968 <updatePeriod+0x6c>)
 800390e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003912:	f7fe fd0d 	bl	8002330 <TIM_TimeBaseInit>
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8003916:	2101      	movs	r1, #1
 8003918:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800391c:	f7fe fdee 	bl	80024fc <TIM_ClearITPendingBit>
	TIM_Cmd(TIM2, ENABLE);
 8003920:	2101      	movs	r1, #1
 8003922:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003926:	f7fe fd7b 	bl	8002420 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 800392a:	2201      	movs	r2, #1
 800392c:	2101      	movs	r1, #1
 800392e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003932:	f7fe fd95 	bl	8002460 <TIM_ITConfig>

	timer_right.TIM_Period = getPeriod(1);
 8003936:	2001      	movs	r0, #1
 8003938:	f7ff ffbc 	bl	80038b4 <getPeriod>
 800393c:	4602      	mov	r2, r0
 800393e:	4b0b      	ldr	r3, [pc, #44]	; (800396c <updatePeriod+0x70>)
 8003940:	605a      	str	r2, [r3, #4]
	TIM_TimeBaseInit(TIM3, &timer_right);
 8003942:	490a      	ldr	r1, [pc, #40]	; (800396c <updatePeriod+0x70>)
 8003944:	480a      	ldr	r0, [pc, #40]	; (8003970 <updatePeriod+0x74>)
 8003946:	f7fe fcf3 	bl	8002330 <TIM_TimeBaseInit>
	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 800394a:	2101      	movs	r1, #1
 800394c:	4808      	ldr	r0, [pc, #32]	; (8003970 <updatePeriod+0x74>)
 800394e:	f7fe fdd5 	bl	80024fc <TIM_ClearITPendingBit>
	TIM_Cmd(TIM3, ENABLE);
 8003952:	2101      	movs	r1, #1
 8003954:	4806      	ldr	r0, [pc, #24]	; (8003970 <updatePeriod+0x74>)
 8003956:	f7fe fd63 	bl	8002420 <TIM_Cmd>
	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 800395a:	2201      	movs	r2, #1
 800395c:	2101      	movs	r1, #1
 800395e:	4804      	ldr	r0, [pc, #16]	; (8003970 <updatePeriod+0x74>)
 8003960:	f7fe fd7e 	bl	8002460 <TIM_ITConfig>
}
 8003964:	bf00      	nop
 8003966:	bd80      	pop	{r7, pc}
 8003968:	200000e8 	.word	0x200000e8
 800396c:	200000f4 	.word	0x200000f4
 8003970:	40000400 	.word	0x40000400

08003974 <buttonHandler>:

//___________________________________________EXTERNAL__HANDLERS___________________________________________
// Module 3: ISR of the button
void buttonHandler() {
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
	// when auxiliary bit is set changes correlation, when not set changes speed
	if (GPIO_ReadInputDataBit(GPIOG, GPIO_Pin_9) == Bit_SET) {
 8003978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800397c:	4838      	ldr	r0, [pc, #224]	; (8003a60 <buttonHandler+0xec>)
 800397e:	f7fd ff5b 	bl	8001838 <GPIO_ReadInputDataBit>
 8003982:	4603      	mov	r3, r0
 8003984:	2b01      	cmp	r3, #1
 8003986:	d140      	bne.n	8003a0a <buttonHandler+0x96>
		if (speed == 0) {
 8003988:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <buttonHandler+0xf0>)
 800398a:	edd3 7a00 	vldr	s15, [r3]
 800398e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003996:	d10a      	bne.n	80039ae <buttonHandler+0x3a>
			status_high = 0;
 8003998:	4b33      	ldr	r3, [pc, #204]	; (8003a68 <buttonHandler+0xf4>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
			correlation_ptr = 0;
 800399e:	4b33      	ldr	r3, [pc, #204]	; (8003a6c <buttonHandler+0xf8>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
			correlation = 1;
 80039a4:	4b32      	ldr	r3, [pc, #200]	; (8003a70 <buttonHandler+0xfc>)
 80039a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	e053      	b.n	8003a56 <buttonHandler+0xe2>
		} else {
			if (status_high % 2 == 0) correlation_ptr++;
 80039ae:	4b2e      	ldr	r3, [pc, #184]	; (8003a68 <buttonHandler+0xf4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d105      	bne.n	80039c6 <buttonHandler+0x52>
 80039ba:	4b2c      	ldr	r3, [pc, #176]	; (8003a6c <buttonHandler+0xf8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3301      	adds	r3, #1
 80039c0:	4a2a      	ldr	r2, [pc, #168]	; (8003a6c <buttonHandler+0xf8>)
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	e004      	b.n	80039d0 <buttonHandler+0x5c>
			else correlation_ptr--;
 80039c6:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <buttonHandler+0xf8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	4a27      	ldr	r2, [pc, #156]	; (8003a6c <buttonHandler+0xf8>)
 80039ce:	6013      	str	r3, [r2, #0]

			if (correlation_ptr == 4 || correlation_ptr == 0) {
 80039d0:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <buttonHandler+0xf8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d003      	beq.n	80039e0 <buttonHandler+0x6c>
 80039d8:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <buttonHandler+0xf8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10b      	bne.n	80039f8 <buttonHandler+0x84>
				status_high++;
 80039e0:	4b21      	ldr	r3, [pc, #132]	; (8003a68 <buttonHandler+0xf4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	4a20      	ldr	r2, [pc, #128]	; (8003a68 <buttonHandler+0xf4>)
 80039e8:	6013      	str	r3, [r2, #0]
				if (status_high == 4) status_high = 0;
 80039ea:	4b1f      	ldr	r3, [pc, #124]	; (8003a68 <buttonHandler+0xf4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d102      	bne.n	80039f8 <buttonHandler+0x84>
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <buttonHandler+0xf4>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
			}

			correlation = correlations[correlation_ptr];
 80039f8:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <buttonHandler+0xf8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1d      	ldr	r2, [pc, #116]	; (8003a74 <buttonHandler+0x100>)
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1a      	ldr	r2, [pc, #104]	; (8003a70 <buttonHandler+0xfc>)
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	e025      	b.n	8003a56 <buttonHandler+0xe2>
		}
	} else {
		if (status_low == 0) speed_ptr++;
 8003a0a:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <buttonHandler+0x104>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d105      	bne.n	8003a1e <buttonHandler+0xaa>
 8003a12:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <buttonHandler+0x108>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3301      	adds	r3, #1
 8003a18:	4a18      	ldr	r2, [pc, #96]	; (8003a7c <buttonHandler+0x108>)
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	e004      	b.n	8003a28 <buttonHandler+0xb4>
		else speed_ptr--;
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <buttonHandler+0x108>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	4a15      	ldr	r2, [pc, #84]	; (8003a7c <buttonHandler+0x108>)
 8003a26:	6013      	str	r3, [r2, #0]

		if (speed_ptr == 5) status_low = 1;
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <buttonHandler+0x108>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d103      	bne.n	8003a38 <buttonHandler+0xc4>
 8003a30:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <buttonHandler+0x104>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e006      	b.n	8003a46 <buttonHandler+0xd2>
		else if (speed_ptr == 0) status_low = 0;
 8003a38:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <buttonHandler+0x108>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <buttonHandler+0xd2>
 8003a40:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <buttonHandler+0x104>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]

		speed = speeds[speed_ptr];
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <buttonHandler+0x108>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <buttonHandler+0x10c>)
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <buttonHandler+0xf0>)
 8003a54:	6013      	str	r3, [r2, #0]
	}
	updatePeriod();
 8003a56:	f7ff ff51 	bl	80038fc <updatePeriod>
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40021800 	.word	0x40021800
 8003a64:	2000009c 	.word	0x2000009c
 8003a68:	200000ac 	.word	0x200000ac
 8003a6c:	200000a4 	.word	0x200000a4
 8003a70:	2000002c 	.word	0x2000002c
 8003a74:	20000030 	.word	0x20000030
 8003a78:	200000a8 	.word	0x200000a8
 8003a7c:	200000a0 	.word	0x200000a0
 8003a80:	20000014 	.word	0x20000014

08003a84 <EXTI0_IRQHandler>:

// calculate period of left wheel PWM
void EXTI0_IRQHandler() {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
	if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	f7fd fcd4 	bl	8001438 <EXTI_GetITStatus>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d021      	beq.n	8003ada <EXTI0_IRQHandler+0x56>
		EXTI_ClearITPendingBit(EXTI_Line0);
 8003a96:	2001      	movs	r0, #1
 8003a98:	f7fd fce8 	bl	800146c <EXTI_ClearITPendingBit>
		uint32_t currentTime = TIM_GetCounter(TIM5);
 8003a9c:	4811      	ldr	r0, [pc, #68]	; (8003ae4 <EXTI0_IRQHandler+0x60>)
 8003a9e:	f7fe fcb3 	bl	8002408 <TIM_GetCounter>
 8003aa2:	6078      	str	r0, [r7, #4]
		lastChange = 0;
 8003aa4:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <EXTI0_IRQHandler+0x64>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]

		if (currentTime > lastPwmTimeL) pwmPeriodL = currentTime - lastPwmTimeL;
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <EXTI0_IRQHandler+0x68>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d906      	bls.n	8003ac2 <EXTI0_IRQHandler+0x3e>
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <EXTI0_IRQHandler+0x68>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	4a0c      	ldr	r2, [pc, #48]	; (8003af0 <EXTI0_IRQHandler+0x6c>)
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	e008      	b.n	8003ad4 <EXTI0_IRQHandler+0x50>
		else pwmPeriodL = currentTime + (0xFFFF - lastPwmTimeL);
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <EXTI0_IRQHandler+0x68>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003ace:	33ff      	adds	r3, #255	; 0xff
 8003ad0:	4a07      	ldr	r2, [pc, #28]	; (8003af0 <EXTI0_IRQHandler+0x6c>)
 8003ad2:	6013      	str	r3, [r2, #0]

		lastPwmTimeL = currentTime;
 8003ad4:	4a05      	ldr	r2, [pc, #20]	; (8003aec <EXTI0_IRQHandler+0x68>)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6013      	str	r3, [r2, #0]

	/*if (EXTI_GetITStatus(EXTI_Line10) != RESET && GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0) == Bit_RESET) {
		EXTI_ClearITPendingBit(EXTI_Line0);
		buttonHandler();
	}*/
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40000c00 	.word	0x40000c00
 8003ae8:	20000098 	.word	0x20000098
 8003aec:	200000b0 	.word	0x200000b0
 8003af0:	20000044 	.word	0x20000044

08003af4 <EXTI1_IRQHandler>:


// calculate period of right wheel PWM
void EXTI1_IRQHandler() {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
	if (EXTI_GetITStatus(EXTI_Line1) != RESET) {
 8003afa:	2002      	movs	r0, #2
 8003afc:	f7fd fc9c 	bl	8001438 <EXTI_GetITStatus>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d021      	beq.n	8003b4a <EXTI1_IRQHandler+0x56>
		EXTI_ClearITPendingBit(EXTI_Line1);
 8003b06:	2002      	movs	r0, #2
 8003b08:	f7fd fcb0 	bl	800146c <EXTI_ClearITPendingBit>
		uint32_t currentTime = TIM_GetCounter(TIM5);
 8003b0c:	4811      	ldr	r0, [pc, #68]	; (8003b54 <EXTI1_IRQHandler+0x60>)
 8003b0e:	f7fe fc7b 	bl	8002408 <TIM_GetCounter>
 8003b12:	6078      	str	r0, [r7, #4]
		lastChange = 0;
 8003b14:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <EXTI1_IRQHandler+0x64>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]

		if (currentTime > lastPwmTimeR) pwmPeriodR = currentTime - lastPwmTimeR;
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <EXTI1_IRQHandler+0x68>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d906      	bls.n	8003b32 <EXTI1_IRQHandler+0x3e>
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <EXTI1_IRQHandler+0x68>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	4a0c      	ldr	r2, [pc, #48]	; (8003b60 <EXTI1_IRQHandler+0x6c>)
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	e008      	b.n	8003b44 <EXTI1_IRQHandler+0x50>
		else pwmPeriodR = currentTime + (0xFFFF - lastPwmTimeR);
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <EXTI1_IRQHandler+0x68>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003b3e:	33ff      	adds	r3, #255	; 0xff
 8003b40:	4a07      	ldr	r2, [pc, #28]	; (8003b60 <EXTI1_IRQHandler+0x6c>)
 8003b42:	6013      	str	r3, [r2, #0]

		lastPwmTimeR = currentTime;
 8003b44:	4a05      	ldr	r2, [pc, #20]	; (8003b5c <EXTI1_IRQHandler+0x68>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6013      	str	r3, [r2, #0]
	}
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40000c00 	.word	0x40000c00
 8003b58:	20000098 	.word	0x20000098
 8003b5c:	200000b4 	.word	0x200000b4
 8003b60:	20000048 	.word	0x20000048

08003b64 <initPorts>:



//___________________________________________CONFIG___________________________________________
// function to initialize all ports
void initPorts() {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
	// Enable SYSCFG clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8003b68:	2101      	movs	r1, #1
 8003b6a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b6e:	f7fe fa05 	bl	8001f7c <RCC_APB2PeriphClockCmd>

	// Config input port to listen pwms (PC0 & PC1)
	initPwmListeners();
 8003b72:	f000 f809 	bl	8003b88 <initPwmListeners>
	// Config wheel sensors PWM's (PG2 & PG3) & auxiliary pin for button (PG9)
	initPwm();
 8003b76:	f000 f859 	bl	8003c2c <initPwm>
	// Config button (PA0)
	initButton();
 8003b7a:	f000 f889 	bl	8003c90 <initButton>
	// Config Vc signal (PF0)
	initDACOut();
 8003b7e:	f000 f89f 	bl	8003cc0 <initDACOut>
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <initPwmListeners>:

// Module 2: Config input port to listen pwms (PC0 & PC1)
void initPwmListeners() {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8003b8e:	2101      	movs	r1, #1
 8003b90:	2004      	movs	r0, #4
 8003b92:	f7fe f993 	bl	8001ebc <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef gpioStructure;
	gpioStructure.GPIO_Pin = GPIO_Pin_0;
 8003b96:	2301      	movs	r3, #1
 8003b98:	613b      	str	r3, [r7, #16]
	gpioStructure.GPIO_Mode = GPIO_Mode_IN;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	753b      	strb	r3, [r7, #20]
	gpioStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	757b      	strb	r3, [r7, #21]
	gpioStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOC, &gpioStructure);
 8003ba6:	f107 0310 	add.w	r3, r7, #16
 8003baa:	4619      	mov	r1, r3
 8003bac:	481e      	ldr	r0, [pc, #120]	; (8003c28 <initPwmListeners+0xa0>)
 8003bae:	f7fd fdb5 	bl	800171c <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource0);
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	2002      	movs	r0, #2
 8003bb6:	f7fe fb79 	bl	80022ac <SYSCFG_EXTILineConfig>

	EXTI_InitTypeDef extiStructure;
	extiStructure.EXTI_Line = EXTI_Line0;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	60bb      	str	r3, [r7, #8]
	extiStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	733b      	strb	r3, [r7, #12]
	extiStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	737b      	strb	r3, [r7, #13]
	extiStructure.EXTI_LineCmd = ENABLE;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&extiStructure);
 8003bca:	f107 0308 	add.w	r3, r7, #8
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fd fbc0 	bl	8001354 <EXTI_Init>

	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8003bd4:	2306      	movs	r3, #6
 8003bd6:	713b      	strb	r3, [r7, #4]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	717b      	strb	r3, [r7, #5]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	71bb      	strb	r3, [r7, #6]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8003be0:	2301      	movs	r3, #1
 8003be2:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&nvicStructure);
 8003be4:	1d3b      	adds	r3, r7, #4
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fc ffec 	bl	8000bc4 <NVIC_Init>

	gpioStructure.GPIO_Pin = GPIO_Pin_1;
 8003bec:	2302      	movs	r3, #2
 8003bee:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOC, &gpioStructure);
 8003bf0:	f107 0310 	add.w	r3, r7, #16
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	480c      	ldr	r0, [pc, #48]	; (8003c28 <initPwmListeners+0xa0>)
 8003bf8:	f7fd fd90 	bl	800171c <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource1);
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	2002      	movs	r0, #2
 8003c00:	f7fe fb54 	bl	80022ac <SYSCFG_EXTILineConfig>

	extiStructure.EXTI_Line = EXTI_Line1;
 8003c04:	2302      	movs	r3, #2
 8003c06:	60bb      	str	r3, [r7, #8]
	EXTI_Init(&extiStructure);
 8003c08:	f107 0308 	add.w	r3, r7, #8
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fd fba1 	bl	8001354 <EXTI_Init>

	nvicStructure.NVIC_IRQChannel = EXTI1_IRQn;
 8003c12:	2307      	movs	r3, #7
 8003c14:	713b      	strb	r3, [r7, #4]
	NVIC_Init(&nvicStructure);
 8003c16:	1d3b      	adds	r3, r7, #4
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fc ffd3 	bl	8000bc4 <NVIC_Init>
}
 8003c1e:	bf00      	nop
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40020800 	.word	0x40020800

08003c2c <initPwm>:
// Module 3: Config wheel sensors PWM's (PG2 & PG3) & auxiliary pin for button (PG9)
void initPwm() {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8003c32:	2101      	movs	r1, #1
 8003c34:	2040      	movs	r0, #64	; 0x40
 8003c36:	f7fe f941 	bl	8001ebc <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef gpioStructure;
	gpioStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8003c3a:	230c      	movs	r3, #12
 8003c3c:	603b      	str	r3, [r7, #0]
	gpioStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	713b      	strb	r3, [r7, #4]
	gpioStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003c42:	2302      	movs	r3, #2
 8003c44:	717b      	strb	r3, [r7, #5]
	gpioStructure.GPIO_OType = GPIO_OType_PP;
 8003c46:	2300      	movs	r3, #0
 8003c48:	71bb      	strb	r3, [r7, #6]
	gpioStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOG, &gpioStructure);
 8003c4e:	463b      	mov	r3, r7
 8003c50:	4619      	mov	r1, r3
 8003c52:	480e      	ldr	r0, [pc, #56]	; (8003c8c <initPwm+0x60>)
 8003c54:	f7fd fd62 	bl	800171c <GPIO_Init>
	GPIO_ResetBits(GPIOG, GPIO_Pin_2);
 8003c58:	2104      	movs	r1, #4
 8003c5a:	480c      	ldr	r0, [pc, #48]	; (8003c8c <initPwm+0x60>)
 8003c5c:	f7fd fe15 	bl	800188a <GPIO_ResetBits>
	GPIO_ResetBits(GPIOG, GPIO_Pin_3);
 8003c60:	2108      	movs	r1, #8
 8003c62:	480a      	ldr	r0, [pc, #40]	; (8003c8c <initPwm+0x60>)
 8003c64:	f7fd fe11 	bl	800188a <GPIO_ResetBits>

	gpioStructure.GPIO_Pin = GPIO_Pin_9;
 8003c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c6c:	603b      	str	r3, [r7, #0]
	gpioStructure.GPIO_Mode = GPIO_Mode_IN;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	713b      	strb	r3, [r7, #4]
	gpioStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003c72:	2302      	movs	r3, #2
 8003c74:	717b      	strb	r3, [r7, #5]
	gpioStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003c76:	2301      	movs	r3, #1
 8003c78:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOG, &gpioStructure);
 8003c7a:	463b      	mov	r3, r7
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4803      	ldr	r0, [pc, #12]	; (8003c8c <initPwm+0x60>)
 8003c80:	f7fd fd4c 	bl	800171c <GPIO_Init>
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40021800 	.word	0x40021800

08003c90 <initButton>:

// Module 3: Config button (PA0)
void initButton() {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003c96:	2101      	movs	r1, #1
 8003c98:	2001      	movs	r0, #1
 8003c9a:	f7fe f90f 	bl	8001ebc <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef buttonStructure;
	buttonStructure.GPIO_Pin = GPIO_Pin_0;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	603b      	str	r3, [r7, #0]
	buttonStructure.GPIO_Mode = GPIO_Mode_IN;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	713b      	strb	r3, [r7, #4]
	buttonStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &buttonStructure);
 8003caa:	463b      	mov	r3, r7
 8003cac:	4619      	mov	r1, r3
 8003cae:	4803      	ldr	r0, [pc, #12]	; (8003cbc <initButton+0x2c>)
 8003cb0:	f7fd fd34 	bl	800171c <GPIO_Init>
	nvicStructure.NVIC_IRQChannel = EXTI0_IRQn;
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 4;
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&nvicStructure);*/
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40020000 	.word	0x40020000

08003cc0 <initDACOut>:

// Config GPIO for Vc analog signal and DAC
void initDACOut() {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003ccc:	f7fe f936 	bl	8001f3c <RCC_APB1PeriphClockCmd>

	// Config analog GPIO
	GPIO_InitTypeDef gpioStructure;
	gpioStructure.GPIO_Pin = GPIO_Pin_4;
 8003cd0:	2310      	movs	r3, #16
 8003cd2:	603b      	str	r3, [r7, #0]
	gpioStructure.GPIO_Mode = GPIO_Mode_AN;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	713b      	strb	r3, [r7, #4]
	gpioStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &gpioStructure);
 8003cdc:	463b      	mov	r3, r7
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4803      	ldr	r0, [pc, #12]	; (8003cf0 <initDACOut+0x30>)
 8003ce2:	f7fd fd1b 	bl	800171c <GPIO_Init>
	DAC_InitTypeDef dacStructure;
	DAC_StructInit(&dacStructure);
	DAC_Init(DAC_Channel_1, &dacStructure);
	DAC_Cmd(DAC_Channel_1, ENABLE);
	DAC_SoftwareTriggerCmd(DAC_Channel_1, ENABLE);*/
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40020000 	.word	0x40020000

08003cf4 <initTimer1ms>:

// Module 1: Initializes the timer to count up to 1ms and sets an interrupt for it
void initTimer1ms() {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	2004      	movs	r0, #4
 8003cfe:	f7fe f91d 	bl	8001f3c <RCC_APB1PeriphClockCmd>

    // Timer config
    TIM_TimeBaseInitTypeDef timerStructure;
    timerStructure.TIM_Prescaler = 1000 - 1;
 8003d02:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003d06:	80bb      	strh	r3, [r7, #4]
    timerStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	80fb      	strh	r3, [r7, #6]
    timerStructure.TIM_Period = 90 - 1;
 8003d0c:	2359      	movs	r3, #89	; 0x59
 8003d0e:	60bb      	str	r3, [r7, #8]
    timerStructure.TIM_ClockDivision = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM4, &timerStructure);
 8003d14:	1d3b      	adds	r3, r7, #4
 8003d16:	4619      	mov	r1, r3
 8003d18:	480f      	ldr	r0, [pc, #60]	; (8003d58 <initTimer1ms+0x64>)
 8003d1a:	f7fe fb09 	bl	8002330 <TIM_TimeBaseInit>

    // Interrupt config
    NVIC_InitTypeDef nvicStructure;
    nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 8003d1e:	231e      	movs	r3, #30
 8003d20:	703b      	strb	r3, [r7, #0]
    nvicStructure.NVIC_IRQChannelPreemptionPriority = 5;
 8003d22:	2305      	movs	r3, #5
 8003d24:	707b      	strb	r3, [r7, #1]
    nvicStructure.NVIC_IRQChannelSubPriority = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	70bb      	strb	r3, [r7, #2]
    nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	70fb      	strb	r3, [r7, #3]
    NVIC_Init(&nvicStructure);
 8003d2e:	463b      	mov	r3, r7
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc ff47 	bl	8000bc4 <NVIC_Init>

    TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8003d36:	2101      	movs	r1, #1
 8003d38:	4807      	ldr	r0, [pc, #28]	; (8003d58 <initTimer1ms+0x64>)
 8003d3a:	f7fe fbdf 	bl	80024fc <TIM_ClearITPendingBit>
    TIM_Cmd(TIM4, ENABLE);
 8003d3e:	2101      	movs	r1, #1
 8003d40:	4805      	ldr	r0, [pc, #20]	; (8003d58 <initTimer1ms+0x64>)
 8003d42:	f7fe fb6d 	bl	8002420 <TIM_Cmd>
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8003d46:	2201      	movs	r2, #1
 8003d48:	2101      	movs	r1, #1
 8003d4a:	4803      	ldr	r0, [pc, #12]	; (8003d58 <initTimer1ms+0x64>)
 8003d4c:	f7fe fb88 	bl	8002460 <TIM_ITConfig>
}
 8003d50:	bf00      	nop
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40000800 	.word	0x40000800

08003d5c <initFreeTimer>:

// Module 2: Initializes the timer as a free-running timer
void initFreeTimer() {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 8003d62:	2101      	movs	r1, #1
 8003d64:	2008      	movs	r0, #8
 8003d66:	f7fe f8e9 	bl	8001f3c <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerStructure;
	timerStructure.TIM_Prescaler = 90 - 1;
 8003d6a:	2359      	movs	r3, #89	; 0x59
 8003d6c:	80bb      	strh	r3, [r7, #4]
	timerStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	80fb      	strh	r3, [r7, #6]
	timerStructure.TIM_Period = 0xFFFF;
 8003d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d76:	60bb      	str	r3, [r7, #8]
	timerStructure.TIM_ClockDivision = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM5, &timerStructure);
 8003d7c:	1d3b      	adds	r3, r7, #4
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4809      	ldr	r0, [pc, #36]	; (8003da8 <initFreeTimer+0x4c>)
 8003d82:	f7fe fad5 	bl	8002330 <TIM_TimeBaseInit>

	TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 8003d86:	2101      	movs	r1, #1
 8003d88:	4807      	ldr	r0, [pc, #28]	; (8003da8 <initFreeTimer+0x4c>)
 8003d8a:	f7fe fbb7 	bl	80024fc <TIM_ClearITPendingBit>
	TIM_Cmd(TIM5, ENABLE);
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4805      	ldr	r0, [pc, #20]	; (8003da8 <initFreeTimer+0x4c>)
 8003d92:	f7fe fb45 	bl	8002420 <TIM_Cmd>
	TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);
 8003d96:	2201      	movs	r2, #1
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4803      	ldr	r0, [pc, #12]	; (8003da8 <initFreeTimer+0x4c>)
 8003d9c:	f7fe fb60 	bl	8002460 <TIM_ITConfig>
}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40000c00 	.word	0x40000c00

08003dac <initTimersPwm>:

// Module 3: Initializes the timer for each sensor PWM and sets an interrupt to each one
void initTimersPwm() {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8003db2:	2101      	movs	r1, #1
 8003db4:	2001      	movs	r0, #1
 8003db6:	f7fe f8c1 	bl	8001f3c <RCC_APB1PeriphClockCmd>

	// Left timer config
	timer_left.TIM_Prescaler = 90 - 1;
 8003dba:	4b32      	ldr	r3, [pc, #200]	; (8003e84 <initTimersPwm+0xd8>)
 8003dbc:	2259      	movs	r2, #89	; 0x59
 8003dbe:	801a      	strh	r2, [r3, #0]
	timer_left.TIM_CounterMode = TIM_CounterMode_Up;
 8003dc0:	4b30      	ldr	r3, [pc, #192]	; (8003e84 <initTimersPwm+0xd8>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	805a      	strh	r2, [r3, #2]
	timer_left.TIM_Period = getPeriod(0);
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	f7ff fd74 	bl	80038b4 <getPeriod>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b2d      	ldr	r3, [pc, #180]	; (8003e84 <initTimersPwm+0xd8>)
 8003dd0:	605a      	str	r2, [r3, #4]
	timer_left.TIM_ClockDivision = 0;
 8003dd2:	4b2c      	ldr	r3, [pc, #176]	; (8003e84 <initTimersPwm+0xd8>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	811a      	strh	r2, [r3, #8]
	TIM_TimeBaseInit(TIM2, &timer_left);
 8003dd8:	492a      	ldr	r1, [pc, #168]	; (8003e84 <initTimersPwm+0xd8>)
 8003dda:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003dde:	f7fe faa7 	bl	8002330 <TIM_TimeBaseInit>

	// Left timer interrupt config
	NVIC_InitTypeDef nvicStructure2;
	nvicStructure2.NVIC_IRQChannel = TIM2_IRQn;
 8003de2:	231c      	movs	r3, #28
 8003de4:	713b      	strb	r3, [r7, #4]
	nvicStructure2.NVIC_IRQChannelPreemptionPriority = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	717b      	strb	r3, [r7, #5]
	nvicStructure2.NVIC_IRQChannelSubPriority = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	71bb      	strb	r3, [r7, #6]
	nvicStructure2.NVIC_IRQChannelCmd = ENABLE;
 8003dee:	2301      	movs	r3, #1
 8003df0:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&nvicStructure2);
 8003df2:	1d3b      	adds	r3, r7, #4
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fc fee5 	bl	8000bc4 <NVIC_Init>

	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003e00:	f7fe fb7c 	bl	80024fc <TIM_ClearITPendingBit>
	TIM_Cmd(TIM2, ENABLE);
 8003e04:	2101      	movs	r1, #1
 8003e06:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003e0a:	f7fe fb09 	bl	8002420 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8003e0e:	2201      	movs	r2, #1
 8003e10:	2101      	movs	r1, #1
 8003e12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003e16:	f7fe fb23 	bl	8002460 <TIM_ITConfig>

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	2002      	movs	r0, #2
 8003e1e:	f7fe f88d 	bl	8001f3c <RCC_APB1PeriphClockCmd>

    // Right timer config
    timer_right.TIM_Prescaler = 90 - 1;
 8003e22:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <initTimersPwm+0xdc>)
 8003e24:	2259      	movs	r2, #89	; 0x59
 8003e26:	801a      	strh	r2, [r3, #0]
    timer_right.TIM_CounterMode = TIM_CounterMode_Up;
 8003e28:	4b17      	ldr	r3, [pc, #92]	; (8003e88 <initTimersPwm+0xdc>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	805a      	strh	r2, [r3, #2]
    timer_right.TIM_Period = getPeriod(1);
 8003e2e:	2001      	movs	r0, #1
 8003e30:	f7ff fd40 	bl	80038b4 <getPeriod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <initTimersPwm+0xdc>)
 8003e38:	605a      	str	r2, [r3, #4]
    timer_right.TIM_ClockDivision = 0;
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <initTimersPwm+0xdc>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	811a      	strh	r2, [r3, #8]
    TIM_TimeBaseInit(TIM3, &timer_right);
 8003e40:	4911      	ldr	r1, [pc, #68]	; (8003e88 <initTimersPwm+0xdc>)
 8003e42:	4812      	ldr	r0, [pc, #72]	; (8003e8c <initTimersPwm+0xe0>)
 8003e44:	f7fe fa74 	bl	8002330 <TIM_TimeBaseInit>

    // Right timer interrupt config
	NVIC_InitTypeDef nvicStructure;
    nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 8003e48:	231d      	movs	r3, #29
 8003e4a:	703b      	strb	r3, [r7, #0]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	707b      	strb	r3, [r7, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	70bb      	strb	r3, [r7, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8003e54:	2301      	movs	r3, #1
 8003e56:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&nvicStructure);
 8003e58:	463b      	mov	r3, r7
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fc feb2 	bl	8000bc4 <NVIC_Init>

	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8003e60:	2101      	movs	r1, #1
 8003e62:	480a      	ldr	r0, [pc, #40]	; (8003e8c <initTimersPwm+0xe0>)
 8003e64:	f7fe fb4a 	bl	80024fc <TIM_ClearITPendingBit>
	TIM_Cmd(TIM3, ENABLE);
 8003e68:	2101      	movs	r1, #1
 8003e6a:	4808      	ldr	r0, [pc, #32]	; (8003e8c <initTimersPwm+0xe0>)
 8003e6c:	f7fe fad8 	bl	8002420 <TIM_Cmd>
	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8003e70:	2201      	movs	r2, #1
 8003e72:	2101      	movs	r1, #1
 8003e74:	4805      	ldr	r0, [pc, #20]	; (8003e8c <initTimersPwm+0xe0>)
 8003e76:	f7fe faf3 	bl	8002460 <TIM_ITConfig>
}
 8003e7a:	bf00      	nop
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	200000e8 	.word	0x200000e8
 8003e88:	200000f4 	.word	0x200000f4
 8003e8c:	40000400 	.word	0x40000400

08003e90 <sEE_TIMEOUT_UserCallback>:
/*
 * Callback used by stm324xg_eval_i2c_ee.c.
 * Refer to stm324xg_eval_i2c_ee.h for more info.
 */
uint32_t sEE_TIMEOUT_UserCallback(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  while (1)
 8003e94:	e7fe      	b.n	8003e94 <sEE_TIMEOUT_UserCallback+0x4>
	...

08003e98 <initSamples>:
Sample samplesCopy[8];
int sampleCounter = 0;
int send = 0, startSamples = 1;

// Enable ADC1, DMA2 and GPIO clocks
void initSamples() {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b0ac      	sub	sp, #176	; 0xb0
 8003e9c:	af00      	add	r7, sp, #0
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003ea4:	f7fe f80a 	bl	8001ebc <RCC_AHB1PeriphClockCmd>

    // DMA2 Stream0 channel0  peripheral to memory
    DMA_InitTypeDef DMA_InitStructure;
    DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	677b      	str	r3, [r7, #116]	; 0x74
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &(ADC1->DR) ; // Peripheral @ - ADC1_DR_ADDRESS
 8003eac:	4b62      	ldr	r3, [pc, #392]	; (8004038 <initSamples+0x1a0>)
 8003eae:	67bb      	str	r3, [r7, #120]	; 0x78
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) &samples; // Memory @
 8003eb0:	4b62      	ldr	r3, [pc, #392]	; (800403c <initSamples+0x1a4>)
 8003eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory; // transfer from peripheral to memory
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    DMA_InitStructure.DMA_BufferSize = 16; // closest to 12 bits form the ADC
 8003eba:	2310      	movs	r3, #16
 8003ebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // Not increment peripheral @ (always same port)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Increment memory @ (increment arr pos)
 8003ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord; // 2 bytes(16 bits) data size
 8003ece:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; // 2 bytes(16 bits) data size
 8003ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; // circular mode
 8003ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ee2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8003ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable; // Direct mode enabled
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull; // doesnt matter
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;  // not needed
 8003efa:	2300      	movs	r3, #0
 8003efc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single; // not needed
 8003f00:	2300      	movs	r3, #0
 8003f02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 8003f06:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	484c      	ldr	r0, [pc, #304]	; (8004040 <initSamples+0x1a8>)
 8003f0e:	f7fd f883 	bl	8001018 <DMA_Init>
    DMA_Cmd(DMA2_Stream0, ENABLE);
 8003f12:	2101      	movs	r1, #1
 8003f14:	484a      	ldr	r0, [pc, #296]	; (8004040 <initSamples+0x1a8>)
 8003f16:	f7fd f8d7 	bl	80010c8 <DMA_Cmd>

    // DMA2 Stream1 channel1 memory to memory
	DMA_InitTypeDef DMA_InitStructure2;
	DMA_InitStructure2.DMA_Channel = DMA_Channel_1; // channel 3
 8003f1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f1e:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStructure2.DMA_PeripheralBaseAddr = (uint32_t) &samples[0];
 8003f20:	4b46      	ldr	r3, [pc, #280]	; (800403c <initSamples+0x1a4>)
 8003f22:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_InitStructure2.DMA_Memory0BaseAddr = (uint32_t) &samplesCopy[0];
 8003f24:	4b47      	ldr	r3, [pc, #284]	; (8004044 <initSamples+0x1ac>)
 8003f26:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_InitStructure2.DMA_DIR = DMA_DIR_MemoryToMemory;
 8003f28:	2380      	movs	r3, #128	; 0x80
 8003f2a:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_InitStructure2.DMA_BufferSize = 16;
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_InitStructure2.DMA_PeripheralInc = DMA_PeripheralInc_Enable;
 8003f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f34:	64fb      	str	r3, [r7, #76]	; 0x4c
	DMA_InitStructure2.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f3a:	653b      	str	r3, [r7, #80]	; 0x50
	DMA_InitStructure2.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8003f3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f40:	657b      	str	r3, [r7, #84]	; 0x54
	DMA_InitStructure2.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8003f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f46:	65bb      	str	r3, [r7, #88]	; 0x58
	DMA_InitStructure2.DMA_Mode = DMA_Mode_Normal;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
	DMA_InitStructure2.DMA_Priority = DMA_Priority_High;
 8003f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f50:	663b      	str	r3, [r7, #96]	; 0x60
	DMA_InitStructure2.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8003f52:	2304      	movs	r3, #4
 8003f54:	667b      	str	r3, [r7, #100]	; 0x64
	DMA_InitStructure2.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8003f56:	2303      	movs	r3, #3
 8003f58:	66bb      	str	r3, [r7, #104]	; 0x68
	DMA_InitStructure2.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
	DMA_InitStructure2.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	673b      	str	r3, [r7, #112]	; 0x70
	DMA_Init(DMA2_Stream1, &DMA_InitStructure2);
 8003f62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f66:	4619      	mov	r1, r3
 8003f68:	4837      	ldr	r0, [pc, #220]	; (8004048 <initSamples+0x1b0>)
 8003f6a:	f7fd f855 	bl	8001018 <DMA_Init>

	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream1_IRQn;
 8003f6e:	2339      	movs	r3, #57	; 0x39
 8003f70:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8003f74:	2302      	movs	r3, #2
 8003f76:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003f80:	2301      	movs	r3, #1
 8003f82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	NVIC_Init(&NVIC_InitStructure);
 8003f86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fc fe1a 	bl	8000bc4 <NVIC_Init>

	DMA_ITConfig(DMA2_Stream1, DMA_IT_TC, ENABLE);
 8003f90:	2201      	movs	r2, #1
 8003f92:	2110      	movs	r1, #16
 8003f94:	482c      	ldr	r0, [pc, #176]	; (8004048 <initSamples+0x1b0>)
 8003f96:	f7fd f91d 	bl	80011d4 <DMA_ITConfig>

    // Init PA1 & PA2(ADC123_IN1 & IN2) as analog
	GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2;
 8003f9a:	2306      	movs	r3, #6
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4826      	ldr	r0, [pc, #152]	; (800404c <initSamples+0x1b4>)
 8003fb2:	f7fd fbb3 	bl	800171c <GPIO_Init>

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003fbc:	f7fd ffde 	bl	8001f7c <RCC_APB2PeriphClockCmd>

    ADC_CommonInitTypeDef ADC_CommonInitStructure;
    ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61fb      	str	r3, [r7, #28]
    ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	623b      	str	r3, [r7, #32]
    ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
    ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
    ADC_CommonInit(&ADC_CommonInitStructure);
 8003fd0:	f107 031c 	add.w	r3, r7, #28
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fc fead 	bl	8000d34 <ADC_CommonInit>

    ADC_InitTypeDef ADC_InitStructure;
    ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	607b      	str	r3, [r7, #4]
    ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	723b      	strb	r3, [r7, #8]
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	727b      	strb	r3, [r7, #9]
    ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8003fea:	2300      	movs	r3, #0
 8003fec:	613b      	str	r3, [r7, #16]
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
    ADC_InitStructure.ADC_NbrOfConversion = 2;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	763b      	strb	r3, [r7, #24]
    ADC_Init(ADC1, &ADC_InitStructure);
 8003ff6:	1d3b      	adds	r3, r7, #4
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4815      	ldr	r0, [pc, #84]	; (8004050 <initSamples+0x1b8>)
 8003ffc:	f7fc fe44 	bl	8000c88 <ADC_Init>

    // ADC3 regular channel1 and 2 configuration
    ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_112Cycles);
 8004000:	2305      	movs	r3, #5
 8004002:	2201      	movs	r2, #1
 8004004:	2101      	movs	r1, #1
 8004006:	4812      	ldr	r0, [pc, #72]	; (8004050 <initSamples+0x1b8>)
 8004008:	f7fc fed8 	bl	8000dbc <ADC_RegularChannelConfig>
    ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 2, ADC_SampleTime_112Cycles);
 800400c:	2305      	movs	r3, #5
 800400e:	2202      	movs	r2, #2
 8004010:	2102      	movs	r1, #2
 8004012:	480f      	ldr	r0, [pc, #60]	; (8004050 <initSamples+0x1b8>)
 8004014:	f7fc fed2 	bl	8000dbc <ADC_RegularChannelConfig>

    // Enable DMA request after last transfer
    ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
 8004018:	2101      	movs	r1, #1
 800401a:	480d      	ldr	r0, [pc, #52]	; (8004050 <initSamples+0x1b8>)
 800401c:	f7fc ffc4 	bl	8000fa8 <ADC_DMARequestAfterLastTransferCmd>

    // Enable ADC1 DMA & ADC1
    ADC_DMACmd(ADC1, ENABLE);
 8004020:	2101      	movs	r1, #1
 8004022:	480b      	ldr	r0, [pc, #44]	; (8004050 <initSamples+0x1b8>)
 8004024:	f7fc ffa4 	bl	8000f70 <ADC_DMACmd>
    ADC_Cmd(ADC1, ENABLE);
 8004028:	2101      	movs	r1, #1
 800402a:	4809      	ldr	r0, [pc, #36]	; (8004050 <initSamples+0x1b8>)
 800402c:	f7fc feaa 	bl	8000d84 <ADC_Cmd>

}
 8004030:	bf00      	nop
 8004032:	37b0      	adds	r7, #176	; 0xb0
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	4001204c 	.word	0x4001204c
 800403c:	2000004c 	.word	0x2000004c
 8004040:	40026410 	.word	0x40026410
 8004044:	20000128 	.word	0x20000128
 8004048:	40026428 	.word	0x40026428
 800404c:	40020000 	.word	0x40020000
 8004050:	40012000 	.word	0x40012000

08004054 <getMean>:

Sample2 getMean() {
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
	Sample2 res = {2, -2};
 800405a:	4b30      	ldr	r3, [pc, #192]	; (800411c <getMean+0xc8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < 8; i++) {
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e019      	b.n	800409a <getMean+0x46>
		res.sensorX += samplesCopy[i].sensorX;
 8004066:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800406a:	b29a      	uxth	r2, r3
 800406c:	492c      	ldr	r1, [pc, #176]	; (8004120 <getMean+0xcc>)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8004074:	4413      	add	r3, r2
 8004076:	b29b      	uxth	r3, r3
 8004078:	b21b      	sxth	r3, r3
 800407a:	80bb      	strh	r3, [r7, #4]
		res.sensorY += samplesCopy[i].sensorY;
 800407c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004080:	b29a      	uxth	r2, r3
 8004082:	4927      	ldr	r1, [pc, #156]	; (8004120 <getMean+0xcc>)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	885b      	ldrh	r3, [r3, #2]
 800408c:	4413      	add	r3, r2
 800408e:	b29b      	uxth	r3, r3
 8004090:	b21b      	sxth	r3, r3
 8004092:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 8; i++) {
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3301      	adds	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b07      	cmp	r3, #7
 800409e:	dde2      	ble.n	8004066 <getMean+0x12>
	}

	// 19856 = 2482 (2 V) * 8
	if (res.sensorX > 19856) res.sensorX = 4;
 80040a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80040a4:	f644 5290 	movw	r2, #19856	; 0x4d90
 80040a8:	4293      	cmp	r3, r2
 80040aa:	dd02      	ble.n	80040b2 <getMean+0x5e>
 80040ac:	2304      	movs	r3, #4
 80040ae:	80bb      	strh	r3, [r7, #4]
 80040b0:	e00d      	b.n	80040ce <getMean+0x7a>
	else res.sensorX = -4 + (res.sensorX / 2482); // formula is -4 + (x*8 / 2482)
 80040b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80040b6:	4a1b      	ldr	r2, [pc, #108]	; (8004124 <getMean+0xd0>)
 80040b8:	fb82 1203 	smull	r1, r2, r2, r3
 80040bc:	1252      	asrs	r2, r2, #9
 80040be:	17db      	asrs	r3, r3, #31
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	b21b      	sxth	r3, r3
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b04      	subs	r3, #4
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	b21b      	sxth	r3, r3
 80040cc:	80bb      	strh	r3, [r7, #4]

	if (res.sensorY > 19856) res.sensorY = 4;
 80040ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040d2:	f644 5290 	movw	r2, #19856	; 0x4d90
 80040d6:	4293      	cmp	r3, r2
 80040d8:	dd02      	ble.n	80040e0 <getMean+0x8c>
 80040da:	2304      	movs	r3, #4
 80040dc:	80fb      	strh	r3, [r7, #6]
 80040de:	e00d      	b.n	80040fc <getMean+0xa8>
	else res.sensorY = -4 + (res.sensorY / 2482);
 80040e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040e4:	4a0f      	ldr	r2, [pc, #60]	; (8004124 <getMean+0xd0>)
 80040e6:	fb82 1203 	smull	r1, r2, r2, r3
 80040ea:	1252      	asrs	r2, r2, #9
 80040ec:	17db      	asrs	r3, r3, #31
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	b21b      	sxth	r3, r3
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b04      	subs	r3, #4
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	b21b      	sxth	r3, r3
 80040fa:	80fb      	strh	r3, [r7, #6]

	return res;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	2300      	movs	r3, #0
 8004102:	893a      	ldrh	r2, [r7, #8]
 8004104:	f362 030f 	bfi	r3, r2, #0, #16
 8004108:	897a      	ldrh	r2, [r7, #10]
 800410a:	f362 431f 	bfi	r3, r2, #16, #16
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	08004fe4 	.word	0x08004fe4
 8004120:	20000128 	.word	0x20000128
 8004124:	34cf1c43 	.word	0x34cf1c43

08004128 <initTimerADC>:

void initTimerADC() {
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 800412e:	2101      	movs	r1, #1
 8004130:	2020      	movs	r0, #32
 8004132:	f7fd ff03 	bl	8001f3c <RCC_APB1PeriphClockCmd>

    TIM_TimeBaseInitTypeDef timerStructure;
    timerStructure.TIM_Prescaler = 10 - 1;
 8004136:	2309      	movs	r3, #9
 8004138:	80bb      	strh	r3, [r7, #4]
    timerStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800413a:	2300      	movs	r3, #0
 800413c:	80fb      	strh	r3, [r7, #6]
    timerStructure.TIM_Period = 500; // 50 us
 800413e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004142:	60bb      	str	r3, [r7, #8]
    timerStructure.TIM_ClockDivision = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM7, &timerStructure);
 8004148:	1d3b      	adds	r3, r7, #4
 800414a:	4619      	mov	r1, r3
 800414c:	480f      	ldr	r0, [pc, #60]	; (800418c <initTimerADC+0x64>)
 800414e:	f7fe f8ef 	bl	8002330 <TIM_TimeBaseInit>

    NVIC_InitTypeDef nvicStructure;
    nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8004152:	2337      	movs	r3, #55	; 0x37
 8004154:	703b      	strb	r3, [r7, #0]
    nvicStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8004156:	2302      	movs	r3, #2
 8004158:	707b      	strb	r3, [r7, #1]
    nvicStructure.NVIC_IRQChannelSubPriority = 1;
 800415a:	2301      	movs	r3, #1
 800415c:	70bb      	strb	r3, [r7, #2]
    nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 800415e:	2301      	movs	r3, #1
 8004160:	70fb      	strb	r3, [r7, #3]
    NVIC_Init(&nvicStructure);
 8004162:	463b      	mov	r3, r7
 8004164:	4618      	mov	r0, r3
 8004166:	f7fc fd2d 	bl	8000bc4 <NVIC_Init>

    TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 800416a:	2101      	movs	r1, #1
 800416c:	4807      	ldr	r0, [pc, #28]	; (800418c <initTimerADC+0x64>)
 800416e:	f7fe f9c5 	bl	80024fc <TIM_ClearITPendingBit>
    TIM_Cmd(TIM7, ENABLE);
 8004172:	2101      	movs	r1, #1
 8004174:	4805      	ldr	r0, [pc, #20]	; (800418c <initTimerADC+0x64>)
 8004176:	f7fe f953 	bl	8002420 <TIM_Cmd>
	TIM_ITConfig(TIM7, TIM_IT_Update, ENABLE);
 800417a:	2201      	movs	r2, #1
 800417c:	2101      	movs	r1, #1
 800417e:	4803      	ldr	r0, [pc, #12]	; (800418c <initTimerADC+0x64>)
 8004180:	f7fe f96e 	bl	8002460 <TIM_ITConfig>
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40001400 	.word	0x40001400

08004190 <TIM7_IRQHandler>:

void TIM7_IRQHandler() {
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
    if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET) {
 8004194:	2101      	movs	r1, #1
 8004196:	481c      	ldr	r0, [pc, #112]	; (8004208 <TIM7_IRQHandler+0x78>)
 8004198:	f7fe f986 	bl	80024a8 <TIM_GetITStatus>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d02f      	beq.n	8004202 <TIM7_IRQHandler+0x72>
    	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 80041a2:	2101      	movs	r1, #1
 80041a4:	4818      	ldr	r0, [pc, #96]	; (8004208 <TIM7_IRQHandler+0x78>)
 80041a6:	f7fe f9a9 	bl	80024fc <TIM_ClearITPendingBit>

    	if (startSamples == 1 && sampleCounter < 8) {
 80041aa:	4b18      	ldr	r3, [pc, #96]	; (800420c <TIM7_IRQHandler+0x7c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d10f      	bne.n	80041d2 <TIM7_IRQHandler+0x42>
 80041b2:	4b17      	ldr	r3, [pc, #92]	; (8004210 <TIM7_IRQHandler+0x80>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b07      	cmp	r3, #7
 80041b8:	dc0b      	bgt.n	80041d2 <TIM7_IRQHandler+0x42>
    		ADC_SoftwareStartConv(ADC1);
 80041ba:	4816      	ldr	r0, [pc, #88]	; (8004214 <TIM7_IRQHandler+0x84>)
 80041bc:	f7fc fec8 	bl	8000f50 <ADC_SoftwareStartConv>
    		STM_EVAL_LEDToggle(LED4);
 80041c0:	2001      	movs	r0, #1
 80041c2:	f7fe f9f3 	bl	80025ac <STM_EVAL_LEDToggle>
    		sampleCounter++;
 80041c6:	4b12      	ldr	r3, [pc, #72]	; (8004210 <TIM7_IRQHandler+0x80>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3301      	adds	r3, #1
 80041cc:	4a10      	ldr	r2, [pc, #64]	; (8004210 <TIM7_IRQHandler+0x80>)
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	e00c      	b.n	80041ec <TIM7_IRQHandler+0x5c>
    	} else if (sampleCounter == 8) {
 80041d2:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <TIM7_IRQHandler+0x80>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d108      	bne.n	80041ec <TIM7_IRQHandler+0x5c>
    		startSamples = 0;
 80041da:	4b0c      	ldr	r3, [pc, #48]	; (800420c <TIM7_IRQHandler+0x7c>)
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
            sampleCounter = 0;
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <TIM7_IRQHandler+0x80>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
            send = 1;
 80041e6:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <TIM7_IRQHandler+0x88>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
        }

        if (send) {
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <TIM7_IRQHandler+0x88>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d006      	beq.n	8004202 <TIM7_IRQHandler+0x72>
        	DMA_Cmd(DMA2_Stream1, ENABLE);
 80041f4:	2101      	movs	r1, #1
 80041f6:	4809      	ldr	r0, [pc, #36]	; (800421c <TIM7_IRQHandler+0x8c>)
 80041f8:	f7fc ff66 	bl	80010c8 <DMA_Cmd>

        	send = 0;
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <TIM7_IRQHandler+0x88>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
        }
    }
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40001400 	.word	0x40001400
 800420c:	2000006c 	.word	0x2000006c
 8004210:	200000c8 	.word	0x200000c8
 8004214:	40012000 	.word	0x40012000
 8004218:	200000cc 	.word	0x200000cc
 800421c:	40026428 	.word	0x40026428

08004220 <setStartSamples>:

void setStartSamples() {
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
	startSamples = 1;
 8004224:	4b03      	ldr	r3, [pc, #12]	; (8004234 <setStartSamples+0x14>)
 8004226:	2201      	movs	r2, #1
 8004228:	601a      	str	r2, [r3, #0]
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	2000006c 	.word	0x2000006c

08004238 <changeLayer>:
Positions sensor[201];
int isFilled = 0, storePtr = 0;
Sample2 stored[10];


void changeLayer(uint32_t layer) {
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
    if (layer == LCD_BACKGROUND_LAYER) frameBuffer = LCD_FRAME_BUFFER;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d104      	bne.n	8004250 <changeLayer+0x18>
 8004246:	4b07      	ldr	r3, [pc, #28]	; (8004264 <changeLayer+0x2c>)
 8004248:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 800424c:	601a      	str	r2, [r3, #0]
    else frameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET; //LCD_FOREGROUND_LAYER
}
 800424e:	e002      	b.n	8004256 <changeLayer+0x1e>
    else frameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET; //LCD_FOREGROUND_LAYER
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <changeLayer+0x2c>)
 8004252:	4a05      	ldr	r2, [pc, #20]	; (8004268 <changeLayer+0x30>)
 8004254:	601a      	str	r2, [r3, #0]
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20000070 	.word	0x20000070
 8004268:	d0050000 	.word	0xd0050000

0800426c <ARGBtoColor>:

uint16_t ARGBtoColor(uint8_t alpha, uint8_t red, uint8_t green, uint8_t blue) {
 800426c:	b490      	push	{r4, r7}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	4604      	mov	r4, r0
 8004274:	4608      	mov	r0, r1
 8004276:	4611      	mov	r1, r2
 8004278:	461a      	mov	r2, r3
 800427a:	4623      	mov	r3, r4
 800427c:	71fb      	strb	r3, [r7, #7]
 800427e:	4603      	mov	r3, r0
 8004280:	71bb      	strb	r3, [r7, #6]
 8004282:	460b      	mov	r3, r1
 8004284:	717b      	strb	r3, [r7, #5]
 8004286:	4613      	mov	r3, r2
 8004288:	713b      	strb	r3, [r7, #4]
    return ((alpha >> 4) << 12) | ((red >> 4) << 8) | ((green >> 4) << 4) | (blue >> 4);
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	b2db      	uxtb	r3, r3
 8004290:	031b      	lsls	r3, r3, #12
 8004292:	b21a      	sxth	r2, r3
 8004294:	79bb      	ldrb	r3, [r7, #6]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	b2db      	uxtb	r3, r3
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	b21b      	sxth	r3, r3
 800429e:	4313      	orrs	r3, r2
 80042a0:	b21a      	sxth	r2, r3
 80042a2:	797b      	ldrb	r3, [r7, #5]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	b21b      	sxth	r3, r3
 80042ac:	4313      	orrs	r3, r2
 80042ae:	b21a      	sxth	r2, r3
 80042b0:	793b      	ldrb	r3, [r7, #4]
 80042b2:	091b      	lsrs	r3, r3, #4
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	b21b      	sxth	r3, r3
 80042b8:	4313      	orrs	r3, r2
 80042ba:	b21b      	sxth	r3, r3
 80042bc:	b29b      	uxth	r3, r3
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc90      	pop	{r4, r7}
 80042c6:	4770      	bx	lr

080042c8 <isInside>:

int isInside(uint16_t col, uint16_t row) {
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	460a      	mov	r2, r1
 80042d2:	80fb      	strh	r3, [r7, #6]
 80042d4:	4613      	mov	r3, r2
 80042d6:	80bb      	strh	r3, [r7, #4]
    return (col >= 0 && col < LCD_PIXEL_WIDTH && row >= 0 && row < LCD_PIXEL_HEIGHT);
 80042d8:	88fb      	ldrh	r3, [r7, #6]
 80042da:	2bef      	cmp	r3, #239	; 0xef
 80042dc:	d805      	bhi.n	80042ea <isInside+0x22>
 80042de:	88bb      	ldrh	r3, [r7, #4]
 80042e0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80042e4:	d201      	bcs.n	80042ea <isInside+0x22>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <isInside+0x24>
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <SetPixel>:

RetSt SetPixel(uint16_t col, uint16_t row, uint8_t alpha, uint8_t Rval, uint8_t Gval, uint8_t Bval ) {
 80042f8:	b590      	push	{r4, r7, lr}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4604      	mov	r4, r0
 8004300:	4608      	mov	r0, r1
 8004302:	4611      	mov	r1, r2
 8004304:	461a      	mov	r2, r3
 8004306:	4623      	mov	r3, r4
 8004308:	80fb      	strh	r3, [r7, #6]
 800430a:	4603      	mov	r3, r0
 800430c:	80bb      	strh	r3, [r7, #4]
 800430e:	460b      	mov	r3, r1
 8004310:	70fb      	strb	r3, [r7, #3]
 8004312:	4613      	mov	r3, r2
 8004314:	70bb      	strb	r3, [r7, #2]

    if (!isInside(col, row)) return NO_OK;
 8004316:	88ba      	ldrh	r2, [r7, #4]
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	4611      	mov	r1, r2
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff ffd3 	bl	80042c8 <isInside>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <SetPixel+0x34>
 8004328:	2300      	movs	r3, #0
 800432a:	e016      	b.n	800435a <SetPixel+0x62>

    *(__IO uint16_t*) (frameBuffer + (2 * (LCD_PIXEL_WIDTH * row + col))) = ARGBtoColor(alpha, Rval, Gval, Bval);
 800432c:	88ba      	ldrh	r2, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	461a      	mov	r2, r3
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	4413      	add	r3, r2
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	461a      	mov	r2, r3
 8004340:	4b08      	ldr	r3, [pc, #32]	; (8004364 <SetPixel+0x6c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4413      	add	r3, r2
 8004346:	461c      	mov	r4, r3
 8004348:	7f3b      	ldrb	r3, [r7, #28]
 800434a:	7e3a      	ldrb	r2, [r7, #24]
 800434c:	78b9      	ldrb	r1, [r7, #2]
 800434e:	78f8      	ldrb	r0, [r7, #3]
 8004350:	f7ff ff8c 	bl	800426c <ARGBtoColor>
 8004354:	4603      	mov	r3, r0
 8004356:	8023      	strh	r3, [r4, #0]

	return OK;
 8004358:	2301      	movs	r3, #1
}
 800435a:	4618      	mov	r0, r3
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	bd90      	pop	{r4, r7, pc}
 8004362:	bf00      	nop
 8004364:	20000070 	.word	0x20000070

08004368 <DrawHorizontalLine>:

	return 0xFF00 | pixelValue;
}

RetSt DrawHorizontalLine(uint16_t col_start, uint16_t col_end, uint16_t row, uint8_t alpha, uint8_t Rval,
		uint8_t Gval, uint8_t Bval ) {
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b087      	sub	sp, #28
 800436c:	af02      	add	r7, sp, #8
 800436e:	4604      	mov	r4, r0
 8004370:	4608      	mov	r0, r1
 8004372:	4611      	mov	r1, r2
 8004374:	461a      	mov	r2, r3
 8004376:	4623      	mov	r3, r4
 8004378:	80fb      	strh	r3, [r7, #6]
 800437a:	4603      	mov	r3, r0
 800437c:	80bb      	strh	r3, [r7, #4]
 800437e:	460b      	mov	r3, r1
 8004380:	807b      	strh	r3, [r7, #2]
 8004382:	4613      	mov	r3, r2
 8004384:	707b      	strb	r3, [r7, #1]

    if (!isInside(col_start, row) || !isInside(col_end, row)) return NO_OK;
 8004386:	887a      	ldrh	r2, [r7, #2]
 8004388:	88fb      	ldrh	r3, [r7, #6]
 800438a:	4611      	mov	r1, r2
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff ff9b 	bl	80042c8 <isInside>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <DrawHorizontalLine+0x42>
 8004398:	887a      	ldrh	r2, [r7, #2]
 800439a:	88bb      	ldrh	r3, [r7, #4]
 800439c:	4611      	mov	r1, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff ff92 	bl	80042c8 <isInside>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <DrawHorizontalLine+0x46>
 80043aa:	2300      	movs	r3, #0
 80043ac:	e022      	b.n	80043f4 <DrawHorizontalLine+0x8c>

    if (col_start > col_end) {
 80043ae:	88fa      	ldrh	r2, [r7, #6]
 80043b0:	88bb      	ldrh	r3, [r7, #4]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d905      	bls.n	80043c2 <DrawHorizontalLine+0x5a>
		uint16_t temp_col = col_start;
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	81bb      	strh	r3, [r7, #12]
		col_start = col_end;
 80043ba:	88bb      	ldrh	r3, [r7, #4]
 80043bc:	80fb      	strh	r3, [r7, #6]
		col_end = temp_col;
 80043be:	89bb      	ldrh	r3, [r7, #12]
 80043c0:	80bb      	strh	r3, [r7, #4]
	}

	for (uint16_t i = col_start; i <= col_end; i++) {
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	81fb      	strh	r3, [r7, #14]
 80043c6:	e010      	b.n	80043ea <DrawHorizontalLine+0x82>
		SetPixel(i, row, alpha, Rval, Gval, Bval);
 80043c8:	f897 4020 	ldrb.w	r4, [r7, #32]
 80043cc:	787a      	ldrb	r2, [r7, #1]
 80043ce:	8879      	ldrh	r1, [r7, #2]
 80043d0:	89f8      	ldrh	r0, [r7, #14]
 80043d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	4623      	mov	r3, r4
 80043e0:	f7ff ff8a 	bl	80042f8 <SetPixel>
	for (uint16_t i = col_start; i <= col_end; i++) {
 80043e4:	89fb      	ldrh	r3, [r7, #14]
 80043e6:	3301      	adds	r3, #1
 80043e8:	81fb      	strh	r3, [r7, #14]
 80043ea:	89fa      	ldrh	r2, [r7, #14]
 80043ec:	88bb      	ldrh	r3, [r7, #4]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d9ea      	bls.n	80043c8 <DrawHorizontalLine+0x60>
	}

	return OK;
 80043f2:	2301      	movs	r3, #1
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd90      	pop	{r4, r7, pc}

080043fc <DrawVerticalLine>:

RetSt DrawVerticalLine(uint16_t col, uint16_t row_start, uint16_t row_end, uint8_t alpha, uint8_t Rval,
		uint8_t Gval, uint8_t Bval ) {
 80043fc:	b590      	push	{r4, r7, lr}
 80043fe:	b087      	sub	sp, #28
 8004400:	af02      	add	r7, sp, #8
 8004402:	4604      	mov	r4, r0
 8004404:	4608      	mov	r0, r1
 8004406:	4611      	mov	r1, r2
 8004408:	461a      	mov	r2, r3
 800440a:	4623      	mov	r3, r4
 800440c:	80fb      	strh	r3, [r7, #6]
 800440e:	4603      	mov	r3, r0
 8004410:	80bb      	strh	r3, [r7, #4]
 8004412:	460b      	mov	r3, r1
 8004414:	807b      	strh	r3, [r7, #2]
 8004416:	4613      	mov	r3, r2
 8004418:	707b      	strb	r3, [r7, #1]

    if (!isInside(col, row_start) || !isInside(col, row_end)) return NO_OK;
 800441a:	88ba      	ldrh	r2, [r7, #4]
 800441c:	88fb      	ldrh	r3, [r7, #6]
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff ff51 	bl	80042c8 <isInside>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <DrawVerticalLine+0x42>
 800442c:	887a      	ldrh	r2, [r7, #2]
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	4611      	mov	r1, r2
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff ff48 	bl	80042c8 <isInside>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <DrawVerticalLine+0x46>
 800443e:	2300      	movs	r3, #0
 8004440:	e022      	b.n	8004488 <DrawVerticalLine+0x8c>

    if (row_start > row_end) {
 8004442:	88ba      	ldrh	r2, [r7, #4]
 8004444:	887b      	ldrh	r3, [r7, #2]
 8004446:	429a      	cmp	r2, r3
 8004448:	d905      	bls.n	8004456 <DrawVerticalLine+0x5a>
    	uint16_t temp_row = row_start;
 800444a:	88bb      	ldrh	r3, [r7, #4]
 800444c:	81bb      	strh	r3, [r7, #12]
    	row_start = row_end;
 800444e:	887b      	ldrh	r3, [r7, #2]
 8004450:	80bb      	strh	r3, [r7, #4]
    	row_end = temp_row;
 8004452:	89bb      	ldrh	r3, [r7, #12]
 8004454:	807b      	strh	r3, [r7, #2]
    }

	for (uint16_t i = row_start; i <= row_end; i++) {
 8004456:	88bb      	ldrh	r3, [r7, #4]
 8004458:	81fb      	strh	r3, [r7, #14]
 800445a:	e010      	b.n	800447e <DrawVerticalLine+0x82>
		SetPixel(col, i, alpha, Rval, Gval, Bval);
 800445c:	f897 4020 	ldrb.w	r4, [r7, #32]
 8004460:	787a      	ldrb	r2, [r7, #1]
 8004462:	89f9      	ldrh	r1, [r7, #14]
 8004464:	88f8      	ldrh	r0, [r7, #6]
 8004466:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	4623      	mov	r3, r4
 8004474:	f7ff ff40 	bl	80042f8 <SetPixel>
	for (uint16_t i = row_start; i <= row_end; i++) {
 8004478:	89fb      	ldrh	r3, [r7, #14]
 800447a:	3301      	adds	r3, #1
 800447c:	81fb      	strh	r3, [r7, #14]
 800447e:	89fa      	ldrh	r2, [r7, #14]
 8004480:	887b      	ldrh	r3, [r7, #2]
 8004482:	429a      	cmp	r2, r3
 8004484:	d9ea      	bls.n	800445c <DrawVerticalLine+0x60>
	}

	return OK;
 8004486:	2301      	movs	r3, #1
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	bd90      	pop	{r4, r7, pc}

08004490 <DrawCircumference>:

RetSt DrawCircumference(uint16_t ccol, uint16_t crow, uint16_t radius, uint8_t alpha, uint8_t Rval,
		uint8_t Gval, uint8_t Bval ) {
 8004490:	b590      	push	{r4, r7, lr}
 8004492:	b089      	sub	sp, #36	; 0x24
 8004494:	af02      	add	r7, sp, #8
 8004496:	4604      	mov	r4, r0
 8004498:	4608      	mov	r0, r1
 800449a:	4611      	mov	r1, r2
 800449c:	461a      	mov	r2, r3
 800449e:	4623      	mov	r3, r4
 80044a0:	80fb      	strh	r3, [r7, #6]
 80044a2:	4603      	mov	r3, r0
 80044a4:	80bb      	strh	r3, [r7, #4]
 80044a6:	460b      	mov	r3, r1
 80044a8:	807b      	strh	r3, [r7, #2]
 80044aa:	4613      	mov	r3, r2
 80044ac:	707b      	strb	r3, [r7, #1]

	if (!isInside(ccol - radius, crow) || !isInside(ccol, crow - radius) ||
 80044ae:	88fa      	ldrh	r2, [r7, #6]
 80044b0:	887b      	ldrh	r3, [r7, #2]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	88ba      	ldrh	r2, [r7, #4]
 80044b8:	4611      	mov	r1, r2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff ff04 	bl	80042c8 <isInside>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d023      	beq.n	800450e <DrawCircumference+0x7e>
 80044c6:	88ba      	ldrh	r2, [r7, #4]
 80044c8:	887b      	ldrh	r3, [r7, #2]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	4611      	mov	r1, r2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fef8 	bl	80042c8 <isInside>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d017      	beq.n	800450e <DrawCircumference+0x7e>
			!isInside(ccol + radius, crow) || !isInside(ccol, crow + radius)) return NO_OK;
 80044de:	88fa      	ldrh	r2, [r7, #6]
 80044e0:	887b      	ldrh	r3, [r7, #2]
 80044e2:	4413      	add	r3, r2
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	88ba      	ldrh	r2, [r7, #4]
 80044e8:	4611      	mov	r1, r2
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff feec 	bl	80042c8 <isInside>
 80044f0:	4603      	mov	r3, r0
	if (!isInside(ccol - radius, crow) || !isInside(ccol, crow - radius) ||
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00b      	beq.n	800450e <DrawCircumference+0x7e>
			!isInside(ccol + radius, crow) || !isInside(ccol, crow + radius)) return NO_OK;
 80044f6:	88ba      	ldrh	r2, [r7, #4]
 80044f8:	887b      	ldrh	r3, [r7, #2]
 80044fa:	4413      	add	r3, r2
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fee0 	bl	80042c8 <isInside>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <DrawCircumference+0x82>
 800450e:	2300      	movs	r3, #0
 8004510:	e0d7      	b.n	80046c2 <DrawCircumference+0x232>

	int x = 0, y = radius, d = 3 - (radius << 1);
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	887b      	ldrh	r3, [r7, #2]
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	887b      	ldrh	r3, [r7, #2]
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	f1c3 0303 	rsb	r3, r3, #3
 8004522:	60fb      	str	r3, [r7, #12]

	while (x <= y) {
 8004524:	e0c7      	b.n	80046b6 <DrawCircumference+0x226>
		SetPixel( x + ccol, y + crow , alpha, Rval, Gval, Bval);
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	b29a      	uxth	r2, r3
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	4413      	add	r3, r2
 800452e:	b298      	uxth	r0, r3
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	b29a      	uxth	r2, r3
 8004534:	88bb      	ldrh	r3, [r7, #4]
 8004536:	4413      	add	r3, r2
 8004538:	b299      	uxth	r1, r3
 800453a:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800453e:	787a      	ldrb	r2, [r7, #1]
 8004540:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	4623      	mov	r3, r4
 800454e:	f7ff fed3 	bl	80042f8 <SetPixel>
		SetPixel(-x + ccol, y + crow, alpha, Rval, Gval, Bval);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	b29b      	uxth	r3, r3
 8004556:	88fa      	ldrh	r2, [r7, #6]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	b298      	uxth	r0, r3
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	b29a      	uxth	r2, r3
 8004560:	88bb      	ldrh	r3, [r7, #4]
 8004562:	4413      	add	r3, r2
 8004564:	b299      	uxth	r1, r3
 8004566:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800456a:	787a      	ldrb	r2, [r7, #1]
 800456c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	4623      	mov	r3, r4
 800457a:	f7ff febd 	bl	80042f8 <SetPixel>
		SetPixel( x + ccol, -y + crow, alpha, Rval, Gval, Bval);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	b29a      	uxth	r2, r3
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	4413      	add	r3, r2
 8004586:	b298      	uxth	r0, r3
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	b29b      	uxth	r3, r3
 800458c:	88ba      	ldrh	r2, [r7, #4]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	b299      	uxth	r1, r3
 8004592:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8004596:	787a      	ldrb	r2, [r7, #1]
 8004598:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	4623      	mov	r3, r4
 80045a6:	f7ff fea7 	bl	80042f8 <SetPixel>
		SetPixel(-x + ccol, -y + crow, alpha, Rval, Gval, Bval);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	b298      	uxth	r0, r3
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	88ba      	ldrh	r2, [r7, #4]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	b299      	uxth	r1, r3
 80045be:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80045c2:	787a      	ldrb	r2, [r7, #1]
 80045c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	4623      	mov	r3, r4
 80045d2:	f7ff fe91 	bl	80042f8 <SetPixel>
		SetPixel( y + ccol, x + crow, alpha, Rval, Gval, Bval);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	b29a      	uxth	r2, r3
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	4413      	add	r3, r2
 80045de:	b298      	uxth	r0, r3
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	88bb      	ldrh	r3, [r7, #4]
 80045e6:	4413      	add	r3, r2
 80045e8:	b299      	uxth	r1, r3
 80045ea:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80045ee:	787a      	ldrb	r2, [r7, #1]
 80045f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	4623      	mov	r3, r4
 80045fe:	f7ff fe7b 	bl	80042f8 <SetPixel>
		SetPixel(-y + ccol, x + crow, alpha, Rval, Gval, Bval);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	b29b      	uxth	r3, r3
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	b298      	uxth	r0, r3
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	b29a      	uxth	r2, r3
 8004610:	88bb      	ldrh	r3, [r7, #4]
 8004612:	4413      	add	r3, r2
 8004614:	b299      	uxth	r1, r3
 8004616:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800461a:	787a      	ldrb	r2, [r7, #1]
 800461c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	4623      	mov	r3, r4
 800462a:	f7ff fe65 	bl	80042f8 <SetPixel>
		SetPixel( y + ccol, -x + crow, alpha, Rval, Gval, Bval);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	b29a      	uxth	r2, r3
 8004632:	88fb      	ldrh	r3, [r7, #6]
 8004634:	4413      	add	r3, r2
 8004636:	b298      	uxth	r0, r3
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	b29b      	uxth	r3, r3
 800463c:	88ba      	ldrh	r2, [r7, #4]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	b299      	uxth	r1, r3
 8004642:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8004646:	787a      	ldrb	r2, [r7, #1]
 8004648:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	4623      	mov	r3, r4
 8004656:	f7ff fe4f 	bl	80042f8 <SetPixel>
		SetPixel(-y + ccol, -x + crow, alpha, Rval, Gval, Bval);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	b29b      	uxth	r3, r3
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	b298      	uxth	r0, r3
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	b29b      	uxth	r3, r3
 8004668:	88ba      	ldrh	r2, [r7, #4]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	b299      	uxth	r1, r3
 800466e:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8004672:	787a      	ldrb	r2, [r7, #1]
 8004674:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004678:	9301      	str	r3, [sp, #4]
 800467a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	4623      	mov	r3, r4
 8004682:	f7ff fe39 	bl	80042f8 <SetPixel>

		if( d < 0 ) d += (x<<2) + 6;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	da06      	bge.n	800469a <DrawCircumference+0x20a>
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	3306      	adds	r3, #6
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	e00a      	b.n	80046b0 <DrawCircumference+0x220>
		else {
			d += ((x-y)<<2) + 10;
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	330a      	adds	r3, #10
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
			y--;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	613b      	str	r3, [r7, #16]
		}
		x++;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	3301      	adds	r3, #1
 80046b4:	617b      	str	r3, [r7, #20]
	while (x <= y) {
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	f77f af33 	ble.w	8004526 <DrawCircumference+0x96>
	}

	return OK;
 80046c0:	2301      	movs	r3, #1
 }
 80046c2:	4618      	mov	r0, r3
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd90      	pop	{r4, r7, pc}

080046ca <DrawBitmap>:

RetSt DrawBitmap(uint16_t col, uint16_t row, uint8_t alpha) {
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b086      	sub	sp, #24
 80046ce:	af02      	add	r7, sp, #8
 80046d0:	4603      	mov	r3, r0
 80046d2:	80fb      	strh	r3, [r7, #6]
 80046d4:	460b      	mov	r3, r1
 80046d6:	80bb      	strh	r3, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	70fb      	strb	r3, [r7, #3]
	if (!isInside(col -1, row - 1) || !isInside(col + 1, row + 1)) return NO_OK;
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	88bb      	ldrh	r3, [r7, #4]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f7ff fdec 	bl	80042c8 <isInside>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00c      	beq.n	8004710 <DrawBitmap+0x46>
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	3301      	adds	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	88bb      	ldrh	r3, [r7, #4]
 80046fe:	3301      	adds	r3, #1
 8004700:	b29b      	uxth	r3, r3
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f7ff fddf 	bl	80042c8 <isInside>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <DrawBitmap+0x4a>
 8004710:	2300      	movs	r3, #0
 8004712:	e022      	b.n	800475a <DrawBitmap+0x90>

	for (uint16_t i = col - 1; i <= col + 1; i++) {
 8004714:	88fb      	ldrh	r3, [r7, #6]
 8004716:	3b01      	subs	r3, #1
 8004718:	81fb      	strh	r3, [r7, #14]
 800471a:	e018      	b.n	800474e <DrawBitmap+0x84>
		for (uint16_t j = row - 1; j <= row + 1; j++) {
 800471c:	88bb      	ldrh	r3, [r7, #4]
 800471e:	3b01      	subs	r3, #1
 8004720:	81bb      	strh	r3, [r7, #12]
 8004722:	e00c      	b.n	800473e <DrawBitmap+0x74>
				SetPixel(i, j, alpha, 0xFF, 0x00, 0x00);
 8004724:	78fa      	ldrb	r2, [r7, #3]
 8004726:	89b9      	ldrh	r1, [r7, #12]
 8004728:	89f8      	ldrh	r0, [r7, #14]
 800472a:	2300      	movs	r3, #0
 800472c:	9301      	str	r3, [sp, #4]
 800472e:	2300      	movs	r3, #0
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	23ff      	movs	r3, #255	; 0xff
 8004734:	f7ff fde0 	bl	80042f8 <SetPixel>
		for (uint16_t j = row - 1; j <= row + 1; j++) {
 8004738:	89bb      	ldrh	r3, [r7, #12]
 800473a:	3301      	adds	r3, #1
 800473c:	81bb      	strh	r3, [r7, #12]
 800473e:	89ba      	ldrh	r2, [r7, #12]
 8004740:	88bb      	ldrh	r3, [r7, #4]
 8004742:	3301      	adds	r3, #1
 8004744:	429a      	cmp	r2, r3
 8004746:	dded      	ble.n	8004724 <DrawBitmap+0x5a>
	for (uint16_t i = col - 1; i <= col + 1; i++) {
 8004748:	89fb      	ldrh	r3, [r7, #14]
 800474a:	3301      	adds	r3, #1
 800474c:	81fb      	strh	r3, [r7, #14]
 800474e:	89fa      	ldrh	r2, [r7, #14]
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	3301      	adds	r3, #1
 8004754:	429a      	cmp	r2, r3
 8004756:	dde1      	ble.n	800471c <DrawBitmap+0x52>
		}
	}

	return OK;
 8004758:	2301      	movs	r3, #1
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <ClearScreen>:

RetSt ClearScreen(uint8_t Rval, uint8_t Gval, uint8_t Bval ) {
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	71fb      	strb	r3, [r7, #7]
 800476e:	460b      	mov	r3, r1
 8004770:	71bb      	strb	r3, [r7, #6]
 8004772:	4613      	mov	r3, r2
 8004774:	717b      	strb	r3, [r7, #5]
	uint16_t color = ARGBtoColor(0xFF, Rval, Gval, Bval);
 8004776:	797b      	ldrb	r3, [r7, #5]
 8004778:	79ba      	ldrb	r2, [r7, #6]
 800477a:	79f9      	ldrb	r1, [r7, #7]
 800477c:	20ff      	movs	r0, #255	; 0xff
 800477e:	f7ff fd75 	bl	800426c <ARGBtoColor>
 8004782:	4603      	mov	r3, r0
 8004784:	817b      	strh	r3, [r7, #10]
	for (uint32_t i = 0; i < BUFFER_OFFSET; i++) {
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	e00a      	b.n	80047a2 <ClearScreen+0x3e>
	    *(__IO uint16_t*)(frameBuffer + (2 * i)) = color;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	005a      	lsls	r2, r3, #1
 8004790:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <ClearScreen+0x50>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4413      	add	r3, r2
 8004796:	461a      	mov	r2, r3
 8004798:	897b      	ldrh	r3, [r7, #10]
 800479a:	8013      	strh	r3, [r2, #0]
	for (uint32_t i = 0; i < BUFFER_OFFSET; i++) {
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3301      	adds	r3, #1
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047a8:	d3f0      	bcc.n	800478c <ClearScreen+0x28>
	}

	return OK;
 80047aa:	2301      	movs	r3, #1
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20000070 	.word	0x20000070

080047b8 <ClearLayer2>:

RetSt ClearLayer2(uint8_t Rval, uint8_t Gval, uint8_t Bval ) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
 80047c2:	460b      	mov	r3, r1
 80047c4:	71bb      	strb	r3, [r7, #6]
 80047c6:	4613      	mov	r3, r2
 80047c8:	717b      	strb	r3, [r7, #5]
	uint16_t color = ARGBtoColor(0, Rval, Gval, Bval);
 80047ca:	797b      	ldrb	r3, [r7, #5]
 80047cc:	79ba      	ldrb	r2, [r7, #6]
 80047ce:	79f9      	ldrb	r1, [r7, #7]
 80047d0:	2000      	movs	r0, #0
 80047d2:	f7ff fd4b 	bl	800426c <ARGBtoColor>
 80047d6:	4603      	mov	r3, r0
 80047d8:	817b      	strh	r3, [r7, #10]
	for (uint32_t i = 0; i < BUFFER_OFFSET; i++) {
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	e00a      	b.n	80047f6 <ClearLayer2+0x3e>
	    *(__IO uint16_t*)(frameBuffer + (2 * i)) = color;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	005a      	lsls	r2, r3, #1
 80047e4:	4b08      	ldr	r3, [pc, #32]	; (8004808 <ClearLayer2+0x50>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4413      	add	r3, r2
 80047ea:	461a      	mov	r2, r3
 80047ec:	897b      	ldrh	r3, [r7, #10]
 80047ee:	8013      	strh	r3, [r2, #0]
	for (uint32_t i = 0; i < BUFFER_OFFSET; i++) {
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3301      	adds	r3, #1
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047fc:	d3f0      	bcc.n	80047e0 <ClearLayer2+0x28>
	}

	return OK;
 80047fe:	2301      	movs	r3, #1
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000070 	.word	0x20000070

0800480c <drawBackground>:

void drawBackground() {
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af04      	add	r7, sp, #16
	// Horizontal rectangle (vertical in the statement image)
	DrawHorizontalLine(35, 236, 4, 0xFF, 0, 0, 0);
 8004812:	2300      	movs	r3, #0
 8004814:	9302      	str	r3, [sp, #8]
 8004816:	2300      	movs	r3, #0
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	2300      	movs	r3, #0
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	23ff      	movs	r3, #255	; 0xff
 8004820:	2204      	movs	r2, #4
 8004822:	21ec      	movs	r1, #236	; 0xec
 8004824:	2023      	movs	r0, #35	; 0x23
 8004826:	f7ff fd9f 	bl	8004368 <DrawHorizontalLine>
	DrawHorizontalLine(35, 236, 86, 0xFF, 0, 0, 0);
 800482a:	2300      	movs	r3, #0
 800482c:	9302      	str	r3, [sp, #8]
 800482e:	2300      	movs	r3, #0
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	2300      	movs	r3, #0
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	23ff      	movs	r3, #255	; 0xff
 8004838:	2256      	movs	r2, #86	; 0x56
 800483a:	21ec      	movs	r1, #236	; 0xec
 800483c:	2023      	movs	r0, #35	; 0x23
 800483e:	f7ff fd93 	bl	8004368 <DrawHorizontalLine>
	DrawVerticalLine(35, 4, 86, 0xFF, 0, 0, 0);
 8004842:	2300      	movs	r3, #0
 8004844:	9302      	str	r3, [sp, #8]
 8004846:	2300      	movs	r3, #0
 8004848:	9301      	str	r3, [sp, #4]
 800484a:	2300      	movs	r3, #0
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	23ff      	movs	r3, #255	; 0xff
 8004850:	2256      	movs	r2, #86	; 0x56
 8004852:	2104      	movs	r1, #4
 8004854:	2023      	movs	r0, #35	; 0x23
 8004856:	f7ff fdd1 	bl	80043fc <DrawVerticalLine>
	DrawVerticalLine(236, 4, 86, 0xFF, 0, 0, 0);
 800485a:	2300      	movs	r3, #0
 800485c:	9302      	str	r3, [sp, #8]
 800485e:	2300      	movs	r3, #0
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	2300      	movs	r3, #0
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	23ff      	movs	r3, #255	; 0xff
 8004868:	2256      	movs	r2, #86	; 0x56
 800486a:	2104      	movs	r1, #4
 800486c:	20ec      	movs	r0, #236	; 0xec
 800486e:	f7ff fdc5 	bl	80043fc <DrawVerticalLine>
	DrawHorizontalLine(35, 236, 45, 0xFF, 0, 0, 0); // middle line
 8004872:	2300      	movs	r3, #0
 8004874:	9302      	str	r3, [sp, #8]
 8004876:	2300      	movs	r3, #0
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	2300      	movs	r3, #0
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	23ff      	movs	r3, #255	; 0xff
 8004880:	222d      	movs	r2, #45	; 0x2d
 8004882:	21ec      	movs	r1, #236	; 0xec
 8004884:	2023      	movs	r0, #35	; 0x23
 8004886:	f7ff fd6f 	bl	8004368 <DrawHorizontalLine>

	// Vertical rectangle (horizontal in the statement image)
	DrawHorizontalLine(154, 236, 101, 0xFF, 0, 0, 0);
 800488a:	2300      	movs	r3, #0
 800488c:	9302      	str	r3, [sp, #8]
 800488e:	2300      	movs	r3, #0
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	2300      	movs	r3, #0
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	23ff      	movs	r3, #255	; 0xff
 8004898:	2265      	movs	r2, #101	; 0x65
 800489a:	21ec      	movs	r1, #236	; 0xec
 800489c:	209a      	movs	r0, #154	; 0x9a
 800489e:	f7ff fd63 	bl	8004368 <DrawHorizontalLine>
	DrawHorizontalLine(154, 236, 302, 0xFF, 0, 0, 0);
 80048a2:	2300      	movs	r3, #0
 80048a4:	9302      	str	r3, [sp, #8]
 80048a6:	2300      	movs	r3, #0
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	2300      	movs	r3, #0
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	23ff      	movs	r3, #255	; 0xff
 80048b0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80048b4:	21ec      	movs	r1, #236	; 0xec
 80048b6:	209a      	movs	r0, #154	; 0x9a
 80048b8:	f7ff fd56 	bl	8004368 <DrawHorizontalLine>
	DrawVerticalLine(154, 101, 302, 0xFF, 0, 0, 0);
 80048bc:	2300      	movs	r3, #0
 80048be:	9302      	str	r3, [sp, #8]
 80048c0:	2300      	movs	r3, #0
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	2300      	movs	r3, #0
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	23ff      	movs	r3, #255	; 0xff
 80048ca:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80048ce:	2165      	movs	r1, #101	; 0x65
 80048d0:	209a      	movs	r0, #154	; 0x9a
 80048d2:	f7ff fd93 	bl	80043fc <DrawVerticalLine>
	DrawVerticalLine(236, 101, 302, 0xFF, 0, 0, 0);
 80048d6:	2300      	movs	r3, #0
 80048d8:	9302      	str	r3, [sp, #8]
 80048da:	2300      	movs	r3, #0
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	2300      	movs	r3, #0
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	23ff      	movs	r3, #255	; 0xff
 80048e4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80048e8:	2165      	movs	r1, #101	; 0x65
 80048ea:	20ec      	movs	r0, #236	; 0xec
 80048ec:	f7ff fd86 	bl	80043fc <DrawVerticalLine>
	DrawVerticalLine(195, 101, 302, 0xFF, 0, 0, 0); // middle line(exactly would be 100,5)
 80048f0:	2300      	movs	r3, #0
 80048f2:	9302      	str	r3, [sp, #8]
 80048f4:	2300      	movs	r3, #0
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	2300      	movs	r3, #0
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	23ff      	movs	r3, #255	; 0xff
 80048fe:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8004902:	2165      	movs	r1, #101	; 0x65
 8004904:	20c3      	movs	r0, #195	; 0xc3
 8004906:	f7ff fd79 	bl	80043fc <DrawVerticalLine>

    // X-Y graph
    DrawVerticalLine(76, 130, 270, 0xFF, 0, 0, 0);
 800490a:	2300      	movs	r3, #0
 800490c:	9302      	str	r3, [sp, #8]
 800490e:	2300      	movs	r3, #0
 8004910:	9301      	str	r3, [sp, #4]
 8004912:	2300      	movs	r3, #0
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	23ff      	movs	r3, #255	; 0xff
 8004918:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800491c:	2182      	movs	r1, #130	; 0x82
 800491e:	204c      	movs	r0, #76	; 0x4c
 8004920:	f7ff fd6c 	bl	80043fc <DrawVerticalLine>
    DrawHorizontalLine(6, 146, 200, 0xFF, 0, 0, 0);
 8004924:	2300      	movs	r3, #0
 8004926:	9302      	str	r3, [sp, #8]
 8004928:	2300      	movs	r3, #0
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	2300      	movs	r3, #0
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	23ff      	movs	r3, #255	; 0xff
 8004932:	22c8      	movs	r2, #200	; 0xc8
 8004934:	2192      	movs	r1, #146	; 0x92
 8004936:	2006      	movs	r0, #6
 8004938:	f7ff fd16 	bl	8004368 <DrawHorizontalLine>
    DrawCircumference(76, 200, 15, 0xFF, 0, 0, 0);
 800493c:	2300      	movs	r3, #0
 800493e:	9302      	str	r3, [sp, #8]
 8004940:	2300      	movs	r3, #0
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	2300      	movs	r3, #0
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	23ff      	movs	r3, #255	; 0xff
 800494a:	220f      	movs	r2, #15
 800494c:	21c8      	movs	r1, #200	; 0xc8
 800494e:	204c      	movs	r0, #76	; 0x4c
 8004950:	f7ff fd9e 	bl	8004490 <DrawCircumference>
    DrawCircumference(76, 200, 30, 0xFF, 0, 0, 0);
 8004954:	2300      	movs	r3, #0
 8004956:	9302      	str	r3, [sp, #8]
 8004958:	2300      	movs	r3, #0
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	2300      	movs	r3, #0
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	23ff      	movs	r3, #255	; 0xff
 8004962:	221e      	movs	r2, #30
 8004964:	21c8      	movs	r1, #200	; 0xc8
 8004966:	204c      	movs	r0, #76	; 0x4c
 8004968:	f7ff fd92 	bl	8004490 <DrawCircumference>
    DrawCircumference(75, 200, 45, 0xFF, 0, 0, 0);
 800496c:	2300      	movs	r3, #0
 800496e:	9302      	str	r3, [sp, #8]
 8004970:	2300      	movs	r3, #0
 8004972:	9301      	str	r3, [sp, #4]
 8004974:	2300      	movs	r3, #0
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	23ff      	movs	r3, #255	; 0xff
 800497a:	222d      	movs	r2, #45	; 0x2d
 800497c:	21c8      	movs	r1, #200	; 0xc8
 800497e:	204b      	movs	r0, #75	; 0x4b
 8004980:	f7ff fd86 	bl	8004490 <DrawCircumference>
    DrawCircumference(76, 200, 60, 0xFF, 0, 0, 0);
 8004984:	2300      	movs	r3, #0
 8004986:	9302      	str	r3, [sp, #8]
 8004988:	2300      	movs	r3, #0
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	2300      	movs	r3, #0
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	23ff      	movs	r3, #255	; 0xff
 8004992:	223c      	movs	r2, #60	; 0x3c
 8004994:	21c8      	movs	r1, #200	; 0xc8
 8004996:	204c      	movs	r0, #76	; 0x4c
 8004998:	f7ff fd7a 	bl	8004490 <DrawCircumference>
}
 800499c:	bf00      	nop
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <initLCD>:

void initLCD () {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
    LCD_Init();
 80049a8:	f7fd fe7e 	bl	80026a8 <LCD_Init>
    LCD_LayerInit();
 80049ac:	f7fd feee 	bl	800278c <LCD_LayerInit>

    SDRAM_Init();
 80049b0:	f7fe fa75 	bl	8002e9e <SDRAM_Init>
    FMC_SDRAMWriteProtectionConfig(FMC_Bank2_SDRAM, DISABLE);
 80049b4:	2100      	movs	r1, #0
 80049b6:	2001      	movs	r0, #1
 80049b8:	f7fc fe4a 	bl	8001650 <FMC_SDRAMWriteProtectionConfig>

    LTDC_Cmd(ENABLE);
 80049bc:	2001      	movs	r0, #1
 80049be:	f7fd f8d1 	bl	8001b64 <LTDC_Cmd>
    LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_ARGB4444);
 80049c2:	2104      	movs	r1, #4
 80049c4:	480d      	ldr	r0, [pc, #52]	; (80049fc <initLCD+0x58>)
 80049c6:	f7fd f9cf 	bl	8001d68 <LTDC_LayerPixelFormat>
	LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_ARGB4444);
 80049ca:	2104      	movs	r1, #4
 80049cc:	480c      	ldr	r0, [pc, #48]	; (8004a00 <initLCD+0x5c>)
 80049ce:	f7fd f9cb 	bl	8001d68 <LTDC_LayerPixelFormat>
	LTDC_ReloadConfig(LTDC_VBReload);
 80049d2:	2002      	movs	r0, #2
 80049d4:	f7fd f902 	bl	8001bdc <LTDC_ReloadConfig>

	// Background set up
    ClearScreen(0xFF, 0xFF, 0xFF);
 80049d8:	22ff      	movs	r2, #255	; 0xff
 80049da:	21ff      	movs	r1, #255	; 0xff
 80049dc:	20ff      	movs	r0, #255	; 0xff
 80049de:	f7ff fec1 	bl	8004764 <ClearScreen>
    drawBackground();
 80049e2:	f7ff ff13 	bl	800480c <drawBackground>

    // Change to layer2
    changeLayer(LCD_FOREGROUND_LAYER);
 80049e6:	2001      	movs	r0, #1
 80049e8:	f7ff fc26 	bl	8004238 <changeLayer>
    ClearLayer2(0,0,0);
 80049ec:	2200      	movs	r2, #0
 80049ee:	2100      	movs	r1, #0
 80049f0:	2000      	movs	r0, #0
 80049f2:	f7ff fee1 	bl	80047b8 <ClearLayer2>
}
 80049f6:	bf00      	nop
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40016884 	.word	0x40016884
 8004a00:	40016904 	.word	0x40016904

08004a04 <storeSample>:

void storeSample(Sample2 newSample) {
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	stored[storePtr] = newSample;
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <storeSample+0x3c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a0c      	ldr	r2, [pc, #48]	; (8004a44 <storeSample+0x40>)
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	1d3a      	adds	r2, r7, #4
 8004a18:	6810      	ldr	r0, [r2, #0]
 8004a1a:	6018      	str	r0, [r3, #0]
	storePtr++;
 8004a1c:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <storeSample+0x3c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	4a07      	ldr	r2, [pc, #28]	; (8004a40 <storeSample+0x3c>)
 8004a24:	6013      	str	r3, [r2, #0]

	if (storePtr == 10) storePtr = 0;
 8004a26:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <storeSample+0x3c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b0a      	cmp	r3, #10
 8004a2c:	d102      	bne.n	8004a34 <storeSample+0x30>
 8004a2e:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <storeSample+0x3c>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	200000d8 	.word	0x200000d8
 8004a44:	20000148 	.word	0x20000148

08004a48 <getPosition>:
Positions getPosition(Sample2 newSample) {
 8004a48:	b590      	push	{r4, r7, lr}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	Positions newPos;
	storeSample(newSample);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff ffd7 	bl	8004a04 <storeSample>

	newPos.col = 45.5 +  -10.125 * newSample.sensorY;
 8004a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fb fd1a 	bl	8000494 <__aeabi_i2d>
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	4b22      	ldr	r3, [pc, #136]	; (8004af0 <getPosition+0xa8>)
 8004a66:	f7fb fd7b 	bl	8000560 <__aeabi_dmul>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	460c      	mov	r4, r1
 8004a6e:	4618      	mov	r0, r3
 8004a70:	4621      	mov	r1, r4
 8004a72:	a31b      	add	r3, pc, #108	; (adr r3, 8004ae0 <getPosition+0x98>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f7fb fbc0 	bl	80001fc <__adddf3>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	4618      	mov	r0, r3
 8004a82:	4621      	mov	r1, r4
 8004a84:	f7fc f82e 	bl	8000ae4 <__aeabi_d2uiz>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	813b      	strh	r3, [r7, #8]
	newPos.row = 195.5 +  -10.125 * newSample.sensorX;
 8004a8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fb fcfe 	bl	8000494 <__aeabi_i2d>
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	4b14      	ldr	r3, [pc, #80]	; (8004af0 <getPosition+0xa8>)
 8004a9e:	f7fb fd5f 	bl	8000560 <__aeabi_dmul>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	a30f      	add	r3, pc, #60	; (adr r3, 8004ae8 <getPosition+0xa0>)
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	f7fb fba4 	bl	80001fc <__adddf3>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	4618      	mov	r0, r3
 8004aba:	4621      	mov	r1, r4
 8004abc:	f7fc f812 	bl	8000ae4 <__aeabi_d2uiz>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	817b      	strh	r3, [r7, #10]

	return newPos;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	2300      	movs	r3, #0
 8004acc:	89ba      	ldrh	r2, [r7, #12]
 8004ace:	f362 030f 	bfi	r3, r2, #0, #16
 8004ad2:	89fa      	ldrh	r2, [r7, #14]
 8004ad4:	f362 431f 	bfi	r3, r2, #16, #16
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd90      	pop	{r4, r7, pc}
 8004ae0:	00000000 	.word	0x00000000
 8004ae4:	4046c000 	.word	0x4046c000
 8004ae8:	00000000 	.word	0x00000000
 8004aec:	40687000 	.word	0x40687000
 8004af0:	c0244000 	.word	0xc0244000

08004af4 <displayAccelerations>:

void displayAccelerations(Sample2 newSample, int index) {
 8004af4:	b5b0      	push	{r4, r5, r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
	if (isFilled == 0) {
 8004afe:	4b52      	ldr	r3, [pc, #328]	; (8004c48 <displayAccelerations+0x154>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d133      	bne.n	8004b6e <displayAccelerations+0x7a>
		sensor[index - 1] = getPosition(newSample);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	1e5c      	subs	r4, r3, #1
 8004b0a:	4d50      	ldr	r5, [pc, #320]	; (8004c4c <displayAccelerations+0x158>)
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff ff9b 	bl	8004a48 <getPosition>
 8004b12:	4603      	mov	r3, r0
 8004b14:	461a      	mov	r2, r3
 8004b16:	f825 2024 	strh.w	r2, [r5, r4, lsl #2]
 8004b1a:	f3c3 420f 	ubfx	r2, r3, #16, #16
 8004b1e:	00a3      	lsls	r3, r4, #2
 8004b20:	442b      	add	r3, r5
 8004b22:	805a      	strh	r2, [r3, #2]

		SetPixel(35 + index, sensor[index - 1].col, 0xFF, 0xFF, 0, 0);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3323      	adds	r3, #35	; 0x23
 8004b2a:	b298      	uxth	r0, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	4a46      	ldr	r2, [pc, #280]	; (8004c4c <displayAccelerations+0x158>)
 8004b32:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004b36:	2300      	movs	r3, #0
 8004b38:	9301      	str	r3, [sp, #4]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	23ff      	movs	r3, #255	; 0xff
 8004b40:	22ff      	movs	r2, #255	; 0xff
 8004b42:	f7ff fbd9 	bl	80042f8 <SetPixel>
		SetPixel(sensor[index - 1].row, 302 - index, 0xFF, 0, 0, 0xFF);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	4a40      	ldr	r2, [pc, #256]	; (8004c4c <displayAccelerations+0x158>)
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	8858      	ldrh	r0, [r3, #2]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f5c3 7397 	rsb	r3, r3, #302	; 0x12e
 8004b5a:	b299      	uxth	r1, r3
 8004b5c:	23ff      	movs	r3, #255	; 0xff
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	2300      	movs	r3, #0
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	2300      	movs	r3, #0
 8004b66:	22ff      	movs	r2, #255	; 0xff
 8004b68:	f7ff fbc6 	bl	80042f8 <SetPixel>
			SetPixel(sensor[i + 1].row, 301 - i, 0xFF, 0, 0, 0xFF);

			sensor[i] = sensor[i + 1];
		}
	}
}
 8004b6c:	e067      	b.n	8004c3e <displayAccelerations+0x14a>
		sensor[200] = getPosition(newSample);
 8004b6e:	4c37      	ldr	r4, [pc, #220]	; (8004c4c <displayAccelerations+0x158>)
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff ff69 	bl	8004a48 <getPosition>
 8004b76:	4603      	mov	r3, r0
 8004b78:	461a      	mov	r2, r3
 8004b7a:	f8a4 2320 	strh.w	r2, [r4, #800]	; 0x320
 8004b7e:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8004b82:	f8a4 3322 	strh.w	r3, [r4, #802]	; 0x322
		for (int i = 0; i < 200; i++) {
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	e055      	b.n	8004c38 <displayAccelerations+0x144>
			SetPixel(36 + i, sensor[i].col, 0, 0, 0, 0);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3324      	adds	r3, #36	; 0x24
 8004b92:	b298      	uxth	r0, r3
 8004b94:	4a2d      	ldr	r2, [pc, #180]	; (8004c4c <displayAccelerations+0x158>)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9301      	str	r3, [sp, #4]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f7ff fba6 	bl	80042f8 <SetPixel>
			SetPixel(sensor[i].row, 301 - i, 0, 0, 0, 0);
 8004bac:	4a27      	ldr	r2, [pc, #156]	; (8004c4c <displayAccelerations+0x158>)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	8858      	ldrh	r0, [r3, #2]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	b299      	uxth	r1, r3
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f7ff fb93 	bl	80042f8 <SetPixel>
			SetPixel(36 + i, sensor[i + 1].col, 0xFF, 0xFF, 0, 0);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3324      	adds	r3, #36	; 0x24
 8004bd8:	b298      	uxth	r0, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	4a1b      	ldr	r2, [pc, #108]	; (8004c4c <displayAccelerations+0x158>)
 8004be0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004be4:	2300      	movs	r3, #0
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	2300      	movs	r3, #0
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	23ff      	movs	r3, #255	; 0xff
 8004bee:	22ff      	movs	r2, #255	; 0xff
 8004bf0:	f7ff fb82 	bl	80042f8 <SetPixel>
			SetPixel(sensor[i + 1].row, 301 - i, 0xFF, 0, 0, 0xFF);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	4a14      	ldr	r2, [pc, #80]	; (8004c4c <displayAccelerations+0x158>)
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	8858      	ldrh	r0, [r3, #2]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8004c08:	3301      	adds	r3, #1
 8004c0a:	b299      	uxth	r1, r3
 8004c0c:	23ff      	movs	r3, #255	; 0xff
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	2300      	movs	r3, #0
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	2300      	movs	r3, #0
 8004c16:	22ff      	movs	r2, #255	; 0xff
 8004c18:	f7ff fb6e 	bl	80042f8 <SetPixel>
			sensor[i] = sensor[i + 1];
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	480a      	ldr	r0, [pc, #40]	; (8004c4c <displayAccelerations+0x158>)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4909      	ldr	r1, [pc, #36]	; (8004c4c <displayAccelerations+0x158>)
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4403      	add	r3, r0
 8004c2a:	0092      	lsls	r2, r2, #2
 8004c2c:	440a      	add	r2, r1
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 200; i++) {
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3301      	adds	r3, #1
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2bc7      	cmp	r3, #199	; 0xc7
 8004c3c:	dda6      	ble.n	8004b8c <displayAccelerations+0x98>
}
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bdb0      	pop	{r4, r5, r7, pc}
 8004c46:	bf00      	nop
 8004c48:	200000d4 	.word	0x200000d4
 8004c4c:	20000170 	.word	0x20000170

08004c50 <getInstantaneous>:

Positions getInstantaneous() {
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
	Sample2 samp = {0,0};
 8004c56:	2300      	movs	r3, #0
 8004c58:	80bb      	strh	r3, [r7, #4]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	80fb      	strh	r3, [r7, #6]
	Positions newPos;

	for (int i = 0; i < 10; i++) {
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	e01c      	b.n	8004c9e <getInstantaneous+0x4e>
		samp.sensorX += stored[i].sensorX;
 8004c64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	492a      	ldr	r1, [pc, #168]	; (8004d14 <getInstantaneous+0xc4>)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f931 3023 	ldrsh.w	r3, [r1, r3, lsl #2]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	b21b      	sxth	r3, r3
 8004c7a:	80bb      	strh	r3, [r7, #4]
		samp.sensorY += stored[i].sensorY;
 8004c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	4924      	ldr	r1, [pc, #144]	; (8004d14 <getInstantaneous+0xc4>)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	4413      	add	r3, r2
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	b21b      	sxth	r3, r3
 8004c96:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 10; i++) {
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b09      	cmp	r3, #9
 8004ca2:	dddf      	ble.n	8004c64 <getInstantaneous+0x14>
	}

	samp.sensorX /= 10;
 8004ca4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ca8:	4a1b      	ldr	r2, [pc, #108]	; (8004d18 <getInstantaneous+0xc8>)
 8004caa:	fb82 1203 	smull	r1, r2, r2, r3
 8004cae:	1092      	asrs	r2, r2, #2
 8004cb0:	17db      	asrs	r3, r3, #31
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	b21b      	sxth	r3, r3
 8004cb6:	80bb      	strh	r3, [r7, #4]
	samp.sensorY /= 10;
 8004cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cbc:	4a16      	ldr	r2, [pc, #88]	; (8004d18 <getInstantaneous+0xc8>)
 8004cbe:	fb82 1203 	smull	r1, r2, r2, r3
 8004cc2:	1092      	asrs	r2, r2, #2
 8004cc4:	17db      	asrs	r3, r3, #31
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	b21b      	sxth	r3, r3
 8004cca:	80fb      	strh	r3, [r7, #6]

	newPos.col = 200 +  -15 * samp.sensorY;
 8004ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	33c8      	adds	r3, #200	; 0xc8
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	803b      	strh	r3, [r7, #0]
	newPos.row = 76 +  -15 * samp.sensorX;
 8004ce0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	334c      	adds	r3, #76	; 0x4c
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	807b      	strh	r3, [r7, #2]

	return newPos;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	60bb      	str	r3, [r7, #8]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	893a      	ldrh	r2, [r7, #8]
 8004cfc:	f362 030f 	bfi	r3, r2, #0, #16
 8004d00:	897a      	ldrh	r2, [r7, #10]
 8004d02:	f362 431f 	bfi	r3, r2, #16, #16

}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20000148 	.word	0x20000148
 8004d18:	66666667 	.word	0x66666667

08004d1c <displayInstantaneous>:

void displayInstantaneous() {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
	Positions newPos = getInstantaneous();
 8004d22:	f7ff ff95 	bl	8004c50 <getInstantaneous>
 8004d26:	4603      	mov	r3, r0
 8004d28:	607b      	str	r3, [r7, #4]

	DrawBitmap(prevGraph.row, prevGraph.col, 0);
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <displayInstantaneous+0x38>)
 8004d2c:	8858      	ldrh	r0, [r3, #2]
 8004d2e:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <displayInstantaneous+0x38>)
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	2200      	movs	r2, #0
 8004d34:	4619      	mov	r1, r3
 8004d36:	f7ff fcc8 	bl	80046ca <DrawBitmap>
	DrawBitmap(newPos.row, newPos.col, 0xFF);
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	88b9      	ldrh	r1, [r7, #4]
 8004d3e:	22ff      	movs	r2, #255	; 0xff
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff fcc2 	bl	80046ca <DrawBitmap>

	prevGraph = newPos;
 8004d46:	4a03      	ldr	r2, [pc, #12]	; (8004d54 <displayInstantaneous+0x38>)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6013      	str	r3, [r2, #0]
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	200000d0 	.word	0x200000d0

08004d58 <setIsFilled>:

void setIsFilled() {
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
	isFilled = 1;
 8004d5c:	4b03      	ldr	r3, [pc, #12]	; (8004d6c <setIsFilled+0x14>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
}
 8004d62:	bf00      	nop
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	200000d4 	.word	0x200000d4

08004d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004da8 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004d74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004d76:	e003      	b.n	8004d80 <LoopCopyDataInit>

08004d78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004d7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004d7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004d7e:	3104      	adds	r1, #4

08004d80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004d80:	480b      	ldr	r0, [pc, #44]	; (8004db0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004d82:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004d84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004d86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004d88:	d3f6      	bcc.n	8004d78 <CopyDataInit>
  ldr  r2, =_sbss
 8004d8a:	4a0b      	ldr	r2, [pc, #44]	; (8004db8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004d8c:	e002      	b.n	8004d94 <LoopFillZerobss>

08004d8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004d8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004d90:	f842 3b04 	str.w	r3, [r2], #4

08004d94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004d96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004d98:	d3f9      	bcc.n	8004d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004d9a:	f000 f841 	bl	8004e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d9e:	f000 f8f1 	bl	8004f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004da2:	f7fe fa55 	bl	8003250 <main>
  bx  lr    
 8004da6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004da8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004dac:	080061cc 	.word	0x080061cc
  ldr  r0, =_sdata
 8004db0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004db4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8004db8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8004dbc:	20000494 	.word	0x20000494

08004dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dc0:	e7fe      	b.n	8004dc0 <ADC_IRQHandler>

08004dc2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	af00      	add	r7, sp, #0
}
 8004dc6:	bf00      	nop
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004dd4:	e7fe      	b.n	8004dd4 <HardFault_Handler+0x4>

08004dd6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004dda:	e7fe      	b.n	8004dda <MemManage_Handler+0x4>

08004ddc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004de0:	e7fe      	b.n	8004de0 <BusFault_Handler+0x4>

08004de2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004de2:	b480      	push	{r7}
 8004de4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004de6:	e7fe      	b.n	8004de6 <UsageFault_Handler+0x4>

08004de8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
}
 8004dec:	bf00      	nop
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004df6:	b480      	push	{r7}
 8004df8:	af00      	add	r7, sp, #0
}
 8004dfa:	bf00      	nop
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
}
 8004e08:	bf00      	nop
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8004e12:	b480      	push	{r7}
 8004e14:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8004e16:	bf00      	nop
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e24:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <SystemInit+0x60>)
 8004e26:	4b16      	ldr	r3, [pc, #88]	; (8004e80 <SystemInit+0x60>)
 8004e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004e34:	4a13      	ldr	r2, [pc, #76]	; (8004e84 <SystemInit+0x64>)
 8004e36:	4b13      	ldr	r3, [pc, #76]	; (8004e84 <SystemInit+0x64>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004e40:	4b10      	ldr	r3, [pc, #64]	; (8004e84 <SystemInit+0x64>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004e46:	4a0f      	ldr	r2, [pc, #60]	; (8004e84 <SystemInit+0x64>)
 8004e48:	4b0e      	ldr	r3, [pc, #56]	; (8004e84 <SystemInit+0x64>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004e56:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <SystemInit+0x64>)
 8004e58:	4a0b      	ldr	r2, [pc, #44]	; (8004e88 <SystemInit+0x68>)
 8004e5a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004e5c:	4a09      	ldr	r2, [pc, #36]	; (8004e84 <SystemInit+0x64>)
 8004e5e:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <SystemInit+0x64>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <SystemInit+0x64>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004e6e:	f000 f80d 	bl	8004e8c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e72:	4b03      	ldr	r3, [pc, #12]	; (8004e80 <SystemInit+0x60>)
 8004e74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e78:	609a      	str	r2, [r3, #8]
#endif
}
 8004e7a:	bf00      	nop
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	e000ed00 	.word	0xe000ed00
 8004e84:	40023800 	.word	0x40023800
 8004e88:	24003010 	.word	0x24003010

08004e8c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	2300      	movs	r3, #0
 8004e98:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004e9a:	4a36      	ldr	r2, [pc, #216]	; (8004f74 <SetSysClock+0xe8>)
 8004e9c:	4b35      	ldr	r3, [pc, #212]	; (8004f74 <SetSysClock+0xe8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea4:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004ea6:	4b33      	ldr	r3, [pc, #204]	; (8004f74 <SetSysClock+0xe8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eae:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d103      	bne.n	8004ec4 <SetSysClock+0x38>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004ec2:	d1f0      	bne.n	8004ea6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004ec4:	4b2b      	ldr	r3, [pc, #172]	; (8004f74 <SetSysClock+0xe8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	e001      	b.n	8004eda <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d102      	bne.n	8004ee6 <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004ee0:	4b24      	ldr	r3, [pc, #144]	; (8004f74 <SetSysClock+0xe8>)
 8004ee2:	4a25      	ldr	r2, [pc, #148]	; (8004f78 <SetSysClock+0xec>)
 8004ee4:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8004ee6:	4a23      	ldr	r2, [pc, #140]	; (8004f74 <SetSysClock+0xe8>)
 8004ee8:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <SetSysClock+0xe8>)
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef0:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8004ef2:	4a22      	ldr	r2, [pc, #136]	; (8004f7c <SetSysClock+0xf0>)
 8004ef4:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <SetSysClock+0xf0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004efc:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004efe:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <SetSysClock+0xe8>)
 8004f00:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <SetSysClock+0xe8>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004f06:	4a1b      	ldr	r2, [pc, #108]	; (8004f74 <SetSysClock+0xe8>)
 8004f08:	4b1a      	ldr	r3, [pc, #104]	; (8004f74 <SetSysClock+0xe8>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f10:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004f12:	4a18      	ldr	r2, [pc, #96]	; (8004f74 <SetSysClock+0xe8>)
 8004f14:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <SetSysClock+0xe8>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004f1c:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004f1e:	4a15      	ldr	r2, [pc, #84]	; (8004f74 <SetSysClock+0xe8>)
 8004f20:	4b14      	ldr	r3, [pc, #80]	; (8004f74 <SetSysClock+0xe8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f28:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004f2a:	bf00      	nop
 8004f2c:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <SetSysClock+0xe8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0f9      	beq.n	8004f2c <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004f38:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <SetSysClock+0xf4>)
 8004f3a:	f240 7205 	movw	r2, #1797	; 0x705
 8004f3e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004f40:	4a0c      	ldr	r2, [pc, #48]	; (8004f74 <SetSysClock+0xe8>)
 8004f42:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <SetSysClock+0xe8>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f023 0303 	bic.w	r3, r3, #3
 8004f4a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004f4c:	4a09      	ldr	r2, [pc, #36]	; (8004f74 <SetSysClock+0xe8>)
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <SetSysClock+0xe8>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f043 0302 	orr.w	r3, r3, #2
 8004f56:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8004f58:	bf00      	nop
 8004f5a:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <SetSysClock+0xe8>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d1f9      	bne.n	8004f5a <SetSysClock+0xce>
    {
    }
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40023800 	.word	0x40023800
 8004f78:	07405a08 	.word	0x07405a08
 8004f7c:	40007000 	.word	0x40007000
 8004f80:	40023c00 	.word	0x40023c00

08004f84 <__libc_init_array>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	4e0d      	ldr	r6, [pc, #52]	; (8004fbc <__libc_init_array+0x38>)
 8004f88:	4c0d      	ldr	r4, [pc, #52]	; (8004fc0 <__libc_init_array+0x3c>)
 8004f8a:	1ba4      	subs	r4, r4, r6
 8004f8c:	10a4      	asrs	r4, r4, #2
 8004f8e:	2500      	movs	r5, #0
 8004f90:	42a5      	cmp	r5, r4
 8004f92:	d109      	bne.n	8004fa8 <__libc_init_array+0x24>
 8004f94:	4e0b      	ldr	r6, [pc, #44]	; (8004fc4 <__libc_init_array+0x40>)
 8004f96:	4c0c      	ldr	r4, [pc, #48]	; (8004fc8 <__libc_init_array+0x44>)
 8004f98:	f000 f818 	bl	8004fcc <_init>
 8004f9c:	1ba4      	subs	r4, r4, r6
 8004f9e:	10a4      	asrs	r4, r4, #2
 8004fa0:	2500      	movs	r5, #0
 8004fa2:	42a5      	cmp	r5, r4
 8004fa4:	d105      	bne.n	8004fb2 <__libc_init_array+0x2e>
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fac:	4798      	blx	r3
 8004fae:	3501      	adds	r5, #1
 8004fb0:	e7ee      	b.n	8004f90 <__libc_init_array+0xc>
 8004fb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fb6:	4798      	blx	r3
 8004fb8:	3501      	adds	r5, #1
 8004fba:	e7f2      	b.n	8004fa2 <__libc_init_array+0x1e>
 8004fbc:	080061c4 	.word	0x080061c4
 8004fc0:	080061c4 	.word	0x080061c4
 8004fc4:	080061c4 	.word	0x080061c4
 8004fc8:	080061c8 	.word	0x080061c8

08004fcc <_init>:
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fce:	bf00      	nop
 8004fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd2:	bc08      	pop	{r3}
 8004fd4:	469e      	mov	lr, r3
 8004fd6:	4770      	bx	lr

08004fd8 <_fini>:
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fda:	bf00      	nop
 8004fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fde:	bc08      	pop	{r3}
 8004fe0:	469e      	mov	lr, r3
 8004fe2:	4770      	bx	lr
